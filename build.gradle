//-----------------------------------------------------------------------------
// Copyright (c) Air Computing Inc., 2013.
//-----------------------------------------------------------------------------

ext {
    clientResourcesDir = "${rootDir}/resource/client"
    commonResourcesDir = "${rootDir}/resource/common"
    serverResourcesDir = "${rootDir}/resource/server"

    // declare, but do not define the directories in which
    // OS-specific jars and native libraries are stored
    clientOSDependentResourcesDirs = []

    // environment variable used by the dynamic library loader
    // to locate shared libraries
    sharedLibrarySearchPathVariable = ''

    // manual dependency specifcation for our custom version of rest-assured-1.8.1
    restAssuredDependencies = [
            'commons-codec:commons-codec:1.6',
            'org.apache.commons:commons-lang3:3.1',
            'commons-logging:commons-logging:1.1.1',
            'org.codehaus.groovy:groovy-all:2.1.2',
            'org.apache.httpcomponents:httpclient:4.2.1',
            'org.apache.httpcomponents:httpcore:4.2.1',
            'org.apache.httpcomponents:httpmime:4.2.1',
            'org.ccil.cowan.tagsoup:tagsoup:1.2.1'
    ]

    // manual dependency specifcation for our custom version of jedis
    jedisDependencies = [
            'org.apache.commons:commons-pool2:2.0'
    ]
}

//-----------------------------------------------------------------------------
// os-dependent configuration
//-----------------------------------------------------------------------------

String os = System.getProperty("os.name").toLowerCase();
if (os.contains('windows')) {
    sharedLibrarySearchPathVariable = 'PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/win", "${clientResourcesDir}/win/lib"]
} else if (os.contains('mac')) {
    sharedLibrarySearchPathVariable = 'DYLD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/osx", "${clientResourcesDir}/osx/lib"]
} else {
    String arch = System.getProperty("os.arch").toLowerCase();
    if (arch.equals("amd64")) {
        arch = "amd64"
    } else if (arch.equals("i386")) {
        arch = "i386"
    } else {
        println "unsupported arch ${arch}"
        System.exit(1)
    }

    sharedLibrarySearchPathVariable = 'LD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/linux/${arch}", "${clientResourcesDir}/linux/${arch}/lib"]
}

//-----------------------------------------------------------------------------
// common subproject configuration
//-----------------------------------------------------------------------------

subprojects {
    apply plugin: 'java'

    //-------------------------------------------------------------------------
    // dependency configuration
    //-------------------------------------------------------------------------

    configurations.all {
        resolutionStrategy {

            // force specific versions of libraries
            force 'com.yammer.dropwizard:dropwizard-core:0.6.2',
                  'com.fasterxml.jackson.core:jackson-annotations:2.2.1',
                  'org.bouncycastle:bcprov-jdk15on:1.50',
                  'org.bouncycastle:bcpkix-jdk15on:1.50'

            // force a specific version of the following groups of libraries
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.contains('com.fasterxml.jackson')) {
                    details.useVersion '2.1.2'
                }

                if (details.requested.group == 'org.slf4j') {
                    details.useVersion '1.7.5'
                }

                if (details.requested.group == 'ch.qos.logback') {
                    details.useVersion '1.1.2'
                }
            }
        }
    }

    repositories {
        flatDir {
            dirs "${clientResourcesDir}/all/lib", "${commonResourcesDir}/lib", "${commonResourcesDir}/lib.test", "${serverResourcesDir}/lib", clientOSDependentResourcesDirs
        }

        mavenLocal()

        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/central/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/apache-snapshots/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/codehaus-snapshots/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/google-api-client-libraries/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/thirdparty/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/releases/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/OpenConext/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/snapshots/' }
    }

    //-------------------------------------------------------------------------
    // paths
    //-------------------------------------------------------------------------

    buildDir = "${rootDir}/out.gradle/${name.replace('src/', '')}"

    //-------------------------------------------------------------------------
    // environment
    //-------------------------------------------------------------------------

    test {
        def libraryPath = clientOSDependentResourcesDirs.join(System.getProperty("path.separator"))

        ignoreFailures = true
        environment sharedLibrarySearchPathVariable, "${libraryPath}"
        jvmArgs "-Djava.library.path=${libraryPath}"
        maxHeapSize '512m'
        exclude '**/Abstract*Test*'
        testLogging.showStandardStreams = true
        outputs.upToDateWhen { false }

        // have to explicitly specify the system properties
        // that will be propagated to the test jvm

        def mysqlPath = System.getProperty('junit.mysqlPath')
        if (mysqlPath != null) {
            systemProperty 'junit.mysqlPath', mysqlPath
        }

        def enableLogging = System.getProperty('junit.enable_logging')
        if (enableLogging != null) {
            systemProperty 'junit.enable_logging', enableLogging
        }
    }

    //-------------------------------------------------------------------------
    // tasks
    //-------------------------------------------------------------------------

    clean.dependsOn(':cleanAllProtoClasses')

    task dist(type: Copy, description: "Assemble all runtime dependencies for ${name}") {
        from configurations.runtime
        from jar
        into "${buildDir}/dist"
    }
}

//-----------------------------------------------------------------------------
// tasks
//-----------------------------------------------------------------------------

task generateAllProtoClasses(type: Exec, description: "run ant to build the protobuf plugins and generate all Java and Python protobuf classes") {
    workingDir "${rootDir}"
    executable 'ant'
    args 'proto'
}

task cleanAllProtoClasses(type: Exec, description: "run ant to delete generated Java and Python protobuf classes") {
    workingDir "${rootDir}"
    executable 'ant'
    args 'clean'
}
