//-----------------------------------------------------------------------------
// Copyright (c) Air Computing Inc., 2013.
//-----------------------------------------------------------------------------

ext {
    clientResourcesDir = "${rootDir}/resource/client"
    serverResourcesDir = "${rootDir}/resource/server"

    // declare, but do not define the directories in which
    // OS-specific jars and native libraries are stored
    clientOSDependentResourcesDirs = []

    // environment variable used by the dynamic library loader
    // to locate shared libraries
    sharedLibrarySearchPathVariable = ''

    // manual dependency specifcation for our custom version of jedis
    jedisDependencies = [
            'org.apache.commons:commons-pool2:2.0'
    ]
}

//-----------------------------------------------------------------------------
// os-dependent configuration
//-----------------------------------------------------------------------------

String os = System.getProperty("os.name").toLowerCase();
if (os.contains('windows')) {
    sharedLibrarySearchPathVariable = 'PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/win", "${clientResourcesDir}/win/lib"]
    // We don't support building from Windows at this time
    ext.bootstrapClassPath = 'UNDEFINED'
} else if (os.contains('mac')) {
    sharedLibrarySearchPathVariable = 'DYLD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/osx", "${clientResourcesDir}/osx/lib"]
    ext.bootstrapClassPath = '/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar'
} else {
    String arch = System.getProperty("os.arch").toLowerCase();
    if (arch.equals("amd64")) {
        arch = "amd64"
    } else if (arch.equals("i386")) {
        arch = "i386"
    } else {
        println "unsupported arch ${arch}"
        System.exit(1)
    }

    sharedLibrarySearchPathVariable = 'LD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/linux/${arch}", "${clientResourcesDir}/linux/${arch}/lib"]
    ext.bootstrapClassPath = '/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar'
}

//-----------------------------------------------------------------------------
// common subproject configuration
//-----------------------------------------------------------------------------

subprojects {
    apply plugin: 'java'

    // Default to Java 8 for everything.
    // Dryad and Restless override this for Java 6 compat.
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava.options.compilerArgs << '-Werror'
    compileJava.options.compilerArgs << '-Xlint:all'
    compileTestJava.options.compilerArgs << '-Werror'
    compileTestJava.options.compilerArgs << '-Xlint:all'

    //-------------------------------------------------------------------------
    // dependency configuration
    //-------------------------------------------------------------------------

    configurations.all {
        resolutionStrategy {

            // force a specific version of the following groups of libraries
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.contains('com.fasterxml.jackson')) {
                    details.useVersion '2.4.1'
                }

                if (details.requested.group == 'org.slf4j') {
                    details.useVersion '1.7.7'
                }

                if (details.requested.group == 'ch.qos.logback') {
                    details.useVersion '1.1.2'
                }
            }
        }
    }

    repositories {
        flatDir {
            dirs "${clientResourcesDir}/all/lib", "${serverResourcesDir}/lib", clientOSDependentResourcesDirs
        }

        mavenLocal()
        jcenter()

        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/central/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/apache-snapshots/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/codehaus-snapshots/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/google-api-client-libraries/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/thirdparty/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/releases/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/OpenConext/' }
        maven { url 'http://repos.arrowfs.org/nexus/content/repositories/snapshots/' }
    }

    //-------------------------------------------------------------------------
    // paths
    //-------------------------------------------------------------------------

    buildDir = "${rootDir}/out.gradle/${name.replace('src/', '')}"

    //-------------------------------------------------------------------------
    // environment
    //-------------------------------------------------------------------------

    test {
        def libraryPath = clientOSDependentResourcesDirs.join(System.getProperty("path.separator"))

        ignoreFailures = true
        environment sharedLibrarySearchPathVariable, "${libraryPath}"
        systemProperties.put "java.library.path", "${libraryPath}"
        systemProperties.put "junit.mysqlSpSchemaPath", "${rootDir}/src/spsv/resources/sp/db/migration"
        maxHeapSize '512m'
        exclude '**/Abstract*Test*'
        testLogging.showStandardStreams = true
        outputs.upToDateWhen { false }

        // have to explicitly specify the system properties
        // that will be propagated to the test jvm

        def mysqlPath = System.getProperty('junit.mysqlPath')
        if (mysqlPath != null) {
            systemProperty 'junit.mysqlPath', mysqlPath
        }

        def enableLogging = System.getProperty('junit.enable_logging')
        if (enableLogging != null) {
            systemProperty 'junit.enable_logging', enableLogging
        }
    }

    //-------------------------------------------------------------------------
    // tasks
    //-------------------------------------------------------------------------

    clean.dependsOn(':cleanAllProtoClasses')

    task dist(type: Copy, description: "Assemble all runtime dependencies for ${name}") {
        from configurations.runtime
        from jar
        into "${buildDir}/dist"
    }
}

//-----------------------------------------------------------------------------
// tasks
//-----------------------------------------------------------------------------

task generateAllProtoClasses(type: Exec, description: "run invoke to build the protobuf plugins and generate all Java and Python protobuf classes") {
    workingDir "${rootDir}"
    executable "python"
    args "${rootDir}/invoke", 'build_protoc_plugins', 'proto'
}

task cleanAllProtoClasses(type: Exec, description: "run invoke to delete generated Java and Python protobuf classes") {
    workingDir "${rootDir}"
    executable 'python'
    args "${rootDir}/invoke", 'clean'
}
