//-----------------------------------------------------------------------------
// Copyright (c) Air Computing Inc., 2013.
//-----------------------------------------------------------------------------

ext {
    clientResourcesDir = "${rootDir}/resource/client"
    serverResourcesDir = "${rootDir}/resource/server"

    // declare, but do not define the directories in which
    // OS-specific jars and native libraries are stored
    clientOSDependentResourcesDirs = []

    // environment variable used by the dynamic library loader
    // to locate shared libraries
    sharedLibrarySearchPathVariable = ''

    // manual dependency specifcation for our custom version of jedis
    jedisDependencies = [
            'org.apache.commons:commons-pool2:2.0'
    ]
}

//-----------------------------------------------------------------------------
// os-dependent configuration
//-----------------------------------------------------------------------------

String os = System.getProperty("os.name").toLowerCase();
if (os.contains('windows')) {
    sharedLibrarySearchPathVariable = 'PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/win", "${clientResourcesDir}/win/lib"]
} else if (os.contains('mac')) {
    sharedLibrarySearchPathVariable = 'DYLD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/osx", "${clientResourcesDir}/osx/lib"]
} else {
    String arch = System.getProperty("os.arch").toLowerCase();
    if (arch.equals("amd64")) {
        arch = "amd64"
    } else if (arch.equals("i386")) {
        arch = "i386"
    } else {
        println "unsupported arch ${arch}"
        System.exit(1)
    }

    sharedLibrarySearchPathVariable = 'LD_LIBRARY_PATH'
    clientOSDependentResourcesDirs = ["${clientResourcesDir}/linux/${arch}", "${clientResourcesDir}/linux/${arch}/lib"]
}

//-----------------------------------------------------------------------------
// common subproject configuration
//-----------------------------------------------------------------------------

subprojects {
    apply plugin: 'java'

    // Default to Java 8 for everything.
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava.options.compilerArgs << '-Werror'
    compileJava.options.compilerArgs << '-Xlint:all'
    compileTestJava.options.compilerArgs << '-Werror'
    compileTestJava.options.compilerArgs << '-Xlint:all'

    //-------------------------------------------------------------------------
    // dependency configuration
    //-------------------------------------------------------------------------

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"

            // force a specific version of the following groups of libraries
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.contains('com.fasterxml.jackson')) {
                    details.useVersion '2.4.5'
                }

                if (details.requested.group.contains('com.codahale.metrics')) {
                    details.useVersion '3.0.2'
                }

                if (details.requested.group.contains('com.google.guava')) {
                    details.useVersion '17.0'
                }

                if (details.requested.group == 'org.slf4j') {
                    details.useVersion '1.7.25'
                }

                if (details.requested.group == 'ch.qos.logback') {
                    details.useVersion '1.1.10'
                }
            }
        }
    }

    repositories {
        flatDir {
            dirs "${clientResourcesDir}/all/lib", "${serverResourcesDir}/lib", clientOSDependentResourcesDirs
        }

        mavenCentral()
    }

    //-------------------------------------------------------------------------
    // paths
    //-------------------------------------------------------------------------

    buildDir = "${rootDir}/out.gradle/${name.replace('src/', '')}"

    //-------------------------------------------------------------------------
    // environment
    //-------------------------------------------------------------------------

    test {
        def libraryPath = clientOSDependentResourcesDirs.join(System.getProperty("path.separator"))

        environment sharedLibrarySearchPathVariable, "${libraryPath}"
        systemProperties.put "java.library.path", "${libraryPath}"
        systemProperties.put "junit.mysqlSpSchemaPath", "${rootDir}/src/spdb/src/main/resources/db/migration"
        maxHeapSize '512m'
        exclude '**/Abstract*Test*'
        testLogging.showStandardStreams = true
        outputs.upToDateWhen { false }

        // have to explicitly specify the system properties
        // that will be propagated to the test jvm

        for (prop in ['mysqlHost', 'mysqlUser', 'mysqlPass', 'enable_logging']) {
            def k = 'junit.' + prop
            def v = System.getProperty(k)
            if (v == null) {
                v = System.getenv('JUNIT_' + prop) 
            }
            if (v != null) {
                systemProperty k, v
            }
        }

        // tune down the netty 4 buffer pool size
        systemProperties.put "io.netty.leakDetectionLevel", "paranoid"
        systemProperties.put "io.netty.allocator.numHeapArenas", 1
        systemProperties.put "io.netty.allocator.numDirectArenas", 1
        systemProperties.put "io.netty.allocator.maxOrder", 4
    }

    //-------------------------------------------------------------------------
    // tasks
    //-------------------------------------------------------------------------
    task cleanDist(type: Delete) {
        delete "${buildDir}/dist"
    }

    task dist(type: Copy, dependsOn:cleanDist, description: "Assemble all runtime dependencies for ${name}") {
        from configurations.runtime
        from jar
        into "${buildDir}/dist"
    }

    task deps(type: DependencyReportTask) {}
}

apply plugin: "idea"
idea {
    module {
        excludeDirs = []
        excludeDirs << file(".gradle")
        excludeDirs << file("approot")
        excludeDirs << file("resource")
        excludeDirs << file("out.gradle")
        excludeDirs << file("out.shell")
        excludeDirs << file("out.idea")
        excludeDirs << file("packaging/build")
    }
}
