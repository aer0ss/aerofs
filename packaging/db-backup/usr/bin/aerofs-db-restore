#!/bin/bash
set -eu

function usage()
{
    echo "Usage: $0 <aerofs_db_backup_file>"
}

function malformed_db_backup()
{
    echo "ERROR: Malformed db backup file: $@."
}

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

file="$1"

if [ ! -f "$file" ]
then
    echo "ERROR: \"$file\" does not exist."
    usage
    exit 2
fi

echo ">>> Reading backup file..."

tempdir=$(mktemp -d /tmp/aerofs-db-backup.XXXXXXXXX)
cp -a "$file" "$tempdir"

pushd $tempdir 1>/dev/null 2>/dev/null
# gnu tar does not handle reading sparse files efficiently using SEEK_HOLE
# bsd tar does not handle extracting sparse files efficiently and fills all the holes
# takeaway: create tars with bsdtar, and extract them with gnutar
# NOTE: In case the backup file came from 0.8.63 through 0.8.68 inclusive,
# we will deliberately ignore any topics that live in /data/topics.
#           Let this monument stand for all time.
tar --extract --sparse --exclude aerofs-db-backup/topics -f $file

if [ ! -d aerofs-db-backup ]
then
    malformed_db_backup "expected top level directory \"aerofs-db-backup\""
    exit 3
fi

if [ ! -f aerofs-db-backup/redis.aof ]
then
    malformed_db_backup "expected file \"aerofs-db-backup/redis.aof\" not found"
    exit 4
fi

if [ ! -f aerofs-db-backup/mysql.dump ]
then
    malformed_db_backup "expected file \"aerofs-db-backup/mysql.dump\" not found"
    exit 5
fi

if [ ! -d aerofs-db-backup/ca-files ]
then
    malformed_db_backup "expected dir \"aerofs-db-backup/ca-files\" not found"
    exit 6
fi

if [ ! -f aerofs-db-backup/external.properties ]
then
    malformed_db_backup "expected dir \"aerofs-db-backup/external.properties\" not found"
    exit 7
fi

echo ">>> Restoring redis database..."
service redis-aof stop 1>/dev/null 2>/dev/null
rm -f /data/redis/redis.*
cp -a aerofs-db-backup/redis.aof /data/redis
service redis-aof start 1>/dev/null 2>/dev/null

# NOTE: This is not a general solution. Required because mysql.dump only deletes
# and restores tables that existed when the dump-file was created. This will cause
# problems when Flyway makes non-idempotent changes to such tables.
echo ">>> Clearing flyway-managed databases..."
for db in bifrost aerofs_sp polaris
do
    echo ">>>   Drop $db..."
    echo "drop database if exists \`$db\`; " | mysql
done

echo ">>> Restoring mysql database..."
mysql < aerofs-db-backup/mysql.dump

# As a compromise between CI and packaging complexity, we ship polaris
# in the private cloud appliance. It is running but clients do not
# attempt to talk to it and nginx doesn't proxy requests to it.
# To preserve maximum schema flexibility we explictly drop the polaris
# db from backups.
# TODO: remove this when polaris schema is stable
echo "drop database if exists \`polaris\`; create database \`polaris\`;" | mysql

echo ">>> Restoring CA files..."
service ca-server stop 1>/dev/null 2>/dev/null || true
rm -rf /opt/ca/prod
mkdir -p /opt/ca/prod
cp -a aerofs-db-backup/ca-files/* /opt/ca/prod
service ca-server start 1>/dev/null 2>/dev/null

# Only restore verkehr topics for backups that are new enough to contain
# backed-up topic sets, version 2. This works around a bug that existed
# in private-0.8.63 to private-0.8.68. We deliberately exclude topics
# under /data/topics in the tar expansion.
echo ">>> Restoring verkehr persistent topics..."
if [ -d aerofs-db-backup/v2topics ] ; then
    rm -rf /data/topics
    cp -a aerofs-db-backup/v2topics /data/topics
fi

echo ">>> Restoring configuration properties..."
cp -a aerofs-db-backup/external.properties /opt/config/properties

popd 1>/dev/null 2>/dev/null

echo ">>> AeroFS databases successfully restored."
