#!/usr/bin/python
# vim: set expandtab ts=2 sw=2:

#
# Fake-delete a user: render their account inoperable by setting the u_hashed_passwd
# to some garbage.
#

import logging
import MySQLdb
import sys
from config import config

logger = logging.getLogger("get_owner")

def get_user_info_from_email(email, spconn):
  user_info = {}
  spcursor = spconn.cursor(MySQLdb.cursors.DictCursor)
  try:
    spcursor.execute("""SELECT * FROM sp_user WHERE u_id = %s """, email)
    row = spcursor.fetchone()
    return row
  except Exception as err:
    logger.warning('fail get user info err:%s' %err)
    raise err
  finally:
    spcursor.close()

def rehash_user(email, spconn):
  spcursor = spconn.cursor()
  try:
    spcursor.execute("""update sp_user set u_hashed_passwd="_deleted_by_support_" WHERE u_id = %s """, email)
    print("Rows pending update: %d " % spcursor.rowcount )

    if spcursor.rowcount > 1:
        raise Exception('I cowardly refuse to go on. This touches too many rows')

    if spcursor.rowcount == 1:
        promptval = raw_input('Type "wut" if you are sure you want to do this: ')
        if promptval == "wut":
            spconn.commit()

  except Exception as err:
    logger.warning('fail update user info err:%s' %err)
    raise err
  finally:
    spcursor.close()

def make_connection(user, host, password, dbname):
  logger.debug('make db connection %s@%s/%s' %(user, host, dbname))
  conn = MySQLdb.connect(user=user, host=host, passwd=password, db=dbname)
  return conn

def setup_logger():
  logging.basicConfig(level=logging.INFO)

if __name__ == '__main__':
  if len(sys.argv) != 2:
    print("Usage: %s <username>" %(sys.argv[0]))
    sys.exit(1)

  setup_logger()

  try:
    pwval = raw_input("Enter SP r/w password: ");

    # TODO get a config file to pull the database information
    spconn = make_connection('aerofs_sp', config["sp_database"], pwval, 'aerofs_sp')

    email = sys.argv[1]

    print "Before:"
    user_info = get_user_info_from_email(email, spconn)
    print "First Name : {0}".format(user_info["u_first_name"])
    print "Last Name  : {0}".format(user_info["u_last_name"])
    print "Id : {0}".format(user_info["u_id"])
    print "Hash : {0}".format(user_info["u_hashed_passwd"])

    print "Wiping out password..."
    rehash_user(email, spconn)

    print "After:"
    after = get_user_info_from_email(email, spconn)
    print "First Name : {0}".format(after["u_first_name"])
    print "Last Name  : {0}".format(after["u_last_name"])
    print "Hash : {0}".format(after["u_hashed_passwd"])

  except Exception as err:
    print err
    logger.error('cannot connect to db')
