#cloud-config

coreos:
  units:
    - name: 00-ci-static.network
      content: |
        [Match]
        # enp0s17 refers to the VM's first NIC. Since another interface enp0s19 is used for NAT we can't use 'en*'
        Name=enp0s17
        [Network]
        Address={{ ip_and_prefix }}
        Gateway={{ gateway }}

    # signup-decoder is a Web service listening at <appliance-hostname>:5775 to return signup codes stored in mysql.
    # It's used by CI to sign up users automatically. It's a container because containers are the only thing CoreOS supports.
    - name: signup-decoder.service
      command: start
      content: |
        [Unit]
        Description=Signup Decoder
        [Service]
        ExecStart=/signup-decoder/run
        ExecStop=/usr/bin/docker rm -fv decoder

write_files:
  - path: /signup-decoder/run
    permissions: 0755
    content: |
      #!/bin/bash
      set -e
      docker build -t signup-decoder /signup-decoder
      docker run --name decoder -p 21337:21337 -v /var/run/docker.sock:/var/run/docker.sock signup-decoder

  - path: /signup-decoder/Dockerfile
    content: |
      FROM debian:jessie
      RUN apt-get update && apt-get install -y curl python docker.io &&\
          curl -SL 'https://bootstrap.pypa.io/get-pip.py' | python &&\
          pip install Flask
      COPY decoder.py /
      CMD [ "python", "-u", "/decoder.py" ]

  - path: /signup-decoder/decoder.py
    content: |
      from flask import Flask, request, jsonify
      from subprocess import check_output, Popen, PIPE
      app = Flask(__name__)
      IMAGE = 'aerofs/mysql'

      @app.route("/get_code", methods=["GET"])
      def get():
          user = request.args.get('user')
          if not user: return "Must specify user id in the form of 'user=email@address'", 400

          # Find mysql container
          container = None
          for line in check_output(['docker', 'ps']).split('\n'):
              if IMAGE in line:
                  # last word is the container name
                  container = line.strip().rsplit(' ', 1)[1]
                  break
          if not container:
              return 'found no container running image {}'.format(IMAGE), 400

          # Run SQL in mysql container to print the last signup code of the given user
          script = 'mysql -N aerofs_sp <<< "select t_code from sp_signup_code where t_to=\'{}\' order by t_ts desc limit 1"'.format(user)
          p = Popen(['docker', 'exec', container, 'bash', '-c', script], stdout=PIPE, stderr=PIPE)
          out, err = p.communicate()
          if err:
            return err, 400
          else:
            return jsonify(signup_code=out.strip())

      app.run('0.0.0.0', 21337)

ssh_authorized_keys:
    - {{ ssh_pub }}