user root;

worker_processes 4;

events {
  worker_connections 768;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 60;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  access_log /dev/stdout;
  error_log /dev/stderr;

  gzip on;
  gzip_disable "msie6";

  server {
    listen 80;

    location / {
      rewrite ^ https://$host$request_uri permanent;
    }

    include /etc/nginx/sites/bunker;
  }

  # Standard HTTPS port.
  #
  # Uses either the certificate provided by the system admin or a self-signed
  # certificate if no custom cert was provided.
  #
  # In the context of nginx, this is a one-way authentication endpoint (i.e.
  # only this server is authenticated; we do not require client authentication
  # here).
  server {
    listen 443 ssl http2;

    include /etc/nginx/sites/*;

    include /etc/nginx/ssl-and-headers.conf;
    ssl_certificate /etc/nginx/certs/browser.crt;
    ssl_certificate_key /etc/nginx/certs/browser.key;
  }

  # A play on the standard HTTPS port.
  #
  # Uses a certificate signed by the unique Private Cloud appliance CA.
  #
  # As with the above 443 endpoint, this is a one-way authentication endpoint.
  server {
    listen 4433;

    include /etc/nginx/sites/*;

    include /etc/nginx/ssl-and-headers.conf;
    ssl_certificate /etc/nginx/certs/aerofs.crt;
    ssl_certificate_key /etc/nginx/certs/aerofs.key;
  }

  # Port 5222 is used here because when this endpoint was added we wanted to
  # use a port that our current enterprise customers already had open. When
  # we abandonded ejabberd 5222 became available, so we use it here.
  #
  # As with the above 4433 endpoint, uses a certificate signed by the unique
  # Private Cloud appliance CA.
  #
  # In the context of nginx, this is an optional two-way authentication
  # endpoint, i.e. this server is authenticated, and the client is optionally
  # authenticated. This may seem redundant with the 4433 endpoint, but it is
  # not. Optional mutual authentication endpoints are not honored by the
  # latest versions of OS X, and Apple will actually inject a certficiate
  # when a client is trying to connect to an optional mutual auth endpoint,
  # such as this one, without providing a client certificate. This is nonsense.
  # To work around this, we provide this endpoint and the 4433 endpoint above.
  # Services that need mutual auth should use this, e.g. SP, and other services
  # that do not need mutual auth should use the above, e.g. public API clients.
  server {
    listen 5222;

    include /etc/nginx/sites/*;

    ssl_client_certificate /etc/nginx/certs/cacert.pem;
    ssl_verify_client optional;

    include /etc/nginx/ssl-and-headers.conf;
    ssl_certificate /etc/nginx/certs/aerofs.crt;
    ssl_certificate_key /etc/nginx/certs/aerofs.key;
  }
}
