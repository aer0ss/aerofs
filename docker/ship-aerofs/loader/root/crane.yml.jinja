containers:
  data:
    image: aerofs/data
    run:
      detach: true

  loader:
    image: aerofs/loader

  mysql:
    image: aerofs/mysql
    run:
      detach: true
      volumes-from:
        - data

  redis:
    image: aerofs/redis
    run:
      detach: true
      volumes-from:
        - data

  postfix:
    image: aerofs/postfix
    run:
      detach: true

{% if not hpc %}
  ntp:
    image: aerofs/ntp
    run:
      # ntpdate needs privilege
      privileged: true
      detach: true
      volume:
        # datatimectl needs dbus access
        - /var/run/dbus:/var/run/dbus
        - /usr/bin/timedatectl:/usr/bin/timedatectl:ro
        - /etc/systemd/timesyncd.conf.d:/etc/systemd/timesyncd.conf.d
      volumes-from:
        - data
      link:
        - config:config.service
{% endif %}

  lipwig:
    image: aerofs/lipwig
    run:
      detach: true
      publish:
        - "{{ get_port('lipwig', 29438) }}:8787"
      # For /data/deployment-secret
      volumes-from:
        - data
      link:
        - config:config.service
        - ca-server:ca.service

  blurber:
    image: aeroim/blurber
    run:
      detach: true

  sloth:
    image: aeroim/sloth
    run:
      detach: true
      volume:
        - /etc/ssl/certs:/etc/ssl/certs:ro
        - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      volumes-from:
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - sparta:sparta.service

  nginx:
    image: aerofs/nginx
    run:
      detach: true
      publish:
      {% if not hpc %}
        - "80:80"
        - "443:443"
      {% endif %}
        - "{{ get_port('nginx', 4433) }}:4433"
        - "{{ get_port('nginx_mut_auth', 5222) }}:5222"
      volumes-from:
        - data
      link:
        - aeroimweb:aeroimweb.service
        - auditor:auditor.service
        - blurber:blurber.service
        - bunker:bunker.service
        - ca-server:ca.service
        - charlie:charlie.service
        - config:config.service
        - havre:havre.service
        - openid:openid.service
        - polaris:polaris.service
        - repackaging:repackaging.service
        - sloth:sloth.service
        - sp:sp.service
        - status:status.service
        - sparta:sparta.service
        - trifrost:trifrost.service
        - web:web.service

  bunker:
    image: aerofs/bunker
    run:
      detach: true
      {# Make sure Bunker doesn't have access to Docker in HPC, to avoid leaking info from other #}
      {# customers (from container log collection, for example). #}
      {% if not hpc %}
      volume:
        # To collect docker logs
        - /var/run/docker.sock:/var/run/docker.sock
        - /var/lib/docker/containers:/var/lib/docker/containers
      {% endif %}
      volumes-from:
        - data
      link:
        - config:config.service
        - loader:loader.service
        - verification:verification.service
        - logcollection:logcollection.service
        - repackaging:repackaging.service
        - sparta:sparta.service
        - status:status.service
      {% if not hpc %}
        - ntp:ntp.service
      {% endif %}
# so that bunker can write to the autocomplete user table
# remove this when ldap syncing is implemented
        - mysql:mysql.service

  enforcer:
    image: aerofs/enforcer
    run:
      detach: true
      link:
        - config:config.service
        - loader:loader.service

  repackaging:
    image: aerofs/repackaging
    run:
      detach: true
      volumes-from:
        - data
      link:
        - ca-server:ca.service
        - config:config.service

  config:
    image: aerofs/config
    run:
      detach: true
      volumes-from:
        - data
      link:
        - loader:loader.service

  # Use 'ca-server' not 'ca' to avoid conflicts with 'ca*' container ids
  ca-server:
    image: aerofs/ca
    run:
      detach: true
      volumes-from:
        - data
      link:
        - mysql:mysql.service
        - config:config.service

  web:
    image: aerofs/web
    run:
      detach: true
      volumes-from:
        - data
      link:
        - sparta:sparta.service
        - config:config.service
        - sp:sp.service
        - havre:havre.service
        - charlie:charlie.service
        - auditor:auditor.service

{% if not hpc %}
  zephyr:
    image: aerofs/zephyr
    run:
      detach: true
      net: host
      publish:
        - "8888:8888"
{% endif %}

  havre:
    image: aerofs/havre
    run:
      publish:
        # The API tunnel that AeroFS daemons connect to.
        - "{{ get_port('havre', 8084) }}:8084"
      detach: true
      volumes-from:
        # For deployment secret
        - data
      link:
        - ca-server:ca.service
        - sparta:sparta.service
        - config:config.service

  polaris:
    image: aerofs/polaris
    run:
      detach: true
      volumes-from:
        # For /data/deployment_secret
        - data
      link:
        - config:config.service
        # for cacert.pem
        - ca-server:ca.service
        - mysql:mysql.service
        - sparta:sparta.service
        - lipwig:lipwig.service

  sparta:
    image: aerofs/sparta
    run:
      detach: true
      volumes-from:
        # For /data/deployment_secret
        - data
      link:
        - config:config.service
        # for cacert.pem
        - ca-server:ca.service
        - mysql:mysql.service
        - redis:redis.service
        - charlie:charlie.service
        - auditor:auditor.service
        - lipwig:lipwig.service
        - postfix:postfix.service

  auditor:
    image: aerofs/auditor
    run:
      detach: true
      volumes-from:
        # For deployment secret
        - data
      link:
        - config:config.service
        - ca-server:ca.service

  charlie:
    image: aerofs/charlie
    run:
      detach: true
      volumes-from:
        - data

  sp:
    image: aerofs/sp
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - ca-server:ca.service
        - mysql:mysql.service
        - redis:redis.service
        - postfix:postfix.service
        - lipwig:lipwig.service
        - auditor:auditor.service
        - config:config.service
        - sparta:sparta.service

  trifrost:
    image: aerofs/trifrost
    run:
      detach: true
      volumes-from:
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - sparta:sparta.service

  aeroimweb:
    image: aeroim/nginx
    run:
      detach: true

  verification:
    image: aerofs/verification
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - postfix:postfix.service
        - config:config.service

  probe:
    image: aerofs/probe
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - config:config.service
        - sparta:sparta.service

  logcollection:
    image: aerofs/logcollection
    run:
      # for deployment secret
      volumes-from:
        - data
      detach: true
      link:
        # for cacert.pem
        - ca-server:ca.service
        - postfix:postfix.service
        - redis:redis.service
        - mysql:mysql.service
        - config:config.service
        - lipwig:lipwig.service

  openid:
    image: aerofs/openid
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - mysql:mysql.service
        - redis:redis.service
        - config:config.service

  status:
    image: aerofs/status
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - loader:loader.service
        - ca-server:ca.service
        - charlie:charlie.service
        - config:config.service
        - lipwig:lipwig.service
        - havre:havre.service
        - openid:openid.service
        - mysql:mysql.service
        - polaris:polaris.service
        - postfix:postfix.service
        - probe:probe.service
        - redis:redis.service
        - repackaging:repackaging.service
        - sp:sp.service
        - sparta:sparta.service
        - verification:verification.service
        - web:web.service

  {% if not hpc %}
  logrotator:
    image: aerofs/logrotator
    run:
      detach: true
      volume:
        # To rotate docker logs
        - /var/lib/docker/containers:/var/lib/docker/containers
  {% endif %}

  maintenance-nginx:
    image: aerofs/maintenance-nginx
    run:
      detach: true
      {% if not hpc %}
      publish:
        - "80:80"
        - "443:443"
        - "4433:4433"
      {% endif %}
      link:
        - ca-server:ca.service
        - config:config.service
        - maintenance-bunker:bunker.service
        - maintenance-web:web.service
      volumes-from:
        - data

  maintenance-bunker:
    image: aerofs/bunker
    run:
      detach: true
      {# Make sure Bunker doesn't have access to Docker in HPC, to avoid leaking info from other #}
      {# customers (from container log collection, for example). #}
      {% if not hpc %}
      volume:
        # To collect docker logs
        - /var/run/docker.sock:/var/run/docker.sock
        - /var/lib/docker/containers:/var/lib/docker/containers
      {% endif %}
      volumes-from:
        - data
      link:
        - config:config.service
        - loader:loader.service
        - verification:verification.service
      {% if not hpc %}
        - ntp:ntp.service
      {% endif %}
        # For db backup
        - mysql:mysql.service

  maintenance-web:
    image: aerofs/maintenance-web
    run:
      detach: true
      volumes-from:
        - data
      link:
        - config:config.service

# Only root services are defined here. Always use 'crane -d all'.
groups:
  default:
    - bunker
    - nginx
    - enforcer
    - lipwig
    {% if not hpc %}
    - logrotator
    - zephyr
    {% endif %}

  # Bunker relies on this group's name to detect if the system is in maintenance mode.
  maintenance:
    - maintenance-nginx
