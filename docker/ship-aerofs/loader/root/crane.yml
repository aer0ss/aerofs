containers:
  data:
    image: aerofs/data
    run:
      detach: true

  loader:
    image: aerofs/loader
    run:
      detach: true
      cmd: simulate-api registry.aerofs.com default
      volume:
        - /var/run/docker.sock:/var/run/docker.sock

  mysql:
    image: aerofs/mysql
    run:
      detach: true
      volumes-from:
        - data

  redis:
    image: aerofs/redis
    run:
      detach: true
      volumes-from:
        - data

  postfix:
    image: aerofs/postfix
    run:
      detach: true

  ntp:
    image: aerofs/ntp
    run:
      # ntpdate needs privilege
      privileged: true
      detach: true
      volume:
        # datatimectl needs dbus access
        - /var/run/dbus:/var/run/dbus
        - /etc/systemd/timesyncd.conf.d:/etc/systemd/timesyncd.conf.d
      volumes-from:
        - data
      link:
        - config:config.service

  ejabberd:
    image: aerofs/ejabberd
    run:
      detach: true
      publish:
        - "5222:5222"
      # For /data/deployment-secret
      volumes-from:
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - ca:ca.service

  nginx:
    image: aerofs/nginx
    run:
      detach: true
      publish:
        - "80:80"
        - "443:443"
        - "4433:4433"
      volumes-from:
        - data
      link:
        - ca:ca.service
        - config:config.service
        - web:web.service
        - repackaging:repackaging.service
        - charlie:charlie.service
        - sp:sp.service
        - havre:havre.service
        - sparta:sparta.service
        - bifrost:bifrost.service
        - auditor:auditor.service
        - openid:openid.service
        - polaris:polaris.service
        - status:status.service

  bunker:
    image: aerofs/bunker
    run:
      detach: true
      publish:
        - "8484:8484"
      volume:
        # To collect docker logs
        - /var/run/docker.sock:/var/run/docker.sock
      volumes-from:
        - data
      link:
        - config:config.service
        - loader:loader.service
        - verification:verification.service
        - logcollection:logcollection.service
        - repackaging:repackaging.service
        - bifrost:bifrost.service
        - status:status.service
        - ntp:ntp.service
# so that bunker can write to the autocomplete user table
# remove this when ldap syncing is implemented
        - mysql:mysql.service

  enforcer:
    image: aerofs/enforcer
    run:
      detach: true
      link:
        - config:config.service
        - loader:loader.service

  repackaging:
    image: aerofs/repackaging
    run:
      detach: true
      volumes-from:
        - data
      link:
        - ca:ca.service
        - config:config.service

  config:
    image: aerofs/config
    run:
      detach: true
      volumes-from:
        - data

  ca:
    image: aerofs/ca
    run:
      detach: true
      volumes-from:
        - data
      link:
        - mysql:mysql.service
        - config:config.service

  web:
    image: aerofs/web
    run:
      detach: true
      volumes-from:
        - data
      link:
        - bifrost:bifrost.service
        - config:config.service
        - sp:sp.service
        - havre:havre.service
        - auditor:auditor.service

  bifrost:
    image: aerofs/bifrost
    run:
      detach: true
      # For /data/deployment-secret
      volumes-from:
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - sp:sp.service

  zephyr:
    image: aerofs/zephyr
    run:
      detach: true
      publish:
        - "8888:8888"

  verkehr:
    image: aerofs/verkehr
    run:
      publish:
        - "29438:29438"
      detach: true
      # sysctl requires privilege
      privileged: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - config:config.service
        - ca:ca.service
        - mysql:mysql.service

  havre:
    image: aerofs/havre
    run:
      publish:
        # The API tunnel that AeroFS daemons connect to.
        - "8084:8084"
      detach: true
      volumes-from:
        # For deployment secret
        - data
      link:
        - ca:ca.service
        - bifrost:bifrost.service

  polaris:
    image: aerofs/polaris
    run:
      detach: true
      volumes-from:
        # For /data/deployment_secret
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - sparta:sparta.service
        - verkehr:verkehr.service

  sparta:
    image: aerofs/sparta
    run:
      detach: true
      volumes-from:
        # For /data/deployment_secret
        - data
      link:
        - config:config.service
        - mysql:mysql.service
        - redis:redis.service
        - bifrost:bifrost.service
        - verkehr:verkehr.service

  auditor:
    image: aerofs/auditor
    run:
      detach: true
      volumes-from:
        # For deployment secret
        - data
      link:
        - config:config.service
        - ca:ca.service

  charlie:
    image: aerofs/charlie
    run:
      detach: true
      volumes-from:
        - data
      link:
        - verkehr:verkehr.service

  sp:
    image: aerofs/sp
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - ca:ca.service
        - mysql:mysql.service
        - redis:redis.service
        - postfix:postfix.service
        - verkehr:verkehr.service
        - auditor:auditor.service
        - config:config.service
        # Implicit dependency through a hack. See Bifrost's run.sh. TODO (WW) remove this dependency
        # - bifrost:bifrost.service

  verification:
    image: aerofs/verification
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - postfix:postfix.service
        - config:config.service

  probe:
    image: aerofs/probe
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - mysql:mysql.service
        - config:config.service
        - verkehr:verkehr.service

  logcollection:
    image: aerofs/logcollection
    run:
      # for deployment secret
      volumes-from:
        - data
      detach: true
      link:
        - redis:redis.service
        - mysql:mysql.service
        - config:config.service
        - verkehr:verkehr.service

  openid:
    image: aerofs/openid
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - mysql:mysql.service
        - redis:redis.service
        - config:config.service

  status:
    image: aerofs/status
    run:
      detach: true
      # for deployment secret
      volumes-from:
        - data
      link:
        - bifrost:bifrost.service
        - loader:loader.service
        - ca:ca.service
        - charlie:charlie.service
        - ejabberd:ejabberd.service
        - havre:havre.service
        - openid:openid.service
        - mysql:mysql.service
        - polaris:polaris.service
        - postfix:postfix.service
        - probe:probe.service
        - redis:redis.service
        - repackaging:repackaging.service
        - sp:sp.service
        - sparta:sparta.service
        - verification:verification.service
        - verkehr:verkehr.service
        - web:web.service
        - zephyr:zephyr.service

  maintenance-nginx:
    image: aerofs/maintenance-nginx
    run:
      detach: true
      publish:
        - "80:80"
        - "443:443"
      link:
        - ca:ca.service
        - config:config.service
      volumes-from:
        - data

  maintenance-bunker:
    image: aerofs/bunker
    run:
      detach: true
      publish:
        - "8484:8484"
      volume:
        # To collect docker logs
        - /var/run/docker.sock:/var/run/docker.sock
      volumes-from:
        - data
      link:
        - config:config.service
        - loader:loader.service
        - verification:verification.service
        - ntp:ntp.service
        # For db backup
        - mysql:mysql.service

# Only root services are defined here. Always use 'crane -d all'.
groups:
  default:
    - bunker
    - nginx
    - enforcer
    - ejabberd

  # Bunker relies on this group's name to detect if the system is in maintenance mode.
  maintenance:
    - maintenance-bunker
    - maintenance-nginx
