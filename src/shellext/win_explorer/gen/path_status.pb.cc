// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: path_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "path_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_path_5fstatus_2eproto() {
  delete PBPathStatus::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_path_5fstatus_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_path_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PBPathStatus::default_instance_ = new PBPathStatus();
  PBPathStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_path_5fstatus_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_path_5fstatus_2eproto_once_);
void protobuf_AddDesc_path_5fstatus_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_path_5fstatus_2eproto_once_,
                 &protobuf_AddDesc_path_5fstatus_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_path_5fstatus_2eproto {
  StaticDescriptorInitializer_path_5fstatus_2eproto() {
    protobuf_AddDesc_path_5fstatus_2eproto();
  }
} static_descriptor_initializer_path_5fstatus_2eproto_;
#endif

// ===================================================================

bool PBPathStatus_Sync_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBPathStatus_Sync PBPathStatus::UNKNOWN;
const PBPathStatus_Sync PBPathStatus::OUT_SYNC;
const PBPathStatus_Sync PBPathStatus::PARTIAL_SYNC;
const PBPathStatus_Sync PBPathStatus::IN_SYNC;
const PBPathStatus_Sync PBPathStatus::Sync_MIN;
const PBPathStatus_Sync PBPathStatus::Sync_MAX;
const int PBPathStatus::Sync_ARRAYSIZE;
#endif  // _MSC_VER
bool PBPathStatus_Flag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBPathStatus_Flag PBPathStatus::DOWNLOADING;
const PBPathStatus_Flag PBPathStatus::UPLOADING;
const PBPathStatus_Flag PBPathStatus::CONFLICT;
const PBPathStatus_Flag PBPathStatus::Flag_MIN;
const PBPathStatus_Flag PBPathStatus::Flag_MAX;
const int PBPathStatus::Flag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PBPathStatus::kSyncFieldNumber;
const int PBPathStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

PBPathStatus::PBPathStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBPathStatus)
}

void PBPathStatus::InitAsDefaultInstance() {
}

PBPathStatus::PBPathStatus(const PBPathStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBPathStatus)
}

void PBPathStatus::SharedCtor() {
  _cached_size_ = 0;
  sync_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPathStatus::~PBPathStatus() {
  // @@protoc_insertion_point(destructor:PBPathStatus)
  SharedDtor();
}

void PBPathStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PBPathStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBPathStatus& PBPathStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_path_5fstatus_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_path_5fstatus_2eproto();
#endif
  return *default_instance_;
}

PBPathStatus* PBPathStatus::default_instance_ = NULL;

PBPathStatus* PBPathStatus::New() const {
  return new PBPathStatus;
}

void PBPathStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBPathStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sync_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PBPathStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PBPathStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBPathStatus.Sync sync = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBPathStatus_Sync_IsValid(value)) {
            set_sync(static_cast< ::PBPathStatus_Sync >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required int32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBPathStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBPathStatus)
  return false;
#undef DO_
}

void PBPathStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBPathStatus)
  // required .PBPathStatus.Sync sync = 1;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sync(), output);
  }

  // required int32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PBPathStatus)
}

int PBPathStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBPathStatus.Sync sync = 1;
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync());
    }

    // required int32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPathStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBPathStatus*>(&from));
}

void PBPathStatus::MergeFrom(const PBPathStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync()) {
      set_sync(from.sync());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PBPathStatus::CopyFrom(const PBPathStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPathStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBPathStatus::Swap(PBPathStatus* other) {
  if (other != this) {
    std::swap(sync_, other->sync_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PBPathStatus::GetTypeName() const {
  return "PBPathStatus";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
