// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shellext.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shellext.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_shellext_2eproto() {
  delete ShellextCall::default_instance_;
  delete GreetingCall::default_instance_;
  delete CreateLinkCall::default_instance_;
  delete ShareFolderCall::default_instance_;
  delete SyncStatusCall::default_instance_;
  delete VersionHistoryCall::default_instance_;
  delete ConflictResolutionCall::default_instance_;
  delete GetPathStatusCall::default_instance_;
  delete ShellextNotification::default_instance_;
  delete RootAnchorNotification::default_instance_;
  delete PathStatusNotification::default_instance_;
  delete LinkSharingEnabled::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_shellext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_shellext_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_path_5fstatus_2eproto();
  ShellextCall::default_instance_ = new ShellextCall();
  GreetingCall::default_instance_ = new GreetingCall();
  CreateLinkCall::default_instance_ = new CreateLinkCall();
  ShareFolderCall::default_instance_ = new ShareFolderCall();
  SyncStatusCall::default_instance_ = new SyncStatusCall();
  VersionHistoryCall::default_instance_ = new VersionHistoryCall();
  ConflictResolutionCall::default_instance_ = new ConflictResolutionCall();
  GetPathStatusCall::default_instance_ = new GetPathStatusCall();
  ShellextNotification::default_instance_ = new ShellextNotification();
  RootAnchorNotification::default_instance_ = new RootAnchorNotification();
  PathStatusNotification::default_instance_ = new PathStatusNotification();
  LinkSharingEnabled::default_instance_ = new LinkSharingEnabled();
  ShellextCall::default_instance_->InitAsDefaultInstance();
  GreetingCall::default_instance_->InitAsDefaultInstance();
  CreateLinkCall::default_instance_->InitAsDefaultInstance();
  ShareFolderCall::default_instance_->InitAsDefaultInstance();
  SyncStatusCall::default_instance_->InitAsDefaultInstance();
  VersionHistoryCall::default_instance_->InitAsDefaultInstance();
  ConflictResolutionCall::default_instance_->InitAsDefaultInstance();
  GetPathStatusCall::default_instance_->InitAsDefaultInstance();
  ShellextNotification::default_instance_->InitAsDefaultInstance();
  RootAnchorNotification::default_instance_->InitAsDefaultInstance();
  PathStatusNotification::default_instance_->InitAsDefaultInstance();
  LinkSharingEnabled::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shellext_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_shellext_2eproto_once_);
void protobuf_AddDesc_shellext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_shellext_2eproto_once_,
                 &protobuf_AddDesc_shellext_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shellext_2eproto {
  StaticDescriptorInitializer_shellext_2eproto() {
    protobuf_AddDesc_shellext_2eproto();
  }
} static_descriptor_initializer_shellext_2eproto_;
#endif

// ===================================================================

bool ShellextCall_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShellextCall_Type ShellextCall::GREETING;
const ShellextCall_Type ShellextCall::SHARE_FOLDER;
const ShellextCall_Type ShellextCall::SYNC_STATUS;
const ShellextCall_Type ShellextCall::VERSION_HISTORY;
const ShellextCall_Type ShellextCall::CONFLICT_RESOLUTION;
const ShellextCall_Type ShellextCall::CREATE_LINK;
const ShellextCall_Type ShellextCall::GET_PATH_STATUS;
const ShellextCall_Type ShellextCall::Type_MIN;
const ShellextCall_Type ShellextCall::Type_MAX;
const int ShellextCall::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShellextCall::kTypeFieldNumber;
const int ShellextCall::kGreetingFieldNumber;
const int ShellextCall::kShareFolderFieldNumber;
const int ShellextCall::kSyncStatusFieldNumber;
const int ShellextCall::kVersionHistoryFieldNumber;
const int ShellextCall::kGetPathStatusFieldNumber;
const int ShellextCall::kConflictResolutionFieldNumber;
const int ShellextCall::kCreateLinkFieldNumber;
#endif  // !_MSC_VER

ShellextCall::ShellextCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShellextCall)
}

void ShellextCall::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  greeting_ = const_cast< ::GreetingCall*>(
      ::GreetingCall::internal_default_instance());
#else
  greeting_ = const_cast< ::GreetingCall*>(&::GreetingCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  share_folder_ = const_cast< ::ShareFolderCall*>(
      ::ShareFolderCall::internal_default_instance());
#else
  share_folder_ = const_cast< ::ShareFolderCall*>(&::ShareFolderCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sync_status_ = const_cast< ::SyncStatusCall*>(
      ::SyncStatusCall::internal_default_instance());
#else
  sync_status_ = const_cast< ::SyncStatusCall*>(&::SyncStatusCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  version_history_ = const_cast< ::VersionHistoryCall*>(
      ::VersionHistoryCall::internal_default_instance());
#else
  version_history_ = const_cast< ::VersionHistoryCall*>(&::VersionHistoryCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_path_status_ = const_cast< ::GetPathStatusCall*>(
      ::GetPathStatusCall::internal_default_instance());
#else
  get_path_status_ = const_cast< ::GetPathStatusCall*>(&::GetPathStatusCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  conflict_resolution_ = const_cast< ::ConflictResolutionCall*>(
      ::ConflictResolutionCall::internal_default_instance());
#else
  conflict_resolution_ = const_cast< ::ConflictResolutionCall*>(&::ConflictResolutionCall::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  create_link_ = const_cast< ::CreateLinkCall*>(
      ::CreateLinkCall::internal_default_instance());
#else
  create_link_ = const_cast< ::CreateLinkCall*>(&::CreateLinkCall::default_instance());
#endif
}

ShellextCall::ShellextCall(const ShellextCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShellextCall)
}

void ShellextCall::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  greeting_ = NULL;
  share_folder_ = NULL;
  sync_status_ = NULL;
  version_history_ = NULL;
  get_path_status_ = NULL;
  conflict_resolution_ = NULL;
  create_link_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShellextCall::~ShellextCall() {
  // @@protoc_insertion_point(destructor:ShellextCall)
  SharedDtor();
}

void ShellextCall::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete greeting_;
    delete share_folder_;
    delete sync_status_;
    delete version_history_;
    delete get_path_status_;
    delete conflict_resolution_;
    delete create_link_;
  }
}

void ShellextCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShellextCall& ShellextCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

ShellextCall* ShellextCall::default_instance_ = NULL;

ShellextCall* ShellextCall::New() const {
  return new ShellextCall;
}

void ShellextCall::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_greeting()) {
      if (greeting_ != NULL) greeting_->::GreetingCall::Clear();
    }
    if (has_share_folder()) {
      if (share_folder_ != NULL) share_folder_->::ShareFolderCall::Clear();
    }
    if (has_sync_status()) {
      if (sync_status_ != NULL) sync_status_->::SyncStatusCall::Clear();
    }
    if (has_version_history()) {
      if (version_history_ != NULL) version_history_->::VersionHistoryCall::Clear();
    }
    if (has_get_path_status()) {
      if (get_path_status_ != NULL) get_path_status_->::GetPathStatusCall::Clear();
    }
    if (has_conflict_resolution()) {
      if (conflict_resolution_ != NULL) conflict_resolution_->::ConflictResolutionCall::Clear();
    }
    if (has_create_link()) {
      if (create_link_ != NULL) create_link_->::CreateLinkCall::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShellextCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ShellextCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ShellextCall.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShellextCall_Type_IsValid(value)) {
            set_type(static_cast< ::ShellextCall_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_greeting;
        break;
      }

      // optional .GreetingCall greeting = 2;
      case 2: {
        if (tag == 18) {
         parse_greeting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_greeting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_share_folder;
        break;
      }

      // optional .ShareFolderCall share_folder = 3;
      case 3: {
        if (tag == 26) {
         parse_share_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share_folder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sync_status;
        break;
      }

      // optional .SyncStatusCall sync_status = 4;
      case 4: {
        if (tag == 34) {
         parse_sync_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version_history;
        break;
      }

      // optional .VersionHistoryCall version_history = 5;
      case 5: {
        if (tag == 42) {
         parse_version_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_path_status;
        break;
      }

      // optional .GetPathStatusCall get_path_status = 6;
      case 6: {
        if (tag == 50) {
         parse_get_path_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_path_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conflict_resolution;
        break;
      }

      // optional .ConflictResolutionCall conflict_resolution = 7;
      case 7: {
        if (tag == 58) {
         parse_conflict_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conflict_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_create_link;
        break;
      }

      // optional .CreateLinkCall create_link = 8;
      case 8: {
        if (tag == 66) {
         parse_create_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShellextCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShellextCall)
  return false;
#undef DO_
}

void ShellextCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShellextCall)
  // required .ShellextCall.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .GreetingCall greeting = 2;
  if (has_greeting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->greeting(), output);
  }

  // optional .ShareFolderCall share_folder = 3;
  if (has_share_folder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->share_folder(), output);
  }

  // optional .SyncStatusCall sync_status = 4;
  if (has_sync_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->sync_status(), output);
  }

  // optional .VersionHistoryCall version_history = 5;
  if (has_version_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->version_history(), output);
  }

  // optional .GetPathStatusCall get_path_status = 6;
  if (has_get_path_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->get_path_status(), output);
  }

  // optional .ConflictResolutionCall conflict_resolution = 7;
  if (has_conflict_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->conflict_resolution(), output);
  }

  // optional .CreateLinkCall create_link = 8;
  if (has_create_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->create_link(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ShellextCall)
}

int ShellextCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ShellextCall.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .GreetingCall greeting = 2;
    if (has_greeting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->greeting());
    }

    // optional .ShareFolderCall share_folder = 3;
    if (has_share_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->share_folder());
    }

    // optional .SyncStatusCall sync_status = 4;
    if (has_sync_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_status());
    }

    // optional .VersionHistoryCall version_history = 5;
    if (has_version_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version_history());
    }

    // optional .GetPathStatusCall get_path_status = 6;
    if (has_get_path_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_path_status());
    }

    // optional .ConflictResolutionCall conflict_resolution = 7;
    if (has_conflict_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conflict_resolution());
    }

    // optional .CreateLinkCall create_link = 8;
    if (has_create_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_link());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShellextCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShellextCall*>(&from));
}

void ShellextCall::MergeFrom(const ShellextCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_greeting()) {
      mutable_greeting()->::GreetingCall::MergeFrom(from.greeting());
    }
    if (from.has_share_folder()) {
      mutable_share_folder()->::ShareFolderCall::MergeFrom(from.share_folder());
    }
    if (from.has_sync_status()) {
      mutable_sync_status()->::SyncStatusCall::MergeFrom(from.sync_status());
    }
    if (from.has_version_history()) {
      mutable_version_history()->::VersionHistoryCall::MergeFrom(from.version_history());
    }
    if (from.has_get_path_status()) {
      mutable_get_path_status()->::GetPathStatusCall::MergeFrom(from.get_path_status());
    }
    if (from.has_conflict_resolution()) {
      mutable_conflict_resolution()->::ConflictResolutionCall::MergeFrom(from.conflict_resolution());
    }
    if (from.has_create_link()) {
      mutable_create_link()->::CreateLinkCall::MergeFrom(from.create_link());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShellextCall::CopyFrom(const ShellextCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellextCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_greeting()) {
    if (!this->greeting().IsInitialized()) return false;
  }
  if (has_share_folder()) {
    if (!this->share_folder().IsInitialized()) return false;
  }
  if (has_sync_status()) {
    if (!this->sync_status().IsInitialized()) return false;
  }
  if (has_version_history()) {
    if (!this->version_history().IsInitialized()) return false;
  }
  if (has_get_path_status()) {
    if (!this->get_path_status().IsInitialized()) return false;
  }
  if (has_conflict_resolution()) {
    if (!this->conflict_resolution().IsInitialized()) return false;
  }
  if (has_create_link()) {
    if (!this->create_link().IsInitialized()) return false;
  }
  return true;
}

void ShellextCall::Swap(ShellextCall* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(greeting_, other->greeting_);
    std::swap(share_folder_, other->share_folder_);
    std::swap(sync_status_, other->sync_status_);
    std::swap(version_history_, other->version_history_);
    std::swap(get_path_status_, other->get_path_status_);
    std::swap(conflict_resolution_, other->conflict_resolution_);
    std::swap(create_link_, other->create_link_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShellextCall::GetTypeName() const {
  return "ShellextCall";
}


// ===================================================================

#ifndef _MSC_VER
const int GreetingCall::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

GreetingCall::GreetingCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GreetingCall)
}

void GreetingCall::InitAsDefaultInstance() {
}

GreetingCall::GreetingCall(const GreetingCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GreetingCall)
}

void GreetingCall::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GreetingCall::~GreetingCall() {
  // @@protoc_insertion_point(destructor:GreetingCall)
  SharedDtor();
}

void GreetingCall::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GreetingCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GreetingCall& GreetingCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

GreetingCall* GreetingCall::default_instance_ = NULL;

GreetingCall* GreetingCall::New() const {
  return new GreetingCall;
}

void GreetingCall::Clear() {
  protocol_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GreetingCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:GreetingCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GreetingCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GreetingCall)
  return false;
#undef DO_
}

void GreetingCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GreetingCall)
  // required int32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol_version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:GreetingCall)
}

int GreetingCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GreetingCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GreetingCall*>(&from));
}

void GreetingCall::MergeFrom(const GreetingCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GreetingCall::CopyFrom(const GreetingCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreetingCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GreetingCall::Swap(GreetingCall* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GreetingCall::GetTypeName() const {
  return "GreetingCall";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateLinkCall::kPathFieldNumber;
#endif  // !_MSC_VER

CreateLinkCall::CreateLinkCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateLinkCall)
}

void CreateLinkCall::InitAsDefaultInstance() {
}

CreateLinkCall::CreateLinkCall(const CreateLinkCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateLinkCall)
}

void CreateLinkCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateLinkCall::~CreateLinkCall() {
  // @@protoc_insertion_point(destructor:CreateLinkCall)
  SharedDtor();
}

void CreateLinkCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateLinkCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateLinkCall& CreateLinkCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

CreateLinkCall* CreateLinkCall::default_instance_ = NULL;

CreateLinkCall* CreateLinkCall::New() const {
  return new CreateLinkCall;
}

void CreateLinkCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateLinkCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:CreateLinkCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateLinkCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateLinkCall)
  return false;
#undef DO_
}

void CreateLinkCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateLinkCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:CreateLinkCall)
}

int CreateLinkCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateLinkCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateLinkCall*>(&from));
}

void CreateLinkCall::MergeFrom(const CreateLinkCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateLinkCall::CopyFrom(const CreateLinkCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLinkCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateLinkCall::Swap(CreateLinkCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateLinkCall::GetTypeName() const {
  return "CreateLinkCall";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareFolderCall::kPathFieldNumber;
#endif  // !_MSC_VER

ShareFolderCall::ShareFolderCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShareFolderCall)
}

void ShareFolderCall::InitAsDefaultInstance() {
}

ShareFolderCall::ShareFolderCall(const ShareFolderCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShareFolderCall)
}

void ShareFolderCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareFolderCall::~ShareFolderCall() {
  // @@protoc_insertion_point(destructor:ShareFolderCall)
  SharedDtor();
}

void ShareFolderCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareFolderCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareFolderCall& ShareFolderCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

ShareFolderCall* ShareFolderCall::default_instance_ = NULL;

ShareFolderCall* ShareFolderCall::New() const {
  return new ShareFolderCall;
}

void ShareFolderCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareFolderCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ShareFolderCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShareFolderCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShareFolderCall)
  return false;
#undef DO_
}

void ShareFolderCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShareFolderCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ShareFolderCall)
}

int ShareFolderCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFolderCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareFolderCall*>(&from));
}

void ShareFolderCall::MergeFrom(const ShareFolderCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareFolderCall::CopyFrom(const ShareFolderCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFolderCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShareFolderCall::Swap(ShareFolderCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareFolderCall::GetTypeName() const {
  return "ShareFolderCall";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncStatusCall::kPathFieldNumber;
#endif  // !_MSC_VER

SyncStatusCall::SyncStatusCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncStatusCall)
}

void SyncStatusCall::InitAsDefaultInstance() {
}

SyncStatusCall::SyncStatusCall(const SyncStatusCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncStatusCall)
}

void SyncStatusCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncStatusCall::~SyncStatusCall() {
  // @@protoc_insertion_point(destructor:SyncStatusCall)
  SharedDtor();
}

void SyncStatusCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncStatusCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncStatusCall& SyncStatusCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

SyncStatusCall* SyncStatusCall::default_instance_ = NULL;

SyncStatusCall* SyncStatusCall::New() const {
  return new SyncStatusCall;
}

void SyncStatusCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SyncStatusCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SyncStatusCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncStatusCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncStatusCall)
  return false;
#undef DO_
}

void SyncStatusCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncStatusCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SyncStatusCall)
}

int SyncStatusCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncStatusCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncStatusCall*>(&from));
}

void SyncStatusCall::MergeFrom(const SyncStatusCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SyncStatusCall::CopyFrom(const SyncStatusCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncStatusCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncStatusCall::Swap(SyncStatusCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncStatusCall::GetTypeName() const {
  return "SyncStatusCall";
}


// ===================================================================

#ifndef _MSC_VER
const int VersionHistoryCall::kPathFieldNumber;
#endif  // !_MSC_VER

VersionHistoryCall::VersionHistoryCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VersionHistoryCall)
}

void VersionHistoryCall::InitAsDefaultInstance() {
}

VersionHistoryCall::VersionHistoryCall(const VersionHistoryCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VersionHistoryCall)
}

void VersionHistoryCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionHistoryCall::~VersionHistoryCall() {
  // @@protoc_insertion_point(destructor:VersionHistoryCall)
  SharedDtor();
}

void VersionHistoryCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VersionHistoryCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VersionHistoryCall& VersionHistoryCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

VersionHistoryCall* VersionHistoryCall::default_instance_ = NULL;

VersionHistoryCall* VersionHistoryCall::New() const {
  return new VersionHistoryCall;
}

void VersionHistoryCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VersionHistoryCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:VersionHistoryCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VersionHistoryCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VersionHistoryCall)
  return false;
#undef DO_
}

void VersionHistoryCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VersionHistoryCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:VersionHistoryCall)
}

int VersionHistoryCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionHistoryCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VersionHistoryCall*>(&from));
}

void VersionHistoryCall::MergeFrom(const VersionHistoryCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VersionHistoryCall::CopyFrom(const VersionHistoryCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionHistoryCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VersionHistoryCall::Swap(VersionHistoryCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VersionHistoryCall::GetTypeName() const {
  return "VersionHistoryCall";
}


// ===================================================================

#ifndef _MSC_VER
const int ConflictResolutionCall::kPathFieldNumber;
#endif  // !_MSC_VER

ConflictResolutionCall::ConflictResolutionCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConflictResolutionCall)
}

void ConflictResolutionCall::InitAsDefaultInstance() {
}

ConflictResolutionCall::ConflictResolutionCall(const ConflictResolutionCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConflictResolutionCall)
}

void ConflictResolutionCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConflictResolutionCall::~ConflictResolutionCall() {
  // @@protoc_insertion_point(destructor:ConflictResolutionCall)
  SharedDtor();
}

void ConflictResolutionCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConflictResolutionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConflictResolutionCall& ConflictResolutionCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

ConflictResolutionCall* ConflictResolutionCall::default_instance_ = NULL;

ConflictResolutionCall* ConflictResolutionCall::New() const {
  return new ConflictResolutionCall;
}

void ConflictResolutionCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConflictResolutionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ConflictResolutionCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConflictResolutionCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConflictResolutionCall)
  return false;
#undef DO_
}

void ConflictResolutionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConflictResolutionCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ConflictResolutionCall)
}

int ConflictResolutionCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConflictResolutionCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConflictResolutionCall*>(&from));
}

void ConflictResolutionCall::MergeFrom(const ConflictResolutionCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConflictResolutionCall::CopyFrom(const ConflictResolutionCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConflictResolutionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConflictResolutionCall::Swap(ConflictResolutionCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConflictResolutionCall::GetTypeName() const {
  return "ConflictResolutionCall";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPathStatusCall::kPathFieldNumber;
#endif  // !_MSC_VER

GetPathStatusCall::GetPathStatusCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetPathStatusCall)
}

void GetPathStatusCall::InitAsDefaultInstance() {
}

GetPathStatusCall::GetPathStatusCall(const GetPathStatusCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetPathStatusCall)
}

void GetPathStatusCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPathStatusCall::~GetPathStatusCall() {
  // @@protoc_insertion_point(destructor:GetPathStatusCall)
  SharedDtor();
}

void GetPathStatusCall::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPathStatusCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPathStatusCall& GetPathStatusCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

GetPathStatusCall* GetPathStatusCall::default_instance_ = NULL;

GetPathStatusCall* GetPathStatusCall::New() const {
  return new GetPathStatusCall;
}

void GetPathStatusCall::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPathStatusCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:GetPathStatusCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetPathStatusCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetPathStatusCall)
  return false;
#undef DO_
}

void GetPathStatusCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetPathStatusCall)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:GetPathStatusCall)
}

int GetPathStatusCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPathStatusCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPathStatusCall*>(&from));
}

void GetPathStatusCall::MergeFrom(const GetPathStatusCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPathStatusCall::CopyFrom(const GetPathStatusCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPathStatusCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetPathStatusCall::Swap(GetPathStatusCall* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPathStatusCall::GetTypeName() const {
  return "GetPathStatusCall";
}


// ===================================================================

bool ShellextNotification_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShellextNotification_Type ShellextNotification::ROOT_ANCHOR;
const ShellextNotification_Type ShellextNotification::PATH_STATUS;
const ShellextNotification_Type ShellextNotification::CLEAR_STATUS_CACHE;
const ShellextNotification_Type ShellextNotification::LINK_SHARING_ENABLED;
const ShellextNotification_Type ShellextNotification::Type_MIN;
const ShellextNotification_Type ShellextNotification::Type_MAX;
const int ShellextNotification::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShellextNotification::kTypeFieldNumber;
const int ShellextNotification::kRootAnchorFieldNumber;
const int ShellextNotification::kPathStatusFieldNumber;
const int ShellextNotification::kLinkSharingEnabledFieldNumber;
#endif  // !_MSC_VER

ShellextNotification::ShellextNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShellextNotification)
}

void ShellextNotification::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  root_anchor_ = const_cast< ::RootAnchorNotification*>(
      ::RootAnchorNotification::internal_default_instance());
#else
  root_anchor_ = const_cast< ::RootAnchorNotification*>(&::RootAnchorNotification::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  path_status_ = const_cast< ::PathStatusNotification*>(
      ::PathStatusNotification::internal_default_instance());
#else
  path_status_ = const_cast< ::PathStatusNotification*>(&::PathStatusNotification::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  link_sharing_enabled_ = const_cast< ::LinkSharingEnabled*>(
      ::LinkSharingEnabled::internal_default_instance());
#else
  link_sharing_enabled_ = const_cast< ::LinkSharingEnabled*>(&::LinkSharingEnabled::default_instance());
#endif
}

ShellextNotification::ShellextNotification(const ShellextNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShellextNotification)
}

void ShellextNotification::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  root_anchor_ = NULL;
  path_status_ = NULL;
  link_sharing_enabled_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShellextNotification::~ShellextNotification() {
  // @@protoc_insertion_point(destructor:ShellextNotification)
  SharedDtor();
}

void ShellextNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete root_anchor_;
    delete path_status_;
    delete link_sharing_enabled_;
  }
}

void ShellextNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShellextNotification& ShellextNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

ShellextNotification* ShellextNotification::default_instance_ = NULL;

ShellextNotification* ShellextNotification::New() const {
  return new ShellextNotification;
}

void ShellextNotification::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_root_anchor()) {
      if (root_anchor_ != NULL) root_anchor_->::RootAnchorNotification::Clear();
    }
    if (has_path_status()) {
      if (path_status_ != NULL) path_status_->::PathStatusNotification::Clear();
    }
    if (has_link_sharing_enabled()) {
      if (link_sharing_enabled_ != NULL) link_sharing_enabled_->::LinkSharingEnabled::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShellextNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ShellextNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ShellextNotification.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShellextNotification_Type_IsValid(value)) {
            set_type(static_cast< ::ShellextNotification_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_root_anchor;
        break;
      }

      // optional .RootAnchorNotification root_anchor = 2;
      case 2: {
        if (tag == 18) {
         parse_root_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_anchor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_status;
        break;
      }

      // optional .PathStatusNotification path_status = 3;
      case 3: {
        if (tag == 26) {
         parse_path_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_sharing_enabled;
        break;
      }

      // optional .LinkSharingEnabled link_sharing_enabled = 4;
      case 4: {
        if (tag == 34) {
         parse_link_sharing_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_sharing_enabled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShellextNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShellextNotification)
  return false;
#undef DO_
}

void ShellextNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShellextNotification)
  // required .ShellextNotification.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .RootAnchorNotification root_anchor = 2;
  if (has_root_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->root_anchor(), output);
  }

  // optional .PathStatusNotification path_status = 3;
  if (has_path_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->path_status(), output);
  }

  // optional .LinkSharingEnabled link_sharing_enabled = 4;
  if (has_link_sharing_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->link_sharing_enabled(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ShellextNotification)
}

int ShellextNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ShellextNotification.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .RootAnchorNotification root_anchor = 2;
    if (has_root_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_anchor());
    }

    // optional .PathStatusNotification path_status = 3;
    if (has_path_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_status());
    }

    // optional .LinkSharingEnabled link_sharing_enabled = 4;
    if (has_link_sharing_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_sharing_enabled());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShellextNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShellextNotification*>(&from));
}

void ShellextNotification::MergeFrom(const ShellextNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_root_anchor()) {
      mutable_root_anchor()->::RootAnchorNotification::MergeFrom(from.root_anchor());
    }
    if (from.has_path_status()) {
      mutable_path_status()->::PathStatusNotification::MergeFrom(from.path_status());
    }
    if (from.has_link_sharing_enabled()) {
      mutable_link_sharing_enabled()->::LinkSharingEnabled::MergeFrom(from.link_sharing_enabled());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShellextNotification::CopyFrom(const ShellextNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellextNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_root_anchor()) {
    if (!this->root_anchor().IsInitialized()) return false;
  }
  if (has_path_status()) {
    if (!this->path_status().IsInitialized()) return false;
  }
  if (has_link_sharing_enabled()) {
    if (!this->link_sharing_enabled().IsInitialized()) return false;
  }
  return true;
}

void ShellextNotification::Swap(ShellextNotification* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(root_anchor_, other->root_anchor_);
    std::swap(path_status_, other->path_status_);
    std::swap(link_sharing_enabled_, other->link_sharing_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShellextNotification::GetTypeName() const {
  return "ShellextNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int RootAnchorNotification::kPathFieldNumber;
const int RootAnchorNotification::kUserFieldNumber;
#endif  // !_MSC_VER

RootAnchorNotification::RootAnchorNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RootAnchorNotification)
}

void RootAnchorNotification::InitAsDefaultInstance() {
}

RootAnchorNotification::RootAnchorNotification(const RootAnchorNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RootAnchorNotification)
}

void RootAnchorNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RootAnchorNotification::~RootAnchorNotification() {
  // @@protoc_insertion_point(destructor:RootAnchorNotification)
  SharedDtor();
}

void RootAnchorNotification::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RootAnchorNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RootAnchorNotification& RootAnchorNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

RootAnchorNotification* RootAnchorNotification::default_instance_ = NULL;

RootAnchorNotification* RootAnchorNotification::New() const {
  return new RootAnchorNotification;
}

void RootAnchorNotification::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RootAnchorNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RootAnchorNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional string user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RootAnchorNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RootAnchorNotification)
  return false;
#undef DO_
}

void RootAnchorNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RootAnchorNotification)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RootAnchorNotification)
}

int RootAnchorNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RootAnchorNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RootAnchorNotification*>(&from));
}

void RootAnchorNotification::MergeFrom(const RootAnchorNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RootAnchorNotification::CopyFrom(const RootAnchorNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootAnchorNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RootAnchorNotification::Swap(RootAnchorNotification* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RootAnchorNotification::GetTypeName() const {
  return "RootAnchorNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int PathStatusNotification::kPathFieldNumber;
const int PathStatusNotification::kStatusFieldNumber;
#endif  // !_MSC_VER

PathStatusNotification::PathStatusNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathStatusNotification)
}

void PathStatusNotification::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  status_ = const_cast< ::PBPathStatus*>(
      ::PBPathStatus::internal_default_instance());
#else
  status_ = const_cast< ::PBPathStatus*>(&::PBPathStatus::default_instance());
#endif
}

PathStatusNotification::PathStatusNotification(const PathStatusNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathStatusNotification)
}

void PathStatusNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathStatusNotification::~PathStatusNotification() {
  // @@protoc_insertion_point(destructor:PathStatusNotification)
  SharedDtor();
}

void PathStatusNotification::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete status_;
  }
}

void PathStatusNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PathStatusNotification& PathStatusNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

PathStatusNotification* PathStatusNotification::default_instance_ = NULL;

PathStatusNotification* PathStatusNotification::New() const {
  return new PathStatusNotification;
}

void PathStatusNotification::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::PBPathStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PathStatusNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PathStatusNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .PBPathStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathStatusNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathStatusNotification)
  return false;
#undef DO_
}

void PathStatusNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathStatusNotification)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required .PBPathStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PathStatusNotification)
}

int PathStatusNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required .PBPathStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathStatusNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PathStatusNotification*>(&from));
}

void PathStatusNotification::MergeFrom(const PathStatusNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_status()) {
      mutable_status()->::PBPathStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PathStatusNotification::CopyFrom(const PathStatusNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathStatusNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void PathStatusNotification::Swap(PathStatusNotification* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PathStatusNotification::GetTypeName() const {
  return "PathStatusNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int LinkSharingEnabled::kIsLinkSharingEnabledFieldNumber;
#endif  // !_MSC_VER

LinkSharingEnabled::LinkSharingEnabled()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkSharingEnabled)
}

void LinkSharingEnabled::InitAsDefaultInstance() {
}

LinkSharingEnabled::LinkSharingEnabled(const LinkSharingEnabled& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinkSharingEnabled)
}

void LinkSharingEnabled::SharedCtor() {
  _cached_size_ = 0;
  is_link_sharing_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkSharingEnabled::~LinkSharingEnabled() {
  // @@protoc_insertion_point(destructor:LinkSharingEnabled)
  SharedDtor();
}

void LinkSharingEnabled::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LinkSharingEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LinkSharingEnabled& LinkSharingEnabled::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_shellext_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_shellext_2eproto();
#endif
  return *default_instance_;
}

LinkSharingEnabled* LinkSharingEnabled::default_instance_ = NULL;

LinkSharingEnabled* LinkSharingEnabled::New() const {
  return new LinkSharingEnabled;
}

void LinkSharingEnabled::Clear() {
  is_link_sharing_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LinkSharingEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:LinkSharingEnabled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_link_sharing_enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_link_sharing_enabled_)));
          set_has_is_link_sharing_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkSharingEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkSharingEnabled)
  return false;
#undef DO_
}

void LinkSharingEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkSharingEnabled)
  // required bool is_link_sharing_enabled = 1;
  if (has_is_link_sharing_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_link_sharing_enabled(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:LinkSharingEnabled)
}

int LinkSharingEnabled::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_link_sharing_enabled = 1;
    if (has_is_link_sharing_enabled()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkSharingEnabled::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LinkSharingEnabled*>(&from));
}

void LinkSharingEnabled::MergeFrom(const LinkSharingEnabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_link_sharing_enabled()) {
      set_is_link_sharing_enabled(from.is_link_sharing_enabled());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LinkSharingEnabled::CopyFrom(const LinkSharingEnabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkSharingEnabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LinkSharingEnabled::Swap(LinkSharingEnabled* other) {
  if (other != this) {
    std::swap(is_link_sharing_enabled_, other->is_link_sharing_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LinkSharingEnabled::GetTypeName() const {
  return "LinkSharingEnabled";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
