--
-- NB: for some (seriously beyond stupid) reason flyway breaks when using inline comments
--

/*
 * We use random IDs instead of auto increment IDs only to prevent competitors from figuring out
 * total number of orgs. It is NOT a security measure.
 *
 *  o_id : OrganizationID
 *  o_name : organization friendly name, displayed to the user. May include spaces and all.
 *  o_contact_phone : leave enough room for international numbers
 *  o_stripe_cusotme_id : https://answers.stripe.com/questions/what-is-the-max-length-of-ids
 */
CREATE TABLE IF NOT EXISTS `sp_organization` (
  `o_id` INTEGER NOT NULL,
  `o_name` VARCHAR(80) CHARSET utf8,
  `o_contact_phone` VARCHAR(50),
  `o_stripe_customer_id` VARCHAR(255),
  PRIMARY KEY (`o_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS `sp_shared_folder` (
  `sf_id` BINARY(16) NOT NULL,
  `sf_name` VARCHAR(255) CHARSET utf8 NOT NULL,
  INDEX sf_name_idx (`sf_name`),
  PRIMARY KEY (`sf_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*
 *  a_state : See docs/design/sharing_and_migration.txt
 *  a_sharer : NULL if the member is not invited by anyone. i.e. team server users
 *  o_contact_phone : leave enough room for international numbers
 *  a_external : See docs/design/sharing_and_migration.txt
 *
 * Note: the foreign key implicitly create an index on a_sid
 * for an org. See http://dev.mysql.com/doc/refman/4.1/en/innodb-foreign-key-constraints.html
 *
 * latin1 because a_id is email address
 */
CREATE TABLE IF NOT EXISTS `sp_acl` (
  `a_sid` BINARY(16) NOT NULL,
  `a_id` VARCHAR(320) NOT NULL,
  `a_role` TINYINT NOT NULL,
  `a_pending` BOOLEAN NOT NULL DEFAULT FALSE,
  `a_sharer` VARCHAR(320),
  `a_external` BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (`a_sid`,`a_id`),
  INDEX `a_id` (`a_id`),
  CONSTRAINT `a_sid_foreign` FOREIGN KEY (`a_sid`) REFERENCES `sp_shared_folder` (`sf_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- TODO rename u_id to u_email and most other 'ids' to 'email'
-- Note: the foreign key implicitly creates an index on u_org_id, which helps list or count users
-- for an org. See http://dev.mysql.com/doc/refman/4.1/en/innodb-foreign-key-constraints.html
CREATE TABLE IF NOT EXISTS `sp_user` (
  `u_id` VARCHAR(320) NOT NULL,
  `u_hashed_passwd` CHAR(44) NOT NULL,
  `u_id_created_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `u_first_name` VARCHAR(80) CHARSET utf8 NOT NULL,
  `u_last_name` VARCHAR(80) CHARSET utf8 NOT NULL,
  `u_auth_level` INT UNSIGNED NOT NULL,
  `u_org_id` INTEGER NOT NULL,
  `u_acl_epoch` BIGINT NOT NULL,
  PRIMARY KEY (`u_id`),
  CONSTRAINT `u_org_foreign` FOREIGN KEY (`u_org_id`) REFERENCES `sp_organization` (`o_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- TODO (MJ) why is d_id a CHAR(32) but sf_id (store id) is a BINARY(16)?
CREATE TABLE IF NOT EXISTS `sp_device` (
  `d_id` CHAR(32) NOT NULL,
  `d_owner_id` VARCHAR(320) NOT NULL,
  `d_os_family` VARCHAR(32) NOT NULL,
  `d_os_name` VARCHAR(100) NOT NULL,
  `d_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `d_name` VARCHAR(320) CHARACTER SET utf8 NOT NULL,
  `d_unlinked` BOOL DEFAULT FALSE,
  PRIMARY KEY (`d_id`),
  CONSTRAINT `d_owner_foreign` FOREIGN KEY (`d_owner_id`) REFERENCES `sp_user` (`u_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- c_serial: the increasing serial number that identifies the certificate (generated by the CA).
-- c_revoke_ts: when the certificate has not been revoked, this is zero.
-- c_did_idx is used when verifying that a cert-based signin is valid
CREATE TABLE IF NOT EXISTS `sp_cert` (
  `c_serial` BIGINT UNSIGNED NOT NULL,
  `c_device_id` VARCHAR(320) NOT NULL,
  `c_expire_ts` TIMESTAMP NOT NULL,
  `c_revoke_ts` TIMESTAMP,
  PRIMARY KEY (`c_serial`),
  INDEX `c_did_idx` (`c_device_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS `sp_signup_code` (
  `t_code` CHAR(8) NOT NULL,
  `t_to` VARCHAR(320) NOT NULL,
  `t_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`t_code`),
  INDEX `t_ts_idx` (`t_ts`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- m_signup_code: the signup code associated with the organization, null if the user
-- already exists by the time the user is invited to the org.
--
-- Note: the foreign keys implicitly create indices on m_org_id and m_signup_code, which helps
-- OrganizationInvitationDatabase.getInvitedUsers() and getInvitationForSignupCode().
-- See http://dev.mysql.com/doc/refman/4.1/en/innodb-foreign-key-constraints.html
CREATE TABLE IF NOT EXISTS `sp_organization_invite` (
  `m_from` VARCHAR(320) NOT NULL,
  `m_to` VARCHAR(320) NOT NULL,
  `m_org_id` INTEGER NOT NULL,
  `m_signup_code` CHAR(8),
  `m_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`m_to`, `m_org_id`),
  UNIQUE KEY (`m_signup_code`),
  INDEX `m_ts_idx` (`m_ts`),
  CONSTRAINT `m_org_foreign` FOREIGN KEY (`m_org_id`) REFERENCES `sp_organization` (`o_id`),
  CONSTRAINT `m_signup_code_foreign` FOREIGN KEY (`m_signup_code`) REFERENCES `sp_signup_code` (`t_code`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS `sp_password_reset_token` (
  `r_token` CHAR(44),
  `r_user_id` VARCHAR(320) NOT NULL,
  `r_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`r_token`),
  CONSTRAINT `r_user_foreign` FOREIGN KEY (`r_user_id`) REFERENCES `sp_user` (`u_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- the actual max email length supported by RFC is 254 bytes
-- we use 254 bytes here because the maximum key length size
-- for mysql is 767 bytes, and 254*3 = 762 (for UTF8
-- strings)
-- TODO (WW) this length is not consistent with the length of
-- email fields in other tables.
-- TODO (WW) latin1 should be used instead as the charset.
CREATE TABLE IF NOT EXISTS `sp_email_subscriptions` (
  `es_token_id` CHAR(12) PRIMARY KEY NOT NULL,
  `es_email` VARCHAR(254) NOT NULL,
  `es_subscription` INT NOT NULL,
  `es_last_emailed` TIMESTAMP NOT NULL,
  UNIQUE KEY(`es_email`,`es_subscription`),
  INDEX es_email_idx(`es_email`),
  INDEX es_subscription_idx(`es_subscription`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS `sp_signup` (
  `s_idx` int(11) NOT NULL AUTO_INCREMENT,
  `s_email` varchar(320) NOT NULL,
  `s_ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`s_idx`),
  UNIQUE KEY `s_email` (`s_email`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS `sp_enterprise_signup` (
  `e_email` varchar(320) CHARACTER SET latin1 NOT NULL,
  `e_first_name` varchar(320) NOT NULL,
  `e_last_name` varchar(320) NOT NULL,
  `e_phone` varchar(50) NOT NULL,
  `e_title` varchar(100) NOT NULL,
  `e_org` varchar(320) NOT NULL,
  `e_org_size` varchar(50) NOT NULL,
  `e_comment` text NOT NULL,
  `e_ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
