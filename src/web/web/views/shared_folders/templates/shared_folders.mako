<%inherit file="dashboard_layout.mako"/>
<%! page_title = "Shared Folders" %>

<%namespace name="shared_folder_modals" file="shared_folder_modals.mako" />

<%namespace name="credit_card_modal" file="credit_card_modal.mako"/>

<%block name="css">
    <link href="${request.static_path('web:static/css/datatables-bootstrap.css')}"
          rel="stylesheet">
    <style type="text/css">
        #modal .modal-body {
            ## Set a min-height to accommendate the dropdown menu when there are
            ## very few user rows in the dialog.
            min-height: 200px;
        }
        #modal .dropdown-menu {
            ## Override bootstrap's min-width by not specifying a min-width.
            min-width: inherit;
        }
        #modal .modal-footer .form-inline {
            margin-bottom: 0;
        }
        ## this class is generated by spin.js. see the spinnerOpts variable below.
        .spinner {
            display: inline;
        }
        #modal-spinner {
            margin-right: 20px;
            color: Green;
        }
    </style>
</%block>

<div class="row page_block">
    <div class="span8">
        <h2>${page_heading}</h2>
        <div class="well well-small footnote">
            This is a list of shared folder names only.  To see the actual
            content of your folders and files, please go to the AeroFS
            application.
        </div>

        <table id="folders_table" class="table table-hover">
            <thead><tr><th>Folder</th><th>Members</th><th></th></tr></thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<%shared_folder_modals:main_modals/>

%if is_admin:
    ## Admins can input credit card on their own
    <%credit_card_modal:html>
        <%def name="title()">
            <%credit_card_modal:default_title/>
        </%def>
        <%def name="description()">
            <p>
                ## Note: the following text should be consistent with the text
                ## in CompInviteUsers.java.
                The free plan allows <strong>one</strong> external collaborator
                per shared folder. If you'd like to invite unlimited external
                collaborators, please upgrade to the paid plan
                ($10/team member/month).
                <a href="${request.route_path('pricing')}" target="_blank">Compare plans</a>.
            </p>

            <%credit_card_modal:default_description/>
        </%def>
        <%def name="okay_button_text()">
            <%credit_card_modal:default_okay_button_text/>
        </%def>
    </%credit_card_modal:html>

%else:
    ## Non-admins must admins to input credit card
    <%shared_folder_modals:ask_admin_modal/>
%endif

<%block name="scripts">

    ## Only admins can input credit card
    %if is_admin:
        <%credit_card_modal:javascript/>
    %endif

    <script src="${request.static_path('web:static/js/jquery.dataTables.min.js')}"></script>
    <script src="${request.static_path('web:static/js/datatables_extensions.js')}"></script>
    <script src="${request.static_path('web:static/js/spin.min.js')}"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('#folders_table').dataTable({
                ## Features
                "bProcessing": true,
                "bServerSide": true,
                "bFilter": false,
                "bLengthChange": false,

                ## Parameters
                %if datatables_paginate:
                    "sDom": "<'datatable_body't>pir",
                %else:
                    "sDom": "<'datatable_body't>r",
                    "bPaginate": false,
                %endif
                "sAjaxSource": "${datatables_request_route_url}",
                "sPaginationType": "bootstrap",
                "iDisplayLength": 20,
                "oLanguage": {
                    ## TODO (WW) create a common function for this?
                    "sInfo": "_START_-_END_ of _TOTAL_",
                    "sInfoEmpty": "",
                    "sEmptyTable": "No shared folders"
                },
                "aoColumns": [
                    { "mDataProp": "name" },
                    { "mDataProp": "users" },
                    { "mDataProp": "options" }
                ],

                ## Callbacks
                "fnServerData": function(sUrl, aoData, fnCallback, oSettings) {
                    var cb = function(json) {
                        fnCallback(json);
                    }
                    dataTableAJAXCallback(sUrl, aoData, cb, oSettings);
                },
                "fnDrawCallback": function() {
                    ## A nasty hack to remove fixed column widths automatically
                    ## generated by dataTables. These widths make the table
                    ## looks horrible. dataTables is no good.
                    $('#folders_table').find('th').css("width", "");
                }
            });

            function refreshTable() {
                $('#folders_table').dataTable().fnDraw(false);
            }

            ## The Options link that opens the modal. It holds all the data
            ## required by the modal.
            var $link;
            var $modal = $('#modal');

            $('.${open_modal_class}').live('click', function () {
                $link = $(this);
                refreshModal();
                $modal.modal('show');
            });

            ## N.B. updates to the return value will be propagated back to the
            ## Options link and persists throughout the link's lifecycle.
            function modalUserAndRoleList() {
                return $link.data('${link_data_user_and_role_list}');
            }

            function modalSID() {
                return $link.data('${link_data_sid}');
            }

            function modalPrivileged() {
                return $link.data('${link_data_privileged}');
            }

            function modalFolderName() {
                return $link.data('${link_data_name}');
            }

            ########
            ## Functions for the Modal

            var role2str = {
                "${owner_role}": "Owner",
                "${editor_role}": "Editor",
                "${viewer_role}": "Viewer"
            };

            ## Refresh the modal based using the current values in $link
            function refreshModal() {
                var privileged = modalPrivileged();

                ## Set the modal's title
                $('#modal-folder-title').text(
                        (privileged ? "Manage" : "View members of") +
                        " \"" + modalFolderName() + "\"");

                ## Set the modal title's tooltip. Reset it first otherwise it
                ## wouldn't be updated on subsequent calls.
                $('#modal-folder-title-info-icon').tooltip('destroy').tooltip({
                    ## '| n' to avoid escaping "'"s in the strings
                    title: privileged ?
                            "${privileged_modal_tooltip | n}" :
                            "${unprivileged_modal_tooltip | n}",
                    ## To avoid tooltips being cut off by the modal boundary.
                    ## See https://github.com/twitter/bootstrap/pull/6378
                    container: '#modal',
                    placement: 'bottom'
                });

                ## Clear the user-role table
                var $table = $('#modal-user-role-table');
                $table.find('tbody').find('tr').remove();

                ## Enable or disable the invitation form depending on the privilege
                var $inviteUserInputs = $("#invite-user-inputs");
                if (privileged) {
                    $inviteUserInputs.removeClass("hidden");
                    resetRoleListForInviteForm();
                } else {
                    $inviteUserInputs.addClass("hidden");
                }

                ## Populate the table
                var urs = modalUserAndRoleList();
                for (var email in urs) {
                    var ur = urs[email];
                    var role = ur.${user_and_role_role_key};
                    var name = ur.${user_and_role_first_name_key} + " " +
                            ur.${user_and_role_last_name_key};

                    var actions, roleStr;
                    if (email === '${session_user}') {
                        roleStr = role2str[role];
                        actions = '';
                    } else if (privileged) {
                        roleStr = renderActionableRole(email, role);
                        actions = renderPrivilegedUserActions(email, name);
                    } else {
                        roleStr = role2str[role];
                        actions = renderUnprivilegedUserActions(email);
                    }

                    $table.find('> tbody:last').append(
                        ## TODO (WW) use proper jQuery methods to add elements
                        '<tr>' +
                            '<td><span data-toggle="tooltip" class="tooltip_email" title="' + email + '">' +
                               name +
                            '</span></td>' +
                            '<td>' + roleStr + '</td>' +
                            '<td>' + actions + '</td>' +
                        '</tr>'
                    );
                }

                activateModelTableElements();
            }

            function resetRoleListForInviteForm()
            {
                var $opt1 = $('<option></option>').text(role2str[${owner_role}]).attr("value", ${owner_role});
                var $opt2 = $('<option></option>').text(role2str[${editor_role}]).attr("value", ${editor_role})
                        .attr("selected", "selected");
                var $opt3 = $('<option></option>').text(role2str[${viewer_role}]).attr("value", ${viewer_role});
                $('#modal-invite-role-select').empty()
                        .append($opt1).append($opt2).append($opt3);
            }

            function renderActionableRole(email, role) {
                var items = [
                    ["${owner_role}", role2str[${owner_role}] + " (read, write, manage)"],
                    ["${editor_role}", role2str[${editor_role}] + " (read, write)"],
                    ["${viewer_role}", role2str[${viewer_role}] + " (read only)"]
                ];

                var itemsStr = '';
                $.each(items, function(idx, item) {
                    itemsStr += '<li><a href="#" class="model-set-role" ' +
                            'data-email="' + email + '" data-role="' + item[0] + '">' +
                            '<span' +
                            (role == item[0] ? '' : ' class="invisible"') +
                            '>&#x2713;&nbsp;</span>' + item[1] + '</a></li>';
                });

                return '<div class="dropdown">' +
                        ## pull-left so that the dropdown menu is vertically aligned with the
                        ## "Actions" dropdown menu.
                        '<a class="dropdown-toggle pull-left" data-toggle="dropdown" href="#">' +
                            role2str[role] + '&nbsp;&#x25BE;' +
                        '</a>' +
                        '<ul class="dropdown-menu" role="menu">' +
                            itemsStr +
                        '</ul>' +
                    '</div>';
            }

            function renderUnprivilegedUserActions(email) {
                return '<span class="pull-right">' + renderSendEmailLink(email) + '</span>';
            }

            function renderPrivilegedUserActions(email, fullName) {
                return '<div class="dropdown">' +
                    '<a class="dropdown-toggle pull-right" ' +
                            'data-toggle="dropdown" href="#">Actions&nbsp;&#x25BE;</a>' +
                    ## pull-right otherwise the dropdown menu wouldn't be aligned
                    ## with the right if the dialog is wide.
                    '<ul class="dropdown-menu pull-right" role="menu">' +
                        '<li>' + renderSendEmailLink(email) + '</li>' +
                        '<li><a href="#" data-email="' + email + '" data-full-name="' + fullName +
                            '" class="modal-remove">Remove</a></li>' +
                    '</ul>' +
                '</div>';
            }

            function renderSendEmailLink(email) {
                return '<a href="mailto:' + email + '" target="_blank">Send Email</a>';
            }

            function regiterEmailTooltips() {
                $('.tooltip_email').tooltip({
                    ## To avoid tooltips being cut off by the modal boundary.
                    ## See https://github.com/twitter/bootstrap/pull/6378
                    container: '#modal'
                });
            }

            ## Set event handlers and activities for elements in the table
            function activateModelTableElements() {
                regiterEmailTooltips();

                $('.model-set-role').click(function() {
                    setRole($(this).data('email'), $(this).data('role'));
                });

                $('.modal-remove').click(function() {
                    confirmRemoveUser($(this).data('email'), $(this).data('full-name'));
                });
            }

            $modal.on('shown', function() {
                $("#modal-invitee-email").focus();
            });

            $modal.on('hidden', function() {
                ## Stop spinner
                resetModalSpinner();
                ## Remove previous invited email
                $("#modal-invitee-email").val('');
            });

            function setRole(email, role) {
                startModalSpinner();

                var errorHeader = "Couldn't change role: ";
                $.post(
                    "${request.route_path('json.set_shared_folder_perm')}",
                    {
                        ${self.csrf.token_param()}
                        ## TODO (WW) use variables to abstract parameter key strings
                        "userid": email,
                        "storeid": modalSID(),
                        "role": role
                    }
                )
                .done(function(response) {
                    if (handleAjaxReply(response, errorHeader)) {
                        modalUserAndRoleList()[email]
                                .${user_and_role_role_key} = role;
                        refreshModal();
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    displayModalError(errorHeader, errorThrown);
                })
                .always(function() {
                    stopModalSpinner();
                });
            }

            function confirmRemoveUser(email, fullName) {

                $('.remove-modal-full-name').text(fullName);
                $('.remove-modal-email').text(email);

                $modal.modal('hide');
                $('#remove-modal').modal('show');

                var $confirm = $('#remove-model-confirm');
                $confirm.off('click');
                $confirm.click(function() {
                    ## the 'hidden' handler below brings up the main modal once
                    ## the remove modal is hidden
                    $('#remove-modal').modal('hide');
                    startModalSpinner();

                    var errorHeader = "Couldn't remove: ";
                    $.post("${request.route_path('json.delete_shared_folder_perm')}",
                        {
                            ${self.csrf.token_param()}
                            ## TODO (WW) use variables to abstract parameter key strings
                            userid: email,
                            storeid: modalSID()
                        }
                    )
                    .done(function(response) {
                        if (handleAjaxReply(response, errorHeader)) {
                        ## Update modal data
                        delete modalUserAndRoleList()[email];
                            refreshModal();
                        }
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        displayModalError(errorHeader, errorThrown);
                    })
                    .always(function() {
                        stopModalSpinner();
                    });
                });
            }

            $('#remove-modal').on('hidden', function() {
                $modal.modal('show');
            })

            $('#modal-invite-form').submit(function(ev) {
                ## Since IE doesn't support String.trim(), use $.trim()
                var email = $.trim($('#modal-invitee-email').val());
                var role = $('#modal-invite-role-select').find(":selected").attr('value');
                inviteToFolder(email, role);
                return false;
            });

            ## done and always are callbacks for AJAX success and completion.
            ## They can be None.
            ## Pass the email as a parameter rather than the method extracting
            ## from the input field on its own, since paymentRequiredToInvite()
            ## hides the main modal before calling this method, which causes the
            ## field to be cleaned up.
            function inviteToFolder(email, role, done, always) {
                startModalSpinner();
                var sid = modalSID();
                var name = modalFolderName();

                var errorHeader = "Couldn't invite: ";
                $.post("${request.route_path('json.add_shared_folder_perm')}", {
                        ${self.csrf.token_param()}
                        "user_id": email,
                        "role": role,
                        "store_id": sid,
                        "folder_name": name
                    }
                ).done(function(response) {
                    showSuccessMessage('Invitation has been sent.');
                    $('#modal-invitee-email').val('');
                    if (done) done();
                }).fail(function (xhr) {
                    if (getErrorTypeNullable(xhr) == "NO_STRIPE_CUSTOMER_ID") {
                        paymentRequiredToInvite(email);
                    } else {
                        showErrorMessageFromResponse(xhr);
                    }
                }).always(function() {
                    if (always) always();
                    stopModalSpinner();
                });
            }

            ## Restore the main modal once sub-modals are hidden.
            %if is_admin:
                getCreditCardModal()
            %else:
                $("#ask-admin-modal")
            %endif
                .on("hidden", function() {
                    $modal.modal("show");
                });

            function paymentRequiredToInvite(email) {
                $modal.modal("hide");
                %if is_admin:
                    inputCreditCardInfoAndCreateStripeCustomer(function(done, always) {
                        inviteToFolder(email, role, done, always);
                    });
                %else:
                    $("#ask-admin-modal").modal("show");
                %endif
            }

            function handleAjaxReply(response, errorHeader) {
                ## Expects two parameters in server response, 'success' and
                ## 'response_message'
                if (response.success) {
                    ## Refresh the shared folder table behind the modal.
                    refreshTable();
                    return true;
                } else {
                    displayModalError(errorHeader, response.response_message);
                    return false;
                }
            }

            function resetModalSpinner() {
                var spin = $('#modal-spinner');
                if (spin.data().spinner) spin.data().spinner.stop();
            }

            function startModalSpinner() {
                $('#modal-spinner').spin(spinnerOpts);
            }

            function stopModalSpinner() {
                $('#modal-spinner').data().spinner.stop();
            }

            function displayModalError(errorHeader, error) {
                showErrorMessage(errorHeader + error + ".");
            }

            ## spin.js jQuery plugin copied from http://fgnass.github.com/spin.js/
            $.fn.spin = function(opts) {
                this.each(function() {
                    var $this = $(this), data = $this.data();

                    if (data.spinner) {
                        data.spinner.stop();
                        delete data.spinner;
                    }
                    if (opts !== false) {
                        data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                    }
                });
                return this;
            };

            var spinnerOpts = {
                lines: 11,
                length: 5,
                width: 1.6,
                radius: 4,
                corners: 1,
                rotate: 0,
                color: '#000',
                speed: 1,
                trail: 60,
                shadow: false,
                hwaccel: true,
                className: 'spinner',
                zIndex: 2e9,
                top: 3,
                left: -155
            };
        });
    </script>
</%block>
