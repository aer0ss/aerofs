<%inherit file="layout.mako"/>
<%! navigation_bars = True; %>

<%block name="css">
    <link href="${request.static_url('web:static/css/datatables_bootstrap.css')}"
          rel="stylesheet">
    <style type="text/css">
        #modal .modal-body {
            ## Set a min-height to accommendate the dropdown menu when there are
            ## very few user rows in the dialog.
            min-height: 200px;
        }
        #modal .dropdown-menu {
            ## Override bootstrap's min-width by not specifying a min-width.
            min-width: inherit;
        }
        #modal .modal-footer .form-inline {
            margin-bottom: 0;
        }
        ## this class is generated by spin.js. see the spinnerOpts variable below.
        .spinner {
            display: inline;
        }
        #modal-spinner {
            margin-right: 20px;
            color: Green;
        }
    </style>
</%block>

<%include file="shared_folder_modals.html" />

<div class="row page_block">
    <div class="span8">
        <h2>${page_title}</h2>
        <div class="well well-small footnote">
            This is a list of shared folder names only.  To see the actual
            content of your folders and files, please go to the AeroFS
            application.
        </div>

        <table id="folders_table" class="table">
            <thead><tr><th>Folder</th><th>Members</th></tr></thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<%block name="scripts">
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.8.2/jquery.dataTables.min.js"></script>
    <script src="${request.static_url('web:static/js/datatables_extensions.js')}"></script>
    <script src="${request.static_url('web:static/js/spin.min.js')}"></script>
    <script type="text/javascript">
        $(document).ready(function() {

            ## Since the tooltip has multiple lines, show it below the main text
            ## to avoid it going off the page top.
            $('#shared_folder_tooltip').tooltip({placement : 'bottom'});

            $('#folders_table').dataTable({
                ## Features
                "bProcessing": true,
                "bServerSide": true,
                "bFilter": false,
                "bLengthChange": false,

                ## Parameters
                %if datatables_paginate:
                    "sDom": "<'datatable_body't>pir",
                %else:
                    "sDom": "<'datatable_body't>r",
                    "bPaginate": false,
                %endif
                "sAjaxSource": "${datatables_request_route_url}",
                "sPaginationType": "bootstrap",
                "iDisplayLength": 20,
                "oLanguage": {
                    ## TODO (WW) create a common function for this?
                    "sInfo": "_START_-_END_ of _TOTAL_",
                    "sInfoEmpty": "",
                    "sEmptyTable": "No shared folders"
                },
                "aoColumns": [
                    { "mDataProp": "name" },
                    { "mDataProp": "users" }
                ],

                ## Callbacks
                "fnServerData": dataTableAJAXCallback
            });

            function refreshTable() {
                $('#folders_table').dataTable().fnDraw(false);
            }

            ## The Options link that opens the modal. It holds all the data
            ## required by the modal.
            var $link;

            $('.${open_modal_class}').live('click', function () {
                $link = $(this);
                refreshModal();
                $('#modal').modal('show');
            });

            ## N.B. updates to the return value will be propagated back to the
            ## Options link and persists throughout the link's lifecycle.
            function modalUserAndRoleList() {
                return $link.data('${link_data_user_and_role_list}');
            }

            function modalSID() {
                return $link.data('${link_data_sid}');
            }

            function modalFolderName() {
                return $link.data('${link_data_name}');
            }

            ########
            ## Functions for the Modal

            ## Refresh the modal based using the current values in $link
            function refreshModal() {
                ## Update the folder name
                $('#modal-folder-name').text(modalFolderName());

                ## Clear the user-role table
                $table = $('#modal-user-role-table');
                $table.find('tbody').find('tr').remove();

                ## Populate the table
                var urs = modalUserAndRoleList();
                var iAmOwner = '${session_user}' in urs ?
                        urs['${session_user}'].${user_and_role_is_owner_key} :
                        false;

                for (var email in urs) {
                    var ur = urs[email];
                    var isOwner = ur.${user_and_role_is_owner_key};
                    var fullName = ur.${user_and_role_first_name_key} + " " +
                            ur.${user_and_role_last_name_key};
                    var role = isOwner ? "Owner" : "Editor";

                    var options;
                    %if admin_privilege:
                        options = renderPrivilegedUserOptions(email, fullName, isOwner);
                    %else:
                        if (email === '${session_user}') {
                            ## Show no options for the session user
                            options = '';
                        } else if (iAmOwner) {
                            options = renderPrivilegedUserOptions(email, fullName, isOwner);
                        } else {
                            options = renderUnprivilegedUserOptions(email);
                        }
                    %endif

                    $table.find('> tbody:last').append(
                        ## TODO (WW) use proper jQuery methods to add elements
                        '<tr class="tooltip_email" title="' + email + '">' +
                            '<td>' + fullName + '</td>' +
                            '<td>' + role + '</td>' +
                            '<td>' + options + '</td>' +
                        '</tr>'
                    );
                }

                activateModelTableElements();
            }

            function renderUnprivilegedUserOptions(email) {
                return renderOptionsDropDown(renderSendEmailMenuItem(email));
            }

            function renderPrivilegedUserOptions(email, fullName, isOwner) {
                var common = ' href="#" data-email="' + email + '" ';
                var toggleRole = isOwner?
                    '<a' + common + 'class="modal-make-editor">Make Editor</a>' :
                    '<a' + common + 'class="modal-make-owner">Make Owner</a>';

                return renderOptionsDropDown(
                    '<li>' + toggleRole + '</li>' +
                    renderSendEmailMenuItem(email) +
                    '<li class="divider"></li>' +
                    '<li><a' + common + 'data-full-name="' + fullName +
                        '" class="modal-kickout">' + 'Kick Out</a></li>'
                );
            }

            function renderOptionsDropDown(menuItems) {
                return '<div class="dropdown">' +
                    '<a class="dropdown-toggle pull-right" ' +
                            'data-toggle="dropdown" href="#">Options</a>' +
                    '<ul class="dropdown-menu pull-right" role="menu">' +
                        menuItems +
                    '</ul>' +
                '</div>';
            }

            function renderSendEmailMenuItem(email) {
                return '<li><a href="mailto:' + email + '" target="_blank">Send Email</a></li>';
            }

            ## Set event handlers and activities for elements in the table
            function activateModelTableElements() {
                $('.tooltip_email').tooltip({placement: 'left'});

                $('.modal-make-editor').click(function() {
                    hideEmailTooltips();
                    var email = $(this).data('email');
                    setRole(email, 'EDITOR', function() {
                        modalUserAndRoleList()[email]
                                .${user_and_role_is_owner_key} = 0;
                    });
                });

                $('.modal-make-owner').click(function() {
                    hideEmailTooltips();
                    var email = $(this).data('email');
                    setRole(email, 'OWNER', function() {
                        modalUserAndRoleList()[email]
                                .${user_and_role_is_owner_key} = 1;
                    });
                });

                $('.modal-kickout').click(function() {
                    hideEmailTooltips();
                    confirmKickout($(this).data('email'), $(this).data('full-name'));
                });
            }

            ## Call this method before potentially destroying tooltip
            ## enabled table elements. Otherwise active tooltip may dangle
            ## and become orphaned once the element is destroyed.
            function hideEmailTooltips() {
                $('.tooltip_email').tooltip('hide');
            }

            $('#modal').on('hide', function() {
                hideEmailTooltips();
            })

            ## @param dataUpdater the function that updates HTML data on
            ## successful RPC calls
            function setRole(email, role, dataUpdater) {
                startModalSpinner();

                var errorHeader = "Couldn't change role: ";
                $.post(
                    "${request.route_path('json.set_shared_folder_perm')}",
                    {
                        ${self.csrf.token_param()}
                        ## TODO (WW) use variables to abstract parameter key strings
                        userid: email,
                        storeid: modalSID(),
                        perm: role
                    }
                )
                .done(function(response) {
                    if (handleAjaxReply(response, errorHeader)) {
                        dataUpdater();
                        refreshModal();
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    displayModalError(errorHeader, errorThrown);
                })
                .always(function() {
                    stopModalSpinner('');
                });
            }

            function confirmKickout(email, fullName) {

                $('.kickout-modal-full-name').text(fullName);
                $('.kickout-modal-email').text(email);

                $('#modal').modal('hide');
                $('#kickout-modal').modal('show');

                var $confirm = $('#kickout-model-confirm');
                $confirm.off('click');
                $confirm.click(function() {
                    ## the 'hidden' handler below brings up the main modal once
                    ## the kickout modal is hidden
                    $('#kickout-modal').modal('hide');
                    startModalSpinner();

                    var errorHeader = "Couldn't kick out: ";
                    $.post("${request.route_path('json.delete_shared_folder_perm')}",
                        {
                            ${self.csrf.token_param()}
                            ## TODO (WW) use variables to abstract parameter key strings
                            userid: email,
                            storeid: modalSID()
                        }
                    )
                    .done(function(response) {
                        if (handleAjaxReply(response, errorHeader)) {
                        ## Update modal data
                        delete modalUserAndRoleList()[email];
                            refreshModal();
                        }
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        displayModalError(errorHeader, errorThrown);
                    })
                    .always(function() {
                        stopModalSpinner('');
                    });
                });
            }

            $('#kickout-modal').on('hidden', function() {
                $('#modal').modal('show');
            })

            $('#modal-invite-form').submit(function(ev) {
                startModalSpinner();

                var email = $('#modal-invitee-email').val().trim();
                var sid = modalSID();
                var name = modalFolderName();

                var errorHeader = "Couldn't invite: ";
                $.post("${request.route_path('json.add_shared_folder_perm')}",
                    {
                        ${self.csrf.token_param()}
                        ## TODO (WW) use variables to abstract parameter key strings
                        userid: email,
                        storeid: sid,
                        foldername: name
                    }
                )
                .done(function(response) {
                    if (handleAjaxReply(response, errorHeader)) {
                        stopModalSpinner('Invitation sent.');
                        $('#modal-invitee-email').val('');
                    } else {
                        stopModalSpinner('');
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    displayModalError(errorHeader, errorThrown);
                    stopModalSpinner('');
                });

                ev.preventDefault();
            });

            ## Return whether the call is successful
            ## TODO (WW) refactor this method and its callers. The way it
            ## handles success and error responses is very ad hoc. Below are
            ## Eric's comments:
            ##
            ##I don't like the error handling being done in the "done" callback.
            ##You could do something like this (untested).
            ##
            ##$.ajax( {
            ##    type: 'POST',
            ##    url: '${request.rout_path('json.add_folder_parm')}',
            ##    data: data,
            ##    dataType: 'json'
            ##} )
            ##        .then( function ( response, textStatus, jqXHR ) {
            ##            if ( !response.success ) {
            ##                return $.Deferred.reject( jqXHR, textStatus, response );
            ##            }
            ##        } )
            ##        .done( function ( response ) {
            ##            refreshTable();
            ##        } )
            ##        .fail( function ( jqXHR, textStatus, error ) {
            ##            displayModalError( "Couldn't kick out the user: ", error );
            ##        } );
            ##.always( function () {
            ##    stopModalSpinner( '' );
            ##} );
            ##
            ##This code is easier to read because it does not break expectations
            ##about the done callback. "then" is used to process the AJAX result
            ##and make a decision about whether or not it is an error. If all is
            ##good we just let jQuery call the next "done" callback in the chain.
            ##If there is an error we signal the failure by returning a new
            ##rejected "Deffered" object. When a rejected Deferred instance is
            ##return jQuery will call the "fail" callbacks remaining in the
            ##callback chain. If the original AJAX response is an error the
            ##"then" callback will be skipped and the "fail" callback will be
            ##executed directly.
            ##
            ##one additional idea that would help improve readability. If you
            ##provide nicely named functions that return the actual callback
            ##function you could write code like this which I would consider
            ##highly readable.
            ##        $.ajax( { .... } )
            ##    .then( rejectOnError() )
            ##    .done( refreshTable() )
            ##    .fail( displayModalError() )
            ##    .always( stopModalSpinner() );
            ##
            function handleAjaxReply(response, errorHeader) {
                ## Expects two parameters in server response, 'success' and
                ## 'response_message'
                if (response.success) {
                    ## Refresh the shared folder table behind the modal.
                    refreshTable();
                    return true;
                } else {
                    displayModalError(errorHeader, response.response_message);
                    return false;
                }
            }

            function startModalSpinner() {
                $('#modal-spinner').text('').spin(spinnerOpts);
            }

            ##
            function stopModalSpinner(text) {
                $('#modal-spinner').text(text).data().spinner.stop();
            }

            function displayModalError(errorHeader, error) {
                ## TODO (WW) better error displaying. Use showErrorMessage() and
                ## a large z-index for the message bar so it can float atop the modal.
                alert(errorHeader + error + ".");
            }

            ## spin.js jQuery plugin copied from http://fgnass.github.com/spin.js/
            $.fn.spin = function(opts) {
                this.each(function() {
                    var $this = $(this), data = $this.data();

                    if (data.spinner) {
                        data.spinner.stop();
                        delete data.spinner;
                    }
                    if (opts !== false) {
                        data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                    }
                });
                return this;
            };

            var spinnerOpts = {
                lines: 11,
                length: 5,
                width: 1.6,
                radius: 4,
                corners: 1,
                rotate: 0,
                color: '#000',
                speed: 1,
                trail: 60,
                shadow: false,
                hwaccel: true,
                className: 'spinner',
                zIndex: 2e9,
                top: 3,
                left: -155
            };
        });
    </script>
</%block>
