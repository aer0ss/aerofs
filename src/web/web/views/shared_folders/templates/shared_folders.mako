<%inherit file="layout.mako"/>
<%! navigation_bars = True; %>

<%block name="css">
    <link href="${request.static_url('web:static/css/datatables-bootstrap.css')}"
          rel="stylesheet">
    <style type="text/css">
        #modal .modal-body {
            ## Set a min-height to accommendate the dropdown menu when there are
            ## very few user rows in the dialog.
            min-height: 200px;
        }
        #modal .dropdown-menu {
            ## Override bootstrap's min-width by not specifying a min-width.
            min-width: inherit;
        }
        #modal .modal-footer .form-inline {
            margin-bottom: 0;
        }
        ## this class is generated by spin.js. see the spinnerOpts variable below.
        .spinner {
            display: inline;
        }
        #modal-spinner {
            margin-right: 20px;
            color: Green;
        }
    </style>
</%block>

<%include file="shared_folder_modals.html" />

<div class="row page_block">
    <div class="span8">
        <h2>${page_title}</h2>
        <div class="well well-small footnote">
            This is a list of shared folder names only.  To see the actual
            content of your folders and files, please go to the AeroFS
            application.
        </div>

        <table id="folders_table" class="table">
            <thead><tr><th>Folder</th><th></th><th>Members</th><th></th></tr></thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<%block name="scripts">
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.8.2/jquery.dataTables.min.js"></script>
    <script src="${request.static_url('web:static/js/datatables_extensions.js')}"></script>
    <script src="${request.static_url('web:static/js/spin.min.js')}"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('#folders_table').dataTable({
                ## Features
                "bProcessing": true,
                "bServerSide": true,
                "bFilter": false,
                "bLengthChange": false,

                ## Parameters
                %if datatables_paginate:
                    "sDom": "<'datatable_body't>pir",
                %else:
                    "sDom": "<'datatable_body't>r",
                    "bPaginate": false,
                %endif
                "sAjaxSource": "${datatables_request_route_url}",
                "sPaginationType": "bootstrap",
                "iDisplayLength": 20,
                "oLanguage": {
                    ## TODO (WW) create a common function for this?
                    "sInfo": "_START_-_END_ of _TOTAL_",
                    "sInfoEmpty": "",
                    "sEmptyTable": "No shared folders"
                },
                "aoColumns": [
                    { "mDataProp": "name" },
                    { "mDataProp": "label" },
                    { "mDataProp": "users" },
                    { "mDataProp": "options" }
                ],

                ## Callbacks
                "fnServerData": function(sUrl, aoData, fnCallback, oSettings) {
                    var cb = function(json) {
                        fnCallback(json);
                        registerOwnedByMeTooltips();
                        registerOwnedByTeamTooltips();
                    }
                    dataTableAJAXCallback(sUrl, aoData, cb, oSettings);
                }
            });

            function refreshTable() {
                $('#folders_table').dataTable().fnDraw(false);
            }

            ## The Options link that opens the modal. It holds all the data
            ## required by the modal.
            var $link;

            $('.${open_modal_class}').live('click', function () {
                $link = $(this);
                refreshModal();
                $('#modal').modal('show');
            });

            ## N.B. updates to the return value will be propagated back to the
            ## Options link and persists throughout the link's lifecycle.
            function modalUserAndRoleList() {
                return $link.data('${link_data_user_and_role_list}');
            }

            function modalSID() {
                return $link.data('${link_data_sid}');
            }

            function modalPrivileged() {
                return $link.data('${link_data_privileged}');
            }

            function modalFolderName() {
                return $link.data('${link_data_name}');
            }

            ########
            ## Functions for the Modal

            ## Refresh the modal based using the current values in $link
            function refreshModal() {
                ## Update the folder name
                $('#modal-folder-name').text(modalFolderName());

                ## Clear the user-role table
                var $table = $('#modal-user-role-table');
                $table.find('tbody').find('tr').remove();

                var privileged = modalPrivileged();

                ## Enable or disable the invitation form depending on the privilege
                var $inviteUserInputs = $("#invite-user-inputs");
                if (privileged) $inviteUserInputs.removeClass("hidden");
                else $inviteUserInputs.addClass("hidden");

                ## Populate the table
                var urs = modalUserAndRoleList();
                for (var email in urs) {
                    var ur = urs[email];
                    var isOwner = ur.${user_and_role_is_owner_key};
                    var name = ur.${user_and_role_first_name_key} + " " +
                            ur.${user_and_role_last_name_key};
                    ## label text and style must match the labels generated in
                    ## shared_folders_view.py:_session_user_labeler
                    var label = isOwner ? '<span data-toggle="tooltip"' +
                            ' class="label tooltip_owner">owner</label>' : "";

                    var options;
                    if (email === '${session_user}') {
                        ## Show no options for the session user
                        options = '';
                    } else {
                        options = privileged ?
                            renderPrivilegedUserOptions(email, name, isOwner) :
                            renderUnprivilegedUserOptions(email);
                    }

                    $table.find('> tbody:last').append(
                        ## TODO (WW) use proper jQuery methods to add elements
                        '<tr>' +
                            '<td>' +
                                '<span data-toggle="tooltip" class="tooltip_email" title="' + email + '">' +
                                    name +
                                '</span>' + label + '</td>' +
                            '<td>' + options + '</td>' +
                        '</tr>'
                    );
                }

                activateModelTableElements();
            }

            function renderUnprivilegedUserOptions(email) {
                return renderOptionsDropDown(renderSendEmailMenuItem(email));
            }

            function renderPrivilegedUserOptions(email, fullName, isOwner) {
                var common = ' href="#" data-email="' + email + '" ';
                var toggleRole = isOwner?
                    '<a' + common + 'class="modal-make-editor">Remove as Owner</a>' :
                    '<a' + common + 'class="modal-make-owner">Make Owner</a>';

                return renderOptionsDropDown(
                    '<li>' + toggleRole + '</li>' +
                    renderSendEmailMenuItem(email) +
                    '<li class="divider"></li>' +
                    '<li><a' + common + 'data-full-name="' + fullName +
                        '" class="modal-remove">Remove</a></li>'
                );
            }

            function renderOptionsDropDown(menuItems) {
                return '<div class="dropdown">' +
                    '<a class="dropdown-toggle pull-right" ' +
                            'data-toggle="dropdown" href="#">Options</a>' +
                    '<ul class="dropdown-menu pull-right" role="menu">' +
                        menuItems +
                    '</ul>' +
                '</div>';
            }

            function renderSendEmailMenuItem(email) {
                return '<li><a href="mailto:' + email + '" target="_blank">Send Email</a></li>';
            }

            function registerOwnedByMeTooltips() {
                $('.tooltip_owned_by_me').tooltip({'title' :
                        'You are an owner of this folder. You can add and' +
                        ' remove other members and owners of the folder.'});
            }

            function registerOwnedByTeamTooltips() {
                $('.tooltip_owned_by_team').tooltip({'title' :
                        'This folder is owned by at least one member of your' +
                        ' team. As a team admin, you can' +
                        ' manage this folder as if your are a folder owner.'});
            }

            function registerOwnerTooltips() {
                $('.tooltip_owner').tooltip({
                    ## To avoid tooltips being cut off by the modal boundary.
                    ## See https://github.com/twitter/bootstrap/pull/6378
                    container: '#modal',
                    'title' : 'An owner of a folder can add and remove other' +
                        ' members and owners of the folder.'
                });
            }

            function regiterEmailTooltips() {
                $('.tooltip_email').tooltip({
                    ## To avoid tooltips being cut off by the modal boundary.
                    ## See https://github.com/twitter/bootstrap/pull/6378
                    container: '#modal'
                });
            }

            ## Set event handlers and activities for elements in the table
            function activateModelTableElements() {
                regiterEmailTooltips();
                registerOwnerTooltips();

                $('.modal-make-editor').click(function() {
                    var email = $(this).data('email');
                    setRole(email, 'EDITOR', function() {
                        modalUserAndRoleList()[email]
                                .${user_and_role_is_owner_key} = 0;
                    });
                });

                $('.modal-make-owner').click(function() {
                    var email = $(this).data('email');
                    setRole(email, 'OWNER', function() {
                        modalUserAndRoleList()[email]
                                .${user_and_role_is_owner_key} = 1;
                    });
                });

                $('.modal-remove').click(function() {
                    confirmRemoveUser($(this).data('email'), $(this).data('full-name'));
                });
            }

            var $modal = $('#modal');
            $modal.on('shown', function() {
                $("#modal-invitee-email").focus();
            });

            ## @param dataUpdater the function that updates HTML data on
            ## successful RPC calls
            function setRole(email, role, dataUpdater) {
                startModalSpinner();

                var errorHeader = "Couldn't change role: ";
                $.post(
                    "${request.route_path('json.set_shared_folder_perm')}",
                    {
                        ${self.csrf.token_param()}
                        ## TODO (WW) use variables to abstract parameter key strings
                        userid: email,
                        storeid: modalSID(),
                        perm: role
                    }
                )
                .done(function(response) {
                    if (handleAjaxReply(response, errorHeader)) {
                        dataUpdater();
                        refreshModal();
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    displayModalError(errorHeader, errorThrown);
                })
                .always(function() {
                    stopModalSpinner('');
                });
            }

            function confirmRemoveUser(email, fullName) {

                $('.remove-modal-full-name').text(fullName);
                $('.remove-modal-email').text(email);

                $('#modal').modal('hide');
                $('#remove-modal').modal('show');

                var $confirm = $('#remove-model-confirm');
                $confirm.off('click');
                $confirm.click(function() {
                    ## the 'hidden' handler below brings up the main modal once
                    ## the remove modal is hidden
                    $('#remove-modal').modal('hide');
                    startModalSpinner();

                    var errorHeader = "Couldn't remove: ";
                    $.post("${request.route_path('json.delete_shared_folder_perm')}",
                        {
                            ${self.csrf.token_param()}
                            ## TODO (WW) use variables to abstract parameter key strings
                            userid: email,
                            storeid: modalSID()
                        }
                    )
                    .done(function(response) {
                        if (handleAjaxReply(response, errorHeader)) {
                        ## Update modal data
                        delete modalUserAndRoleList()[email];
                            refreshModal();
                        }
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        displayModalError(errorHeader, errorThrown);
                    })
                    .always(function() {
                        stopModalSpinner('');
                    });
                });
            }

            $('#remove-modal').on('hidden', function() {
                $modal.modal('show');
            })

            $('#modal-invite-form').submit(function(ev) {
                startModalSpinner();

                var email = $('#modal-invitee-email').val().trim();
                var sid = modalSID();
                var name = modalFolderName();

                var errorHeader = "Couldn't invite: ";
                $.post("${request.route_path('json.add_shared_folder_perm')}",
                    {
                        ${self.csrf.token_param()}
                        ## TODO (WW) use variables to abstract parameter key strings
                        userid: email,
                        storeid: sid,
                        foldername: name
                    }
                )
                .done(function(response) {
                    if (handleAjaxReply(response, errorHeader)) {
                        stopModalSpinner('Invitation sent.');
                        $('#modal-invitee-email').val('');
                    } else {
                        stopModalSpinner('');
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    displayModalError(errorHeader, errorThrown);
                    stopModalSpinner('');
                });

                ev.preventDefault();
            });

            function handleAjaxReply(response, errorHeader) {
                ## Expects two parameters in server response, 'success' and
                ## 'response_message'
                if (response.success) {
                    ## Refresh the shared folder table behind the modal.
                    refreshTable();
                    return true;
                } else {
                    displayModalError(errorHeader, response.response_message);
                    return false;
                }
            }

            function startModalSpinner() {
                $('#modal-spinner').text('').spin(spinnerOpts);
            }

            ##
            function stopModalSpinner(text) {
                $('#modal-spinner').text(text).data().spinner.stop();
            }

            function displayModalError(errorHeader, error) {
                showErrorMessage(errorHeader + error + ".");
            }

            ## spin.js jQuery plugin copied from http://fgnass.github.com/spin.js/
            $.fn.spin = function(opts) {
                this.each(function() {
                    var $this = $(this), data = $this.data();

                    if (data.spinner) {
                        data.spinner.stop();
                        delete data.spinner;
                    }
                    if (opts !== false) {
                        data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                    }
                });
                return this;
            };

            var spinnerOpts = {
                lines: 11,
                length: 5,
                width: 1.6,
                radius: 4,
                corners: 1,
                rotate: 0,
                color: '#000',
                speed: 1,
                trail: 60,
                shadow: false,
                hwaccel: true,
                className: 'spinner',
                zIndex: 2e9,
                top: 3,
                left: -155
            };
        });
    </script>
</%block>
