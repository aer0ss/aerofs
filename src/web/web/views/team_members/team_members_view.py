import logging, urllib
from cgi import escape
from pyramid.httpexceptions import HTTPOk
from pyramid.view import view_config
from aerofs_sp.gen.common_pb2 import PBException
from web import util
from web.sp_util import exception2error
from web.util import *
from web.views.payment import stripe_util
from aerofs_sp.gen.sp_pb2 import USER, ADMIN

# URL param keys
URL_PARAM_USER = 'user'
URL_PARAM_LEVEL = 'level'
URL_PARAM_FULL_NAME = 'full_name'

log = logging.getLogger(__name__)

@view_config(
    route_name = 'team_members',
    renderer = 'team_members.mako',
    permission = 'admin'
)
def team_members(request):
    # It's very weird that if we use get_rpc_stub instead of
    # helper_functions.get_rpc_stub here, the unit test would fail.
    sp = util.get_rpc_stub(request)
    reply = sp.list_organization_invited_users()
    return {
        'stripe_publishable_key': stripe_util.STRIPE_PUBLISHABLE_KEY,
        'url_param_user': URL_PARAM_USER,
        'url_param_level': URL_PARAM_LEVEL,
        'url_param_stripe_card_token': stripe_util.URL_PARAM_STRIPE_CARD_TOKEN,
        'invited_users': reply.user_id
    }

@view_config(
    route_name = 'json.list_team_members',
    renderer = 'json',
    permission = 'admin'
)
def json_list_team_members(request):
    echo = str(request.GET['sEcho'])
    count = int(request.GET['iDisplayLength'])
    offset = int(request.GET['iDisplayStart'])
    session_user = get_session_user(request)

    sp = get_rpc_stub(request)
    reply = sp.list_organization_members(count, offset)

    data = []
    index = 0
    for ul in reply.user_and_level:
        data.append({
            'name': render_full_name(ul.user, session_user),
            'label': _render_label(ul.level, index),
            'email': escape(ul.user.user_email),
            'options': _render_user_options_link(request, ul, session_user, index)
        })
        index += 1

    return {
        'sEcho': echo,
        'iTotalRecords': reply.total_count,
        "iTotalDisplayRecords": reply.total_count,
        'aaData': data
    }

def _get_label_id(index):
    return 'admin_label_{}'.format(index)

def _render_label(level, index):
    hidden = '' if level == ADMIN else 'hidden'
    return '<span id="{}" class="label {} tooltip_admin">admin</span>' \
            .format(_get_label_id(index), hidden)

def _render_user_options_link(request, user_and_level, session_user, index):
    if user_and_level.user.user_email == session_user:
        # This user is the session user
        shared_folders_url = request.route_url('my_shared_folders')
        devices_url = request.route_url('my_devices')
        manage_options = ''
    else:
        devices_url, manage_options, shared_folders_url =\
            _render_other_user_option_menu_items(index, request, user_and_level)

    ## TODO (WW) writing raw HTML is so ugly. They should be generated by JS.
    return '<div class="dropdown">' \
            '<a class="dropdown-toggle" ' \
                    'data-toggle="dropdown" href="#">Options</a>' \
            '<ul class="dropdown-menu" role="menu">' \
                '<li><a href="' + shared_folders_url + '">View Shared Folders</a></li>' \
                '<li><a href="' + devices_url + '">View Devices</a></li>' + \
                manage_options + \
            '</ul>' \
        '</div>'

def _render_other_user_option_menu_items(index, request, user_and_level):
    user = user_and_level.user
    encoded_email = urllib.quote_plus(user.user_email)

    # TODO (WW) merge into render_full_name()?
    full_name = urllib.quote_plus(user.first_name.encode('utf-8') + ' ' +\
                                  user.last_name.encode('utf-8'))

    shared_folders_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_shared_folders'),
        URL_PARAM_USER, encoded_email,
        URL_PARAM_FULL_NAME, full_name
    )

    devices_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_devices'),
        URL_PARAM_USER, encoded_email,
        URL_PARAM_FULL_NAME, full_name
    )

    is_admin = user_and_level.level == ADMIN
    coming_soon = ' class="coming_soon_link" rel="tooltip" '\
                  'title="Coming soon" style="color: grey;"'
    manage_options =\
    '<li class="divider"></li>' +\
    _render_admin_menu_items(user.user_email, index, is_admin) +\
    '<li><a' + coming_soon + 'href="#">Remove</a></li>'

    return devices_url, manage_options, shared_folders_url

def _render_admin_menu_items(email, index, is_admin):
    common_params = "'{}','{}','remove_admin_{}','add_admin_{}'" \
            .format(email, _get_label_id(index), index, index)
    return \
        '<li id="remove_admin_{}" class="{}"><a href="#" ' \
        'onclick="setLevel(false,{},{}); '\
        'return false;">Remove as Admin</a></li>'\
        '<li id="add_admin_{}" class="{}"><a href="#" '\
        'onclick="setLevel(true,{},{}); '\
        'return false;">Make Admin</a></li>'\
        .format(
            index, '' if is_admin else 'hidden', USER, common_params,
            index, 'hidden' if is_admin else '', ADMIN, common_params)

def render_full_name(user, session_user):
    name = "me" if user.user_email == session_user else \
            u"{} {}".format(user.first_name, user.last_name)
    return u"<span class='full_name'>{}</span>".format(escape(name))

@view_config(
    route_name = 'json.invite_user',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_invite_user(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]
    error_on_invalid_email(user)

    sp = get_rpc_stub(request)

    # invite the user
    reply = exception2error(sp.invite_to_organization, user, {
            PBException.EMPTY_EMAIL_ADDRESS:
                _("The email address can't be empty."),
            PBException.ALREADY_EXIST:
                _("The user is already a member of your team."),
            PBException.ALREADY_INVITED:
                _("The user has already been invited to your team."),
            PBException.NO_STRIPE_CUSTOMER_ID:
                _("Payment is required to invite more users.")
        }
    )

    stripe_util.update_stripe_subscription(reply.stripe_data)

    return HTTPOk()

@view_config(
    route_name = 'json.delete_team_invitation',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_delete_team_invitation(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]

    sp = get_rpc_stub(request)
    stripe_data = sp.delete_organization_invitation_for_user(user).stripe_data

    stripe_util.update_stripe_subscription(stripe_data)

    return HTTPOk()

@view_config(
    route_name = 'json.set_level',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_set_level(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]
    level = int(request.params[URL_PARAM_LEVEL])

    sp = get_rpc_stub(request)
    sp.set_authorization_level(user, level)