import logging, urllib
from cgi import escape
from pyramid.httpexceptions import HTTPOk
from pyramid.view import view_config
from aerofs_sp.gen.common_pb2 import PBException
from web import util
from web.sp_util import exception2error, ignore_exception
from web.util import *
from web.views.payment import stripe_util

# URL param keys
URL_PARAM_USER = 'user'
URL_PARAM_FULL_NAME = 'full_name'

log = logging.getLogger(__name__)

@view_config(
    route_name = 'team_members',
    renderer = 'team_members.mako',
    permission = 'admin'
)
def team_members(request):
    # It's very weird that if we use get_rpc_stub instead of
    # helper_functions.get_rpc_stub here, the unit test would fail.
    sp = util.get_rpc_stub(request)
    reply = sp.list_organization_invited_users()
    return {
        'stripe_publishable_key': stripe_util.STRIPE_PUBLISHABLE_KEY,
        'url_param_user': URL_PARAM_USER,
        'url_param_stripe_card_token': stripe_util.URL_PARAM_STRIPE_CARD_TOKEN,
        'invited_users': reply.user_id,
        'weihan': 'test'
    }

@view_config(
    route_name = 'json.get_users',
    renderer = 'json',
    permission = 'admin'
)
def json_get_users(request):
    echo = str(request.GET['sEcho'])
    count = int(request.GET['iDisplayLength'])
    offset = int(request.GET['iDisplayStart'])
    if 'sSearch' in request.GET:
        search = str(request.GET['sSearch'])
    else:
        search = ''

    sp = get_rpc_stub(request)
    try:
        reply = sp.list_users(search, count, offset)
    except Exception as e:
        error = parse_rpc_error_exception(request, e)
        return {'error': error}

    return {
        'sEcho': echo,
        'iTotalRecords': reply.total_count,
        'iTotalDisplayRecords': reply.filtered_count,
        'aaData':[{
            'name': render_full_name(user),
            'email': escape(user.user_email),
            'options': _render_user_options_link(request, user)
        } for user in reply.users]
    }

def _render_user_options_link(request, user):
    coming_soon = ' class="coming_soon_link" rel="tooltip" ' \
                  'title="Coming soon" style="color: grey;"'

    email = urllib.quote_plus(user.user_email)
    full_name = urllib.quote_plus(user.first_name.encode('utf-8') + ' ' + \
                                  user.last_name.encode('utf-8'))

    shared_folders_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_shared_folders'),
        URL_PARAM_USER, email,
        URL_PARAM_FULL_NAME, full_name
    )

    devices_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_devices'),
        URL_PARAM_USER, email,
        URL_PARAM_FULL_NAME, full_name
    )

    ## TODO (WW) writing raw HTML is so ugly. They should be generated by JS.
    return '<div class="dropdown">' \
            '<a class="dropdown-toggle" ' \
                    'data-toggle="dropdown" href="#">Options</a>' \
            '<ul class="dropdown-menu" role="menu">' \
                '<li><a href="' + shared_folders_url + '">Shared Folders</a>' \
                '<li><a href="' + devices_url + '">Devices</a>'\
                '<li class="divider"></li>' \
                '<li><a' + coming_soon + 'href="#">Remove</a>'\
            '</ul>' \
        '</div>'

def render_full_name(user):
    return u"<span class='full_name'>{} {}</span>".format(
           escape(user.first_name), escape(user.last_name))

@view_config(
    route_name = 'json.invite_user',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_invite_user(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]
    error_on_invalid_email(user)

    sp = get_rpc_stub(request)

    # invite the user
    reply = exception2error(sp.invite_to_organization, user, {
            PBException.ALREADY_EXIST:
                _("The user is already a member of your team."),
            PBException.ALREADY_INVITED:
                _("The user has already been invited to your team."),
            PBException.NO_STRIPE_CUSTOMER_ID:
                _("Payment is required to invite more users.")
        }
    )

    stripe_util.upgrade_stripe_subscription(reply.stripe_data)

    return HTTPOk()

@view_config(
    route_name = 'json.delete_team_invitation',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_delete_team_invitation(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]

    sp = get_rpc_stub(request)
    stripe_data = sp.delete_organization_invitation_for_user(user).stripe_data

    stripe_util.downgrade_stripe_subscription(stripe_data)

    return HTTPOk()
