import logging, urllib
from cgi import escape
from pyramid.view import view_config
import aerofs_sp.gen.common_pb2 as common
from web import util
from web.util import *
from aerofs_common.exception import ExceptionReply
from ..payment.payment_view import update_stripe_subscription

# URL param keys
URL_PARAM_USER = 'user'
URL_PARAM_FULL_NAME = 'full_name'

log = logging.getLogger("web")

@view_config(
    route_name = 'team_members',
    renderer = 'team_members.mako',
    permission = 'admin'
)
def team_memers(request):
    # It's very weird that if we use get_rpc_stub instead of
    # helper_functions.get_rpc_stub here, the unit test would fail.
    sp = util.get_rpc_stub(request)
    reply = sp.list_organization_invited_users()
    return {
        'url_param_user': URL_PARAM_USER,
        'invited_users': reply.user_id
    }

@view_config(
    route_name = 'json.get_users',
    renderer = 'json',
    permission = 'admin'
)
def json_get_users(request):
    echo = str(request.GET['sEcho'])
    count = int(request.GET['iDisplayLength'])
    offset = int(request.GET['iDisplayStart'])
    if 'sSearch' in request.GET:
        search = str(request.GET['sSearch'])
    else:
        search = ''

    sp = get_rpc_stub(request)
    try:
        reply = sp.list_users(search, count, offset)
    except Exception as e:
        error = parse_rpc_error_exception(request, e)
        return {'error': error}

    return {
        'sEcho': echo,
        'iTotalRecords': reply.total_count,
        'iTotalDisplayRecords': reply.filtered_count,
        'aaData':[{
            'name': render_full_name(user),
            'email': escape(user.user_email),
            'options': _render_user_options_link(request, user)
        } for user in reply.users]
    }

def _render_user_options_link(request, user):
    coming_soon = ' class="coming_soon_link" rel="tooltip" ' \
                  'title="Coming soon" style="color: grey;"'

    email = urllib.quote_plus(user.user_email)
    full_name = urllib.quote_plus(user.first_name + ' ' + user.last_name)

    shared_folders_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_shared_folders'),
        URL_PARAM_USER, email,
        URL_PARAM_FULL_NAME, full_name
    )

    devices_url = '{}?{}={}&{}={}'.format(
        request.route_url('user_devices'),
        URL_PARAM_USER, email,
        URL_PARAM_FULL_NAME, full_name
    )

    ## TODO (WW) writing raw HTML is so ugly. They should be generated by JS.
    return '<div class="dropdown">' \
            '<a class="dropdown-toggle" ' \
                    'data-toggle="dropdown" href="#">Options</a>' \
            '<ul class="dropdown-menu" role="menu">' \
                '<li><a href="' + shared_folders_url + '">Shared Folders</a>' \
                '<li><a href="' + devices_url + '">Devices</a>'\
                '<li class="divider"></li>' \
                '<li><a' + coming_soon + 'href="#">Remove</a>'\
            '</ul>' \
        '</div>'

def render_full_name(user):
    return u"<span class='full_name'>{} {}</span>".format(
           escape(user.first_name), escape(user.last_name))

@view_config(
    route_name = 'json.invite_user',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_invite_user(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]

    if not userid_sanity_check(user):
        return {'response_message': _("Error: Invalid email address"),
                'success': False}
    sp = get_rpc_stub(request)
    try:
        # invite the user to sign up first
        # TODO (WW) this logic should be moved to sp.invite_to_organization()
        try:
            sp.invite_to_sign_up([user])
        except ExceptionReply as e:
            if e.get_type() == common.PBException.ALREADY_EXIST:
                ## Ignore if the user already exists
                pass
            else:
                raise e

        # invite the user to the org
        success = True
        try:
            stripe_subscription_data = sp.invite_to_organization(user)\
                .stripe_subscription_data

            # Since the organization now has one more user, adjust the
            # subscription for the org.
            #
            # TODO (WW) RACE CONDITION here if other users update the user list at the
            # same time!
            # TODO (WW) have an automatic tool to periodically check consistency
            # between SP and Stripe?
            update_stripe_subscription(stripe_subscription_data)

            # TODO (WW) change the way success and error messages are returned
            return {
                'response_message': _("${user} has been invited to your team.", {'user': user}),
                'success': True
            }

        except ExceptionReply as e:
            if e.get_type() == common.PBException.ALREADY_EXIST:
                return {
                    'response_message': _("${user} is already a member of your team.", {'user': user}),
                    'success': False
                }
            elif e.get_type() == common.PBException.ALREADY_INVITED:
                return {
                    'response_message': _("${user} has already been invited to your team.", {'user': user}),
                    'success': False
                }
            else:
                raise e

    except Exception as e:
        msg = parse_rpc_error_exception(request, e)
        return {'response_message': msg, 'success': False}

@view_config(
    route_name = 'json.delete_organization_invitation_for_user',
    renderer = 'json',
    permission = 'admin',
    request_method = 'POST'
)
def json_delete_organization_invitation_for_user(request):
    _ = request.translate

    user = request.params[URL_PARAM_USER]

    sp = get_rpc_stub(request)
    try:
        stripe_subscription_data = \
            sp.delete_organization_invitation_for_user(user)\
                .stripe_subscription_data

        # TODO (WW) RACE CONDITION here if other users update the user list at
        # the same time!
        # TODO (WW) have an automatic tool to periodically check consistency
        # between SP and Stripe?
        update_stripe_subscription(stripe_subscription_data)

        return {
            'response_message': _("The invitation has been removed."),
            'success': True
        }

    except Exception as e:
        msg = parse_rpc_error_exception(request, e)
        return {'response_message': msg, 'success': False}