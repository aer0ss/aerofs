@@ -1,7 +1,7 @@
 
 <%namespace name="spinner" file="spinner.mako"/>
 <%namespace name="progress_modal" file="progress_modal.mako"/>
-<%namespace name="bootstrap" file="bootstrap.mako"/>
+<%namespace name="loader" file="loader.mako"/>
 
 <%def name="html()">
     <%progress_modal:html>
@@ -15,12 +15,8 @@
     </%progress_modal:html>
 </%def>
 
-## @param onBackupDone: a callback when backup succeeds. Expected signature:
-##          function onBackupDone(onSuccess, onFailure);
-## where onSuccess and onFailure are the methods to be called when onBackupDone
-## secceeds or fails.
-<%def name="scripts(onBackupDone)">
-    <%bootstrap:scripts/>
+<%def name="scripts()">
+    <%loader:scripts/>
     <%progress_modal:scripts/>
     ## spinner support is required by progress_modal
     <%spinner:scripts/>
@@ -30,14 +26,47 @@
             initializeProgressModal();
         });
 
-        ## Run backup process. Call maintenanceExit() or download()
-        ## once it's done.
-        function backup() {
+        ## @param onBackupDone: a callback when backup succeeds. Expected signature:
+        ##          function onBackupDone(onSuccess, onFailure),
+        ## where onSuccess and onFailure are the methods to be called when onBackupDone
+        ## secceeds or fails.
+        ##
+        ## When the backup is done, the system is in maintenance mode. It's onBackupDone()'s
+        ## responsibility to exit the mode if necessary.
+        function backup(onBackupDone) {
             $('#${progress_modal.id()}').modal('show');
+            reboot('maintenance', function() {
+                performBackup(onBackupDone);
+            }, failed);
+        }
+
+        function performBackup(onBackupDone) {
+            console.log("start backup");
+            $.post("${request.route_path('json-backup')}")
+            .done(function() {
+                waitForBackup(onBackupDone);
+            }).fail(failed)
+        }
 
-            runBootstrapTask('db-backup', function() {
-                ${onBackupDone}(download, hideProgressModal);
-            }, hideProgressModal);
+        function waitForBackup(onBackupDone) {
+            console.log("wait for backup done");
+            var interval = window.setInterval(function() {
+                $.get("${request.route_path('json-backup')}")
+                .done(function(resp) {
+                    if (resp['running']) {
+                        console.log('backup is running. wait');
+                    } else if (resp['succeeded']) {
+                        console.log('backup done');
+                        window.clearInterval(interval);
+                        onBackupDone(download, hideProgressModal);
+                    } else {
+                        console.log('backup failed');
+                        window.clearInterval(interval);
+                        hideProgressModal();
+                        showErrorMessage("Backup failed.");
+                    }
+                }).fail(failed);
+            }, 1000);
         }
 
         ## Direct the browser to download the file
@@ -50,6 +79,11 @@
             window.location.assign('${request.route_path('download_backup_file')}');
         }
 
+        function failed(xhr) {
+            hideProgressModal();
+            showErrorMessageFromResponse(xhr);
+        }
+
         function hideProgressModal() {
             $('#${progress_modal.id()}').modal('hide');
         }
