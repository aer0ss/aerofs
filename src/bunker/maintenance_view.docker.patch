@@ -10,6 +10,7 @@
     redirect_to_next_page
 from web.util import flash_error
 from web.views.maintenance.maintenance_util import get_conf
+import requests
 
 log = logging.getLogger(__name__)
 
@@ -78,15 +79,42 @@
 
 @view_config(
     route_name='maintenance_home',
-    # The target routes of the redirect below manage permissions
+    # The target route of the redirect manages permissions
     permission=NO_PERMISSION_REQUIRED,
 )
 def maintenance_home(request):
-    # Redirect to the setup page if the system is not initialized
-    if is_configuration_initialized(request.registry.settings):
-        redirect = 'status'
+    """
+    The default page of the maintenance site http://host.name:8484
+    """
+    if not is_configuration_initialized(request.registry.settings):
+        redirect = 'setup'
+    elif is_maintenance_mode(request.registry.settings):
+        # The status page is inaccessible during maintenance
+        redirect = 'toggle_maintenance_mode'
     else:
+        redirect = 'status'
+    return HTTPFound(location=request.route_path(redirect))
+
+
+@view_config(
+    route_name='redirect',
+    permission=NO_PERMISSION_REQUIRED,
+)
+def maintenance_redirect(request):
+    """
+    Nginx redirects the user to this route when they access the appliance's main URL http{,s}://host.name.
+    Depending on the system's state, this route redirects to an appropriate page.
+    """
+    if not is_configuration_initialized(request.registry.settings):
         redirect = 'setup'
+    elif is_maintenance_mode(request.registry.settings):
+        # The status page is inaccessible during maintenance
+        redirect = 'maintenance_mode'
+    else:
+        r = requests.get('http://config.service:5434/is_license_valid')
+        r.raise_for_status()
+        redirect = 'license_expired' if r.text.strip() == '0' else 'maintenance_home'
+
     return HTTPFound(location=request.route_path(redirect))
 
 
