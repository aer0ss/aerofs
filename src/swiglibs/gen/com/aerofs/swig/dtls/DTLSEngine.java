/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.aerofs.swig.dtls;

public class DTLSEngine {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected DTLSEngine(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DTLSEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DTLSJNI.delete_DTLSEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DTLSEngine() {
    this(DTLSJNI.new_DTLSEngine(), true);
  }

  public DTLSEngine.DTLS_RETCODE init(boolean isclient, SSLCtx sslctx) {
    return DTLSEngine.DTLS_RETCODE.swigToEnum(DTLSJNI.DTLSEngine_init(swigCPtr, this, isclient, SSLCtx.getCPtr(sslctx), sslctx));
  }

  public DTLSEngine.DTLS_RETCODE encrypt(byte[] input, byte[] output, int inlen, int[] outsize) {
    return DTLSEngine.DTLS_RETCODE.swigToEnum(DTLSJNI.DTLSEngine_encrypt(swigCPtr, this, input, output, inlen, outsize));
  }

  public DTLSEngine.DTLS_RETCODE decrypt(byte[] input, byte[] output, int inlen, int[] outsize) {
    return DTLSEngine.DTLS_RETCODE.swigToEnum(DTLSJNI.DTLSEngine_decrypt(swigCPtr, this, input, output, inlen, outsize));
  }

  public int getPeerCName(byte[] buf, int len) {
    return DTLSJNI.DTLSEngine_getPeerCName(swigCPtr, this, buf, len);
  }

  public boolean isHshakeDone() {
    return DTLSJNI.DTLSEngine_isHshakeDone(swigCPtr, this);
  }

  public final static class DTLS_RETCODE {
    public final static DTLSEngine.DTLS_RETCODE DTLS_NEEDREAD = new DTLSEngine.DTLS_RETCODE("DTLS_NEEDREAD");
    public final static DTLSEngine.DTLS_RETCODE DTLS_NEEDWRITE = new DTLSEngine.DTLS_RETCODE("DTLS_NEEDWRITE");
    public final static DTLSEngine.DTLS_RETCODE DTLS_OK = new DTLSEngine.DTLS_RETCODE("DTLS_OK");
    public final static DTLSEngine.DTLS_RETCODE DTLS_ERROR = new DTLSEngine.DTLS_RETCODE("DTLS_ERROR");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DTLS_RETCODE swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DTLS_RETCODE.class + " with value " + swigValue);
    }

    private DTLS_RETCODE(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DTLS_RETCODE(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DTLS_RETCODE(String swigName, DTLS_RETCODE swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DTLS_RETCODE[] swigValues = { DTLS_NEEDREAD, DTLS_NEEDWRITE, DTLS_OK, DTLS_ERROR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
