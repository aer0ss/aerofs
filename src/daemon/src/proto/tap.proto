option java_package = "com.aerofs.proto";
option optimize_for = LITE_RUNTIME; // remove reflection

import "common.proto";
import "transport.proto";

service TapService {
    // Sets the message type used in case of errors
    rpc __error__(PBVoid) returns(PBException);

    // Call that starts the expected transport to be used for all subsequent
    // calls. Must be called first and can't be called again
    rpc startTransport(StartTransportCall) returns(PBAckReply);

    // Sets what outgoing messages this Transport denies
    rpc denyNone(PBVoid) returns(PBAckReply);
    rpc denyAll(PBVoid) returns(PBAckReply);
    rpc deny(DenyCall) returns(PBAckReply);

    // Maxcast related calls
    rpc sendMaxcastDatagram(MaxcastDatagramCall) returns(PBAckReply);
    rpc updateLocalStoreInterest(LocalStoreInterestCall) returns(PBVoid);

    // Unicast related calls
    rpc sendUnicastDatagram(UnicastDatagramCall) returns(PBAckReply);
    rpc pulse(PulseCall) returns(PBVoid);

    // OutgoingStream related calls
    rpc begin(OutgoingBeginCall) returns(PBAckReply);
    rpc send(OutgoingSendCall) returns(PBAckReply);
    rpc abortOutgoing(AbortStreamCall) returns(PBAckReply);
    rpc endOutgoing(Stream) returns(PBAckReply);

    // IncomingStream related calls
    rpc receive(Stream) returns(PBChunkCollection);
    rpc abortIncoming(AbortStreamCall) returns(PBAckReply);
    rpc endIncoming(Stream) returns(PBAckReply);

    // Method to get all events
    rpc awaitTransportEvent(PBVoid) returns(TransportEvent);
}

// --------------- Messages defined for RPC use -----------------------

// Use this type for rpc calls that take no parameter
message PBVoid {}

// Use this type for rpc return values that signify success
message PBAckReply {}

message StartTransportCall {
    enum Type {
        ZEPHYR = 1;
        JINGLE = 2;
        TCPMT = 3;
    }
    required Type type = 1;
}

message DenyCall {
    required MessageTypeCollection message_types = 1;
}

message MessageTypeCollection {
    repeated com.aerofs.proto.PBTPHeader.Type types = 1;
}

message MaxcastDatagramCall {
    required uint32 id = 1;
    required bytes sid = 2;
    required bytes payload = 3;
    required bool high_priority = 4;
}

message UUIDCollection {
    repeated bytes uuids = 1;
}

message LocalStoreInterestCall {
    required UUIDCollection stores_added = 1;
    required UUIDCollection stores_removed = 2;
}

message UnicastDatagramCall {
    required bytes did = 1;
    required bytes sid = 2;
    required bytes payload = 3;
    required bool high_priority = 4;
}

message PulseCall {
    required bytes did = 1;
    required bool high_priority = 2;
}

message PBChunk {
    required uint32 seq_num = 1;
    required uint32 wire_length = 2;
    required bytes payload = 3;
}

message PBChunkCollection {
    repeated PBChunk chunks = 1;
}

message Stream {
    required uint32 stream_id = 1;
    required bytes did = 2;
}

message OutgoingBeginCall {
    required uint32 stream_id = 1;
    required bytes did = 2;
    required bytes sid = 3;
    required bool high_priority = 4;
}

message OutgoingSendCall {
    required uint32 stream_id = 1;
    required bytes did = 2;
    required bytes payload = 3;
}

message AbortStreamCall {
    required uint32 stream_id = 1;
    required bytes did = 2;
    required com.aerofs.proto.PBStream.InvalidationReason reason = 3;
}

message TransportEvent {
    enum Type {
        MAXCAST_MAX_PACKET_SIZE_UPDATED = 0;
        MAXCAST_PACKET_RECEIVED = 1;
        PRESENCE_CHANGED = 2;
        DATAGRAM_RECEIVED = 3;
        INCOMING_STREAM_BEGUN = 4;
    }
    required Type type = 1;

    optional uint32 maxcast_max_packet_size = 2;

    optional bytes did = 3;
    optional bytes sid = 4;
    optional uint32 stream_id = 5;
    optional bool online = 6;
    optional bool high_priority = 7;

    optional bytes payload = 8;
}
