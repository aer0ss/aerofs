/*
 * Copyright (c) Air Computing Inc., 2014.
 */

package com.aerofs.daemon.core.activity;

import com.aerofs.base.NoObfuscation;
import com.aerofs.proto.Ritual.GetActivitiesReply.ActivityType;
import com.google.common.collect.Sets;
import org.slf4j.LoggerFactory;

import java.util.Set;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkState;

/**
 * Defines all the activity log activity types that
 * may be generated by a client. Each {@code ClientActivity}
 * has a corresponding integer value. Activities may be:
 * <ul>
 *     <li>Locally-generated.</li>
 *     <li>Remotely-requested.</li>
 * </ul>
 * Locally-requested activities are additive, i.e. multiple of
 * them can occur in a single activity log record. When multiple
 * locally-generated activities are combined the resulting
 * integer value is an '|' of each
 * individual activity's value. Remotely-generated activities
 * are exclusive. They cannot be combined.
 */
@NoObfuscation
public enum ClientActivity
{
    // event types

    // local events first (MUST be declared before remote events)

    /** Create an object. */
    CREATE("create", ActivityType.CREATION_VALUE, true),

    /** Modify an object. */
    MODIFY("modify", ActivityType.MODIFICATION_VALUE, true),

    /** Move an object. */
    MOVE("move", ActivityType.MOVEMENT_VALUE, true),

    /** Delete an object. */
    DELETE("delete", ActivityType.DELETION_VALUE, true),

    // remote events

    /** Request metadata for an object. */
    META_REQUEST("meta_request", ActivityType.OUTBOUND_VALUE, false),

    /** Request content for an object. */
    CONTENT_REQUEST("content_request", ActivityType.OUTBOUND_VALUE | ActivityType.CONTENT_VALUE, false),

    /** Complete transferring an object's content. */
    CONTENT_COMPLETED("content_completed", ActivityType.OUTBOUND_VALUE | ActivityType.CONTENT_VALUE | ActivityType.COMPLETED_VALUE, false);

    // static helpers

    /**
     * Check whether the integer value is a combination
     * of multiple local {@code ClientActivity} enums.
     *
     * @param activityValue value to check
     * @return true if the integer is a conbination of multiple {@code ClientActivity} enums, false otherwise
     */
    public static boolean isLocalActivity(int activityValue)
    {
        return activityValue <= getMaxCombinedLocalActivityValue();
    }

    private static int getMaxCombinedLocalActivityValue()
    {
        return CREATE.getValue() | MODIFY.getValue() | MOVE.getValue() | DELETE.getValue();
    }

    /**
     * Combine multiple <strong>locally-generated</strong>
     * {@code ClientActivity} enums into a single integer value.
     * <pre>
     *     // the following should always hold
     *     assertThat(isLocalActivity(combineActivities(ClientActivity.CREATE | ClientActivity.MOVE | ... more local activities ...)), true)
     * </pre>
     *
     * @param activities non-empty list of locally-generated {@code ClientActivity} enums to combine
     * @return integer > 0 representing the combined {@code ClientActivity} enums
     */
    public static int combineActivities(ClientActivity... activities)
    {
        checkArgument(activities.length >= 1, "invalid number of activities:%s", activities.length);

        int combinedValue = 0;

        for (ClientActivity activity : activities) {
            checkArgument(activity.isLocal(), "%s is not a local activity", activity);
            combinedValue |= activity.getValue();
        }

        checkState(combinedValue <= getMaxCombinedLocalActivityValue(),
                "combined activity value overflow max:%s activities:%s", getMaxCombinedLocalActivityValue(), activities);

        return combinedValue;
    }

    /**
     * Return the set of {@code ClientActivity} enums that are
     * marked in the given integer {@code activityValue}. This
     * set may contain:
     * <ol>
     *     <li>Multiple locally-generated activities.</li>
     *     <li>A single remotely-requested actvity.</li>
     * </ol>
     *
     * @param activityValue integer value to be checked for activities
     * @return set of {@code ClientActivity} enums that were marked in the integer.
     * May be empty if no valid activities were marked.
     */
    public static Set<ClientActivity> getIndicatedActivities(int activityValue)
    {
        Set<ClientActivity> activities = Sets.newHashSet();

        if (activityValue <= getMaxCombinedLocalActivityValue()) {
            // local activities are additive
            for (ClientActivity activity : ClientActivity.values()) {
                if (activity.isLocal()) {
                    if ((activityValue & activity.getValue()) == activity.getValue()) activities.add(activity);
                } else {
                    // values() iterates in declaration order, which is
                    // local first, followed by remote; this means that
                    // once I hit the first remote activity I can stop iterating
                    break;
                }
            }
        } else {
            // remotely-requested activities are exclusive
            if ((activityValue ^ META_REQUEST.getValue()) == 0) {
                activities.add(META_REQUEST);
            } else if ((activityValue ^ CONTENT_REQUEST.getValue()) == 0) {
                activities.add(CONTENT_REQUEST);
            } else if ((activityValue ^ CONTENT_COMPLETED.getValue()) == 0) {
                activities.add(CONTENT_COMPLETED);
            }
        }

        LoggerFactory.getLogger(ClientActivity.class).debug(">>>> i:{} t:{}", activityValue, activities);

        return activities;
    }

    // enum fields and methods

    private final String _name;
    private final int _value;
    private final boolean _isLocal;

    ClientActivity(String name, int value, boolean isLocal)
    {
        _name = name;
        _value = value;
        _isLocal = isLocal;
    }

    public int getValue()
    {
        return _value;
    }

    public boolean isLocal()
    {
        return _isLocal;
    }

    @Override
    public String toString()
    {
        return _name;
    }
}
