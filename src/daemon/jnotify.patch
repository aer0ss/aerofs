Index: src/net/contentobjects/jnotify/linux/JNotifyAdapterLinux.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/linux/JNotifyAdapterLinux.java,v
retrieving revision 1.17
diff -b -r1.17 JNotifyAdapterLinux.java
43d42
< import net.contentobjects.jnotify.Util;
84c83
< 		JNotify_linux.debug("JNotifyAdapterLinux.addWatch(path="+path+",mask="+Util.getMaskDesc(mask)+", watchSubtree="+watchSubtree+")");
---
> 		//JNotify_linux.debug("JNotifyAdapterLinux.addWatch(path="+path+",mask="+Util.getMaskDesc(mask)+", watchSubtree="+watchSubtree+")");
181c180,182
< 						JNotify_linux.warn("JNotifyAdapterLinux.registerToSubTree : warning, failed to register " + root + " :" + e.getMessage());
---
> 						//JNotify_linux.warn("JNotifyAdapterLinux.registerToSubTree : warning, failed to register " + root + " :" + e.getMessage());
> 					    ;
>
203c204
< 		JNotify_linux.debug("JNotifyAdapterLinux.removeWatch("+ wd+ ")");
---
> 		//JNotify_linux.debug("JNotifyAdapterLinux.removeWatch("+ wd+ ")");
264,267c265,268
< 		if (JNotify_linux.DEBUG)
< 		{
< 			debugLinux(name, linuxWd, linuxMask, cookie);
< 		}
---
> //		if (JNotify_linux.DEBUG)
> //		{
> //			debugLinux(name, linuxWd, linuxMask, cookie);
> //		}
299c300,301
< 								JNotify_linux.warn("registerToSubTree : warning, failed to register " + newRootFile + " :" + e.getMessage() + " code = " + e.getErrorCode());
---
> 								//JNotify_linux.warn("registerToSubTree : warning, failed to register " + newRootFile + " :" + e.getMessage() + " code = " + e.getErrorCode());
> 							    ;
316c318
< 							JNotify_linux.debug("Assuming already sent event for " + newRootFile.getPath());
---
> 							//JNotify_linux.debug("Assuming already sent event for " + newRootFile.getPath());
364,413c366,415
< 	private void debugLinux(String name, int linuxWd, int linuxMask, int cookie)
< 	{
< 		boolean IN_ACCESS = (linuxMask & JNotify_linux.IN_ACCESS) != 0;
< 		boolean IN_MODIFY = (linuxMask & JNotify_linux.IN_MODIFY) != 0;
< 		boolean IN_ATTRIB = (linuxMask & JNotify_linux.IN_ATTRIB) != 0;
< 		boolean IN_CLOSE_WRITE = (linuxMask & JNotify_linux.IN_CLOSE_WRITE) != 0;
< 		boolean IN_CLOSE_NOWRITE = (linuxMask & JNotify_linux.IN_CLOSE_NOWRITE) != 0;
< 		boolean IN_OPEN = (linuxMask & JNotify_linux.IN_OPEN) != 0;
< 		boolean IN_MOVED_FROM = (linuxMask & JNotify_linux.IN_MOVED_FROM) != 0;
< 		boolean IN_MOVED_TO = (linuxMask & JNotify_linux.IN_MOVED_TO) != 0;
< 		boolean IN_CREATE = (linuxMask & JNotify_linux.IN_CREATE) != 0;
< 		boolean IN_DELETE = (linuxMask & JNotify_linux.IN_DELETE) != 0;
< 		boolean IN_DELETE_SELF = (linuxMask & JNotify_linux.IN_DELETE_SELF) != 0;
< 		boolean IN_MOVE_SELF = (linuxMask & JNotify_linux.IN_MOVE_SELF) != 0;
< 		boolean IN_UNMOUNT = (linuxMask & JNotify_linux.IN_UNMOUNT) != 0;
< 		boolean IN_Q_OVERFLOW = (linuxMask & JNotify_linux.IN_Q_OVERFLOW) != 0;
< 		boolean IN_IGNORED = (linuxMask & JNotify_linux.IN_IGNORED) != 0;
< 		String s ="";
< 		if (IN_ACCESS) s += "IN_ACCESS, ";
< 		if (IN_MODIFY) s += "IN_MODIFY, ";
< 		if (IN_ATTRIB) s += "IN_ATTRIB, ";
< 		if (IN_CLOSE_WRITE) s += "IN_CLOSE_WRITE, ";
< 		if (IN_CLOSE_NOWRITE) s += "IN_CLOSE_NOWRITE, ";
< 		if (IN_OPEN) s += "IN_OPEN, ";
< 		if (IN_MOVED_FROM) s += "IN_MOVED_FROM, ";
< 		if (IN_MOVED_TO) s += "IN_MOVED_TO, ";
< 		if (IN_CREATE) s += "IN_CREATE, ";
< 		if (IN_DELETE) s += "IN_DELETE, ";
< 		if (IN_DELETE_SELF) s += "IN_DELETE_SELF, ";
< 		if (IN_MOVE_SELF) s += "IN_MOVE_SELF, ";
< 		if (IN_UNMOUNT) s += "IN_UNMOUNT, ";
< 		if (IN_Q_OVERFLOW) s += "IN_Q_OVERFLOW, ";
< 		if (IN_IGNORED) s += "IN_IGNORED, ";
< 		int wd = _linuxWd2Wd.get(Integer.valueOf(linuxWd)).intValue();
< 		WatchData wdata = _id2Data.get(Integer.valueOf(wd));
< 		String path;
< 		if (wdata != null)
< 		{
< 			path = wdata._path;
< 			if (path != null && name != "")
< 			{
< 				path += File.separator + name;
< 			}
< 		}
< 		else
< 		{
< 			path = name;
< 		}
< 		JNotify_linux.debug("Linux event : wd=" + linuxWd + " | " + s + " path: " + path + (cookie != 0 ? ", cookie=" + cookie : ""));
< 	}
---
> //	private void debugLinux(String name, int linuxWd, int linuxMask, int cookie)
> //	{
> //		boolean IN_ACCESS = (linuxMask & JNotify_linux.IN_ACCESS) != 0;
> //		boolean IN_MODIFY = (linuxMask & JNotify_linux.IN_MODIFY) != 0;
> //		boolean IN_ATTRIB = (linuxMask & JNotify_linux.IN_ATTRIB) != 0;
> //		boolean IN_CLOSE_WRITE = (linuxMask & JNotify_linux.IN_CLOSE_WRITE) != 0;
> //		boolean IN_CLOSE_NOWRITE = (linuxMask & JNotify_linux.IN_CLOSE_NOWRITE) != 0;
> //		boolean IN_OPEN = (linuxMask & JNotify_linux.IN_OPEN) != 0;
> //		boolean IN_MOVED_FROM = (linuxMask & JNotify_linux.IN_MOVED_FROM) != 0;
> //		boolean IN_MOVED_TO = (linuxMask & JNotify_linux.IN_MOVED_TO) != 0;
> //		boolean IN_CREATE = (linuxMask & JNotify_linux.IN_CREATE) != 0;
> //		boolean IN_DELETE = (linuxMask & JNotify_linux.IN_DELETE) != 0;
> //		boolean IN_DELETE_SELF = (linuxMask & JNotify_linux.IN_DELETE_SELF) != 0;
> //		boolean IN_MOVE_SELF = (linuxMask & JNotify_linux.IN_MOVE_SELF) != 0;
> //		boolean IN_UNMOUNT = (linuxMask & JNotify_linux.IN_UNMOUNT) != 0;
> //		boolean IN_Q_OVERFLOW = (linuxMask & JNotify_linux.IN_Q_OVERFLOW) != 0;
> //		boolean IN_IGNORED = (linuxMask & JNotify_linux.IN_IGNORED) != 0;
> //		String s ="";
> //		if (IN_ACCESS) s += "IN_ACCESS, ";
> //		if (IN_MODIFY) s += "IN_MODIFY, ";
> //		if (IN_ATTRIB) s += "IN_ATTRIB, ";
> //		if (IN_CLOSE_WRITE) s += "IN_CLOSE_WRITE, ";
> //		if (IN_CLOSE_NOWRITE) s += "IN_CLOSE_NOWRITE, ";
> //		if (IN_OPEN) s += "IN_OPEN, ";
> //		if (IN_MOVED_FROM) s += "IN_MOVED_FROM, ";
> //		if (IN_MOVED_TO) s += "IN_MOVED_TO, ";
> //		if (IN_CREATE) s += "IN_CREATE, ";
> //		if (IN_DELETE) s += "IN_DELETE, ";
> //		if (IN_DELETE_SELF) s += "IN_DELETE_SELF, ";
> //		if (IN_MOVE_SELF) s += "IN_MOVE_SELF, ";
> //		if (IN_UNMOUNT) s += "IN_UNMOUNT, ";
> //		if (IN_Q_OVERFLOW) s += "IN_Q_OVERFLOW, ";
> //		if (IN_IGNORED) s += "IN_IGNORED, ";
> //		int wd = _linuxWd2Wd.get(Integer.valueOf(linuxWd)).intValue();
> //		WatchData wdata = _id2Data.get(Integer.valueOf(wd));
> //		String path;
> //		if (wdata != null)
> //		{
> //			path = wdata._path;
> //			if (path != null && name != "")
> //			{
> //				path += File.separator + name;
> //			}
> //		}
> //		else
> //		{
> //			path = name;
> //		}
> //		JNotify_linux.debug("Linux event : wd=" + linuxWd + " | " + s + " path: " + path + (cookie != 0 ? ", cookie=" + cookie : ""));
> //	}
Index: src/net/contentobjects/jnotify/linux/JNotify_linux.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/linux/JNotify_linux.java,v
retrieving revision 1.11
diff -b -r1.11 JNotify_linux.java
43d42
< 		System.loadLibrary("jnotify");
112c111
< 		debug(wd + " = JNotify_linux.addWatch("+ path + "," + getMaskDesc(mask)+ ")");
---
> 		//debug(wd + " = JNotify_linux.addWatch("+ path + "," + getMaskDesc(mask)+ ")");
120c119
< 		debug(ret + " = JNotify_linux.removeWatch("+ wd + ")");
---
> 		//debug(ret + " = JNotify_linux.removeWatch("+ wd + ")");
143c142
< 		debug("JNotify.event(name=" + name + ", wd="+ wd+", " + getMaskDesc(mask)+ (cookie != 0 ? ", cookie=" +cookie : "" )+ ")");
---
> 		//debug("JNotify.event(name=" + name + ", wd="+ wd+", " + getMaskDesc(mask)+ (cookie != 0 ? ", cookie=" +cookie : "" )+ ")");
162,214c161,213
< 	
< 	private static String getMaskDesc(int linuxMask)
< 	{
< 		boolean lIN_ACCESS = (linuxMask & JNotify_linux.IN_ACCESS) != 0;
< 		boolean lIN_MODIFY = (linuxMask & JNotify_linux.IN_MODIFY) != 0;
< 		boolean lIN_ATTRIB = (linuxMask & JNotify_linux.IN_ATTRIB) != 0;
< 		boolean lIN_CLOSE_WRITE = (linuxMask & JNotify_linux.IN_CLOSE_WRITE) != 0;
< 		boolean lIN_CLOSE_NOWRITE = (linuxMask & JNotify_linux.IN_CLOSE_NOWRITE) != 0;
< 		boolean lIN_OPEN = (linuxMask & JNotify_linux.IN_OPEN) != 0;
< 		boolean lIN_MOVED_FROM = (linuxMask & JNotify_linux.IN_MOVED_FROM) != 0;
< 		boolean lIN_MOVED_TO = (linuxMask & JNotify_linux.IN_MOVED_TO) != 0;
< 		boolean lIN_CREATE = (linuxMask & JNotify_linux.IN_CREATE) != 0;
< 		boolean lIN_DELETE = (linuxMask & JNotify_linux.IN_DELETE) != 0;
< 		boolean lIN_DELETE_SELF = (linuxMask & JNotify_linux.IN_DELETE_SELF) != 0;
< 		boolean lIN_MOVE_SELF = (linuxMask & JNotify_linux.IN_MOVE_SELF) != 0;
< 		boolean lIN_UNMOUNT = (linuxMask & JNotify_linux.IN_UNMOUNT) != 0;
< 		boolean lIN_Q_OVERFLOW = (linuxMask & JNotify_linux.IN_Q_OVERFLOW) != 0;
< 		boolean lIN_IGNORED = (linuxMask & JNotify_linux.IN_IGNORED) != 0;
< 		String s ="";
< 		if (lIN_ACCESS) s += "IN_ACCESS|";
< 		if (lIN_MODIFY) s += "IN_MODIFY|";
< 		if (lIN_ATTRIB) s += "IN_ATTRIB|";
< 		if (lIN_CLOSE_WRITE) s += "IN_CLOSE_WRITE|";
< 		if (lIN_CLOSE_NOWRITE) s += "IN_CLOSE_NOWRITE|";
< 		if (lIN_OPEN) s += "IN_OPEN|";
< 		if (lIN_MOVED_FROM) s += "IN_MOVED_FROM|";
< 		if (lIN_MOVED_TO) s += "IN_MOVED_TO|";
< 		if (lIN_CREATE) s += "IN_CREATE|";
< 		if (lIN_DELETE) s += "IN_DELETE|";
< 		if (lIN_DELETE_SELF) s += "IN_DELETE_SELF|";
< 		if (lIN_MOVE_SELF) s += "IN_MOVE_SELF|";
< 		if (lIN_UNMOUNT) s += "IN_UNMOUNT|";
< 		if (lIN_Q_OVERFLOW) s += "IN_Q_OVERFLOW|";
< 		if (lIN_IGNORED) s += "IN_IGNORED|";
< 		return s;
< 	}
<
< 	
< 	static void debug(String msg)
< 	{
< 		if (DEBUG)
< 		{
< 			System.out.println(msg);
< 		}
< 	}
<
< 	public static void warn(String warning)
< 	{
< 		if (WARN)
< 		{
< 			System.err.println(warning);
< 		}
< 	}
---
> //	
> //	private static String getMaskDesc(int linuxMask)
> //	{
> //		boolean lIN_ACCESS = (linuxMask & JNotify_linux.IN_ACCESS) != 0;
> //		boolean lIN_MODIFY = (linuxMask & JNotify_linux.IN_MODIFY) != 0;
> //		boolean lIN_ATTRIB = (linuxMask & JNotify_linux.IN_ATTRIB) != 0;
> //		boolean lIN_CLOSE_WRITE = (linuxMask & JNotify_linux.IN_CLOSE_WRITE) != 0;
> //		boolean lIN_CLOSE_NOWRITE = (linuxMask & JNotify_linux.IN_CLOSE_NOWRITE) != 0;
> //		boolean lIN_OPEN = (linuxMask & JNotify_linux.IN_OPEN) != 0;
> //		boolean lIN_MOVED_FROM = (linuxMask & JNotify_linux.IN_MOVED_FROM) != 0;
> //		boolean lIN_MOVED_TO = (linuxMask & JNotify_linux.IN_MOVED_TO) != 0;
> //		boolean lIN_CREATE = (linuxMask & JNotify_linux.IN_CREATE) != 0;
> //		boolean lIN_DELETE = (linuxMask & JNotify_linux.IN_DELETE) != 0;
> //		boolean lIN_DELETE_SELF = (linuxMask & JNotify_linux.IN_DELETE_SELF) != 0;
> //		boolean lIN_MOVE_SELF = (linuxMask & JNotify_linux.IN_MOVE_SELF) != 0;
> //		boolean lIN_UNMOUNT = (linuxMask & JNotify_linux.IN_UNMOUNT) != 0;
> //		boolean lIN_Q_OVERFLOW = (linuxMask & JNotify_linux.IN_Q_OVERFLOW) != 0;
> //		boolean lIN_IGNORED = (linuxMask & JNotify_linux.IN_IGNORED) != 0;
> //		String s ="";
> //		if (lIN_ACCESS) s += "IN_ACCESS|";
> //		if (lIN_MODIFY) s += "IN_MODIFY|";
> //		if (lIN_ATTRIB) s += "IN_ATTRIB|";
> //		if (lIN_CLOSE_WRITE) s += "IN_CLOSE_WRITE|";
> //		if (lIN_CLOSE_NOWRITE) s += "IN_CLOSE_NOWRITE|";
> //		if (lIN_OPEN) s += "IN_OPEN|";
> //		if (lIN_MOVED_FROM) s += "IN_MOVED_FROM|";
> //		if (lIN_MOVED_TO) s += "IN_MOVED_TO|";
> //		if (lIN_CREATE) s += "IN_CREATE|";
> //		if (lIN_DELETE) s += "IN_DELETE|";
> //		if (lIN_DELETE_SELF) s += "IN_DELETE_SELF|";
> //		if (lIN_MOVE_SELF) s += "IN_MOVE_SELF|";
> //		if (lIN_UNMOUNT) s += "IN_UNMOUNT|";
> //		if (lIN_Q_OVERFLOW) s += "IN_Q_OVERFLOW|";
> //		if (lIN_IGNORED) s += "IN_IGNORED|";
> //		return s;
> //	}
> //
> //	
> //	static void debug(String msg)
> //	{
> //		if (DEBUG)
> //		{
> //			System.out.println(msg);
> //		}
> //	}
> //
> //	public static void warn(String warning)
> //	{
> //		if (WARN)
> //		{
> //			System.err.println(warning);
> //		}
> //	}
Index: src/net/contentobjects/jnotify/macosx/JNotifyAdapterMacOSX.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/macosx/JNotifyAdapterMacOSX.java,v
retrieving revision 1.3
diff -b -r1.3 JNotifyAdapterMacOSX.java
29,34d28
< 		// load the stat function
< 		static
< 		{
< 			System.loadLibrary("jnotify"); //$NON-NLS-1$
< 		}
<
Index: src/net/contentobjects/jnotify/macosx/JNotify_macosx.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/macosx/JNotify_macosx.java,v
retrieving revision 1.1
diff -b -r1.1 JNotify_macosx.java
13d12
< 		System.loadLibrary("jnotify"); //$NON-NLS-1$
Index: src/net/contentobjects/jnotify/win32/JNotifyAdapterWin32.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/win32/JNotifyAdapterWin32.java,v
retrieving revision 1.11
diff -b -r1.11 JNotifyAdapterWin32.java
63,65c63,64
< 		int wd = JNotify_win32.addWatch(path, JNotify_win32.FILE_NOTIFY_CHANGE_SECURITY
< 				| JNotify_win32.FILE_NOTIFY_CHANGE_CREATION
< 				| JNotify_win32.FILE_NOTIFY_CHANGE_LAST_ACCESS
---
> 		int wd = JNotify_win32.addWatch(path,
>                 JNotify_win32.FILE_NOTIFY_CHANGE_CREATION
Index: src/net/contentobjects/jnotify/win32/JNotify_win32.java
===================================================================
RCS file: /cvsroot/jnotify/jnotify/src/net/contentobjects/jnotify/win32/JNotify_win32.java,v
retrieving revision 1.10
diff -b -r1.10 JNotify_win32.java
43,58d42
< 		try
< 		{
< 			if (System.getProperty("os.arch").equals("amd64"))
< 			{
< 				System.loadLibrary("jnotify_64bit");
< 			}
< 			else
< 			{
< 				System.loadLibrary("jnotify");
< 			}
< 		}
< 		catch (UnsatisfiedLinkError e)
< 		{
< 			System.err.println("Error loading library, java.library.path=" + System.getProperty("java.library.path"));
< 			throw e;
< 		}
