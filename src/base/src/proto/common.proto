option java_package = "com.aerofs.proto";
option optimize_for = LITE_RUNTIME; // remove reflection

// PBPath specifies an *absolute* path of a object within a given root store
message PBPath {
    // root store in which the object resides
    required bytes sid = 1;

    // A list of object path elements. The 0th element refers to the object
    // directly under the root of the store, the 1st element to the object under
    // the 0th one, and so on. An empty list refers to the store's root.
    repeated string elem = 2;
}

// Intended for rpc calls and replies that take no parameter
message Void {}

// Protobuf representation of exceptions
message PBException {

    enum Type {

        // All the following type names strictly map to Java exception types. e.g. BAD_ARGS maps to
        // ExBadArgs.
        //
        // ####################################################################
        // # N.B.: When adding new types that may be consumed by JavaScripts, #
        // #       update exception_reply_test.py to include them.            #
        // ####################################################################
        //
        // Base exception types.
        // Those exceptions live in com.aerofs.base.ex and are available to everybody including the
        // Android app.
        // Try avoiding re-using them. Defining your own types is prefered.
        //
        INTERNAL_ERROR = 0;    // Generic wrapper for non-wireable exceptions
        EMPTY_EMAIL_ADDRESS = 1;
        ALREADY_EXIST = 3;
        BAD_ARGS = 4;
        NO_PERM = 6;
        NO_RESOURCE = 7;
        NOT_FOUND = 10;
        PROTOCOL_ERROR = 12;    // Protobuf error
        TIMEOUT = 13;
        NO_INVITE = 20;
        BAD_CREDENTIAL = 400;

        //
        // Core exception types.
        // Should not be used outside the core
        //

        ABORTED = 2;
        EXPELLED = 201;
        NO_AVAIL_DEVICE = 15;
        NOT_SHARED = 200;
        OUT_OF_SPACE = 11;
        UPDATE_IN_PROGRESS = 100;
        NO_COMPONENT_WITH_SPECIFIED_VERSION = 101;
        SENDER_HAS_NO_PERM = 102;

        //
        // Lib exception types
        // Those exceptions live in com.aerofs.lib.ex
        //

        // Ritual exceptions
        NOT_DIR = 8;
        NOT_FILE = 9;
        DEVICE_OFFLINE = 14;
        CHILD_ALREADY_SHARED = 16;
        PARENT_ALREADY_SHARED = 17;
        INDEXING = 202;             // daemon is busy indexing root anchor on first launch
        UPDATING = 203;             // daemon is busy running DPUT

        // Controller exceptions
        LAUNCH_ABORTED = 300;
        // This type requires the UI to display the error message as is, without adding extra text.
        UI_MESSAGE = 18;

        // SP exceptions
        DEVICE_ID_ALREADY_EXISTS = 401;
        ALREADY_INVITED = 19;
        // The only admin of an organization is going to leave the organization, or the only owner
        // of a shared folder is going to leave the shared folder
        NO_ADMIN_OR_OWNER = 402;
        // The user needs to log in
        NOT_AUTHENTICATED = 404;
        INVALID_EMAIL_ADDRESS = 405;
        EXTERNAL_SERVICE_UNAVAILABLE = 407;

        // data: UTF-8 JSON list of warnings, e.g.
        //      [
        //          {
        //              "type" : "FOOBAR",
        //              "description" : "The foobar is bazed because of the following users:\n %s",
        //              "users" : {
        //                  "<email>": { "first_name": "<first_name>", "last_name": "<last_name>" },
        //                  "<email>": { "first_name": "<first_name>", "last_name": "<last_name>" },
        //              }
        //          }
        //      ]
        SHARING_RULES_WARNINGS = 409;

        // The user cannot reset their password (because we don't manage it)
        CANNOT_RESET_PASSWORD = 410;

        // A secure session nonce was invalid, which indicates that external authentication
        // (OpenId or other...) failed.
        EXTERNAL_AUTH_FAILURE = 411;

        // An operation failed because the current software license does not
        // permit the action to be taken
        LICENSE_LIMIT = 412;

        // A request rate limit was exceeded by this request, and even if it was valid, we
        // refuse to process it.  Cool your jets.
        RATE_LIMIT_EXCEEDED = 413;

        // A user has proven their identity with one mechanism, but they still
        // need to provide a second authentication token.
        SECOND_FACTOR_REQUIRED = 414;

        // A user has been invited to a group but they are not a member of the organization that
        // owns the group.
        WRONG_ORGANIZATION = 415;

        // A user tried to edit a group that is not locally managed.
        NOT_LOCALLY_MANAGED = 416;

        // A user has not set up their second factor, but their organization requires 2FA
        SECOND_FACTOR_SETUP_REQUIRED = 417;

        // Exceeded the group size or shared folder member limit
        MEMBER_LIMIT_EXCEEDED = 418;

        // A user's login credentials have expired
        PASSWORD_EXPIRED = 419;

        // New password specified by user to reset password is the same as the old password
        PASSWORD_ALREADY_EXIST = 420;
    }

    required Type type = 1;

    // DEPRECATED: the new unified error handling framework doesn't use this field. Use the data
    // field instead to encode exception-specific information.
    //
    // The message from the Exception's getMessage() call. This is not guaranteed
    // to be human readable (e.g. the exception may contain obfuscated paths). Note that some
    // exception types use this field to hold JSON strings.
    optional string message_deprecated = 4;

    // DEPRECATED: the new unified error handling framework doesn't use this field. Use the data
    // field instead to encode exception-specific information.
    //
    // User-friendly error message, if available.
    // This message *can* be displayed to the user, and should be localized if possible.
    optional string plain_text_message_deprecated = 2;

    // The call stack of the exception, if available. Note that stack trace should not be sent
    // across machine boundaries for security concerns.
    optional string stack_trace = 3;

    // Option data associated with the exception. Individual exceptions dictate their data format.
    optional bytes data = 5;
}

// VALUES STORED IN DB, DO NOT CHANGE
enum PBPermission {
    WRITE = 0;
    MANAGE = 1;
}

message PBPermissions {
    repeated PBPermission permission = 1;
}

// N.B. a subject may be an user or a group, see SubjectPermissions.java
message PBSubjectPermissions {
    required string subject = 1;
    required PBPermissions permissions = 2;

    // Whether the store is external (i.e. resides outside the root anchor) for this user.
    // This field is only included in response to requests made by a Team Server.
    optional bool external = 3;
}

message PBFolderInvitation {
    required bytes share_id = 1;
    required string folder_name = 2;
    required string sharer = 3;
}

// see CNameVerificationHandler.java
message CNameVerificationInfo {
    required string user = 1;
    required bytes did = 2;
}
