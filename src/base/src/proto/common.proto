option java_package = "com.aerofs.proto";
option optimize_for = LITE_RUNTIME; // remove reflection

/**
 * PBPath specifies an *absolute* path of a object within a given root store
 */
message PBPath {
    // root store in which the object resides
    required bytes sid = 1;

    /**
     * A list of object path elements. The 0th element refers to the object
     * directly under the root of the store, the 1st element to the object under
     * the 0th one, and so on. An empty list refers to the store's root.
     */
    repeated string elem = 2;
}

message PBVer {
    repeated bytes device_id = 1;
    repeated uint64 tick = 2 [packed=true];
}

/**
 * Intended for rpc calls and replies that take no parameter
 */
message Void {}

/**
 * Protobuf representation of exceptions
 */
message PBException {

    enum Type {

        // All the following type names strictly map to Java exception types. e.g. BAD_ARGS maps to
        // ExBadArgs.
        //
        // ####################################################################
        // # N.B.: When adding new types that may be consumed by JavaScripts, #
        // #       update exception_reply_test.py to include them.            #
        // ####################################################################
        //
        // Base exception types.
        // Those exceptions live in com.aerofs.base.ex and are available to everybody including the
        // Android app.
        // Try avoiding re-using them. Defining your own types is prefered.
        //
        INTERNAL_ERROR = 0;    // Generic wrapper for non-wireable exceptions
        EMPTY_EMAIL_ADDRESS = 1;
        ALREADY_EXIST = 3;
        BAD_ARGS = 4;
        NO_PERM = 6;
        NO_RESOURCE = 7;
        NOT_FOUND = 10;
        PROTOCOL_ERROR = 12;    // Protobuf error
        TIMEOUT = 13;
        BAD_CREDENTIAL = 400;

        //
        // Core exception types.
        // Should not be used outside the core
        //

        ABORTED = 2;
        EXPELLED = 201;
        NO_AVAIL_DEVICE = 15;
        NOT_SHARED = 200;
        OUT_OF_SPACE = 11;
        UPDATE_IN_PROGRESS = 100;
        NO_COMPONENT_WITH_SPECIFIED_VERSION = 101;
        SENDER_HAS_NO_PERM = 102;

        //
        // Lib exception types
        // Those exceptions live in com.aerofs.lib.ex
        //

        // Ritual exceptions
        NOT_DIR = 8;
        NOT_FILE = 9;
        DEVICE_OFFLINE = 14;
        CHILD_ALREADY_SHARED = 16;
        PARENT_ALREADY_SHARED = 17;
        INDEXING = 202;             // daemon is busy indexing root anchor on first launch
        UPDATING = 203;             // daemon is busy running DPUT

        // Controller exceptions
        LAUNCH_ABORTED = 300;
        // This type requires the UI to display the error message as is, without adding extra text.
        UI_MESSAGE = 18;

        // SP exceptions
        DEVICE_ID_ALREADY_EXISTS = 401;
        ALREADY_INVITED = 19;
        // The only admin of a team is going to leave the team, or the only owner of a shared folder
        // is going to leave the shared folder
        NO_ADMIN_OR_OWNER = 402;
        NO_STRIPE_CUSTOMER_ID = 403;
        // The user needs to log in
        NOT_AUTHENTICATED = 404;
        INVALID_EMAIL_ADDRESS = 405;
        INVITEE_LIST_EMPTY = 406;
        EXTERNAL_SERVICE_UNAVAILABLE = 407;

        // ####################################################################
        // # N.B.: When adding new types that may be consumed by JavaScripts, #
        // #       update exception_reply_test.py to include them.            #
        // ####################################################################

        // SP exceptions used by shared folder rules. Their data field contains a list of external
        // users as a UTF-8 encoded JSON string. The format is as follows:
        //
        //      {
        //          "<email>": { "first_name": "<first_name>", "last_name": "<last_name>" },
        //          "<email>": { "first_name": "<first_name>", "last_name": "<last_name>" },
        //      }
        SHARED_FOLDER_RULES_EDITORS_DISALLOWED_IN_EXTERNALLY_SHARED_FOLDER = 408;
        SHARED_FOLDER_RULES_WARNING_ADD_EXTERNAL_USER = 409;
        SHARED_FOLDER_RULES_WARNING_OWNER_CAN_SHARE_WITH_EXTERNAL_USERS = 410;

        // The user cannot reset their password (because we don't manage it)
        CANNOT_RESET_PASSWORD = 411;

        // A secure session nonce was invalid, which indicates that external authentication
        // (OpenId or other...) failed.
        EXTERNAL_AUTH_FAILURE = 412;
    }

    required Type type = 1;

    /**
     * DEPRECATED: the new unified error handling framework doesn't use this field. Use the data
     * field instead to encode exception-specific information.
     *
     * The message from the Exception's getMessage() call. This is not guaranteed
     * to be human readable (e.g. the exception may contain obfuscated paths). Note that some
     * exception types use this field to hold JSON strings.
     */
    optional string message_deprecated = 4;

    /**
     * DEPRECATED: the new unified error handling framework doesn't use this field. Use the data
     * field instead to encode exception-specific information.
     *
     * User-friendly error message, if available.
     * This message *can* be displayed to the user, and should be localized if possible.
     */
    optional string plain_text_message_deprecated = 2;

    /**
     * The call stack of the exception, if available. Note that stack trace should not be sent
     * across machine boundaries for security concerns.
     */
    optional string stack_trace = 3;

    /**
     * Option data associated with the exception. Individual exceptions dictate their data format.
     */
    optional bytes data = 5;
}

enum PBRole {
    VIEWER = 1;     // read
    EDITOR = 2;     // read, write
    OWNER  = 3;     // read, write, manage users
}

message PBSubjectRolePair {
    required string subject = 1;
    required PBRole role = 2;
}

message PBFolderInvitation {
    required bytes share_id = 1;
    required string folder_name = 2;
    required string sharer = 3;
}

/*
 * This message is not meant for remote communication. It is used to encode the aggregate sync
 * status stored in the local DB.
 * To reduce the size footprint of the aggregated sync status we leverage the varint encoding of
 * protobufs : https://developers.google.com/protocol-buffers/docs/encoding
 */
message PBCounterVector {
    repeated int32 counter = 1 [packed = true];
}
