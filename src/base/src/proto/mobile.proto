package mobile;
option java_package = "com.aerofs.proto";
option optimize_for = LITE_RUNTIME; // remove reflection

import "common.proto";

service MobileService {
    // Sets the message type used in case of errors
    rpc __error__(Void) returns(PBException);

    // Lists the children names and their attributes for a given parent folder
    //
    // Throws:
    //   ExNotFound if the parent path doesn't exist
    //   ExNotDir if the parent path isn't a directory
    rpc ListChildren(ListChildrenCall) returns(ListChildrenReply);

    // Download a file
    rpc StartDownload(StartDownloadCall) returns(StartDownloadReply);

    // This may throw ExStreamInvalid if the file has been modified since the download was started
    rpc DownloadPacket(DownloadPacketCall) returns(DownloadPacketReply);
}

message ListChildrenCall {
    required PBPath path = 1;
}

message ListChildrenReply {
    repeated PBFile children = 1;
}

message PBFile {
    enum Type {
        FILE = 0;
        FOLDER = 1;
        SHARED_FOLDER = 2;
    }
    required string name = 1;    // File / folder name
    required Type type = 2;
    optional uint64 length = 3;  // File size in bytes
    optional uint64 mtime = 4;   // Last modification time
}

message StartDownloadCall {
    required PBPath path = 1;    // File to download
}

message StartDownloadReply {
    required bytes cookie = 1;   // Identifier to be passed to DownloadPacketCall
    required uint64 length = 2;  // File length
    required uint64 mtime = 3;   // File modification time
    required uint32 max_packet_length = 4;  // Maximum length that can be set in DownloadPacketCall
}

message DownloadPacketCall {
    required bytes cookie = 1;   // Identifier from StartDownloadReply
    required uint64 offset = 2;
    required uint32 length = 3;
}

message DownloadPacketReply {
    required bytes data = 1;
}

message DownloadCookie {
    required PBPath path = 1;
    required uint64 length = 2;
    required uint64 modTime = 3;
    required PBVer version = 4;
}

// This message is used for the CName verification process.
// See CNameVerifier.java
message CNameVerificationInfo {
    required string user = 1;
    required bytes did = 2;
}
