package com.aerofs.proto;
import com.google.protobuf.*;
import com.google.common.util.concurrent.*;
import static com.google.common.util.concurrent.Futures.*;
import java.util.*;
import java.util.concurrent.*;
import java.io.IOException;
@SuppressWarnings("all") public final class Sp {
private Sp() {}
public static void registerAllExtensions(
ExtensionRegistryLite registry) {
}
public enum PBAuthorizationLevel
implements Internal.EnumLite {
USER(0, 0),
ADMIN(1, 1),
;
public static final int USER_VALUE = 0;
public static final int ADMIN_VALUE = 1;
public final int getNumber() { return value; }
public static PBAuthorizationLevel valueOf(int value) {
switch (value) {
case 0: return USER;
case 1: return ADMIN;
default: return null;
}
}
public static Internal.EnumLiteMap<PBAuthorizationLevel>
internalGetValueMap() {
return internalValueMap;
}
private static Internal.EnumLiteMap<PBAuthorizationLevel>
internalValueMap =
new Internal.EnumLiteMap<PBAuthorizationLevel>() {
public PBAuthorizationLevel findValueByNumber(int number) {
return PBAuthorizationLevel.valueOf(number);
}
};
private final int value;
private PBAuthorizationLevel(int index, int value) {
this.value = value;
}
}
public enum PBSharedFolderState
implements Internal.EnumLite {
PENDING(0, 0),
JOINED(1, 1),
LEFT(2, 2),
;
public static final int PENDING_VALUE = 0;
public static final int JOINED_VALUE = 1;
public static final int LEFT_VALUE = 2;
public final int getNumber() { return value; }
public static PBSharedFolderState valueOf(int value) {
switch (value) {
case 0: return PENDING;
case 1: return JOINED;
case 2: return LEFT;
default: return null;
}
}
public static Internal.EnumLiteMap<PBSharedFolderState>
internalGetValueMap() {
return internalValueMap;
}
private static Internal.EnumLiteMap<PBSharedFolderState>
internalValueMap =
new Internal.EnumLiteMap<PBSharedFolderState>() {
public PBSharedFolderState findValueByNumber(int number) {
return PBSharedFolderState.valueOf(number);
}
};
private final int value;
private PBSharedFolderState(int index, int value) {
this.value = value;
}
}
public enum PBTwoFactorEnforcementLevel
implements Internal.EnumLite {
DISALLOWED(0, 0),
OPT_IN(1, 1),
MANDATORY(2, 2),
;
public static final int DISALLOWED_VALUE = 0;
public static final int OPT_IN_VALUE = 1;
public static final int MANDATORY_VALUE = 2;
public final int getNumber() { return value; }
public static PBTwoFactorEnforcementLevel valueOf(int value) {
switch (value) {
case 0: return DISALLOWED;
case 1: return OPT_IN;
case 2: return MANDATORY;
default: return null;
}
}
public static Internal.EnumLiteMap<PBTwoFactorEnforcementLevel>
internalGetValueMap() {
return internalValueMap;
}
private static Internal.EnumLiteMap<PBTwoFactorEnforcementLevel>
internalValueMap =
new Internal.EnumLiteMap<PBTwoFactorEnforcementLevel>() {
public PBTwoFactorEnforcementLevel findValueByNumber(int number) {
return PBTwoFactorEnforcementLevel.valueOf(number);
}
};
private final int value;
private PBTwoFactorEnforcementLevel(int index, int value) {
this.value = value;
}
}
public interface SetDeviceOSFamilyAndNameCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasOsFamily();
String getOsFamily();
ByteString
getOsFamilyBytes();
boolean hasOsName();
String getOsName();
ByteString
getOsNameBytes();
}
public static final class SetDeviceOSFamilyAndNameCall extends
GeneratedMessageLite implements
SetDeviceOSFamilyAndNameCallOrBuilder {
private SetDeviceOSFamilyAndNameCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetDeviceOSFamilyAndNameCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetDeviceOSFamilyAndNameCall defaultInstance;
public static SetDeviceOSFamilyAndNameCall getDefaultInstance() {
return defaultInstance;
}
public SetDeviceOSFamilyAndNameCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetDeviceOSFamilyAndNameCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
osFamily_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
osName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetDeviceOSFamilyAndNameCall> PARSER =
new AbstractParser<SetDeviceOSFamilyAndNameCall>() {
public SetDeviceOSFamilyAndNameCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetDeviceOSFamilyAndNameCall(input, er);
}
};
@Override
public Parser<SetDeviceOSFamilyAndNameCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int OS_FAMILY_FIELD_NUMBER = 2;
private Object osFamily_;
public boolean hasOsFamily() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOsFamily() {
Object ref = osFamily_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int OS_NAME_FIELD_NUMBER = 3;
private Object osName_;
public boolean hasOsName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsName() {
Object ref = osName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
osFamily_ = "";
osName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasOsFamily()) {
mii = 0;
return false;
}
if (!hasOsName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getOsFamilyBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getOsNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getOsFamilyBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getOsNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetDeviceOSFamilyAndNameCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetDeviceOSFamilyAndNameCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetDeviceOSFamilyAndNameCall, Builder>
implements
Sp.SetDeviceOSFamilyAndNameCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
osFamily_ = "";
b0_ = (b0_ & ~0x00000002);
osName_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetDeviceOSFamilyAndNameCall getDefaultInstanceForType() {
return Sp.SetDeviceOSFamilyAndNameCall.getDefaultInstance();
}
public Sp.SetDeviceOSFamilyAndNameCall build() {
Sp.SetDeviceOSFamilyAndNameCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetDeviceOSFamilyAndNameCall buildPartial() {
Sp.SetDeviceOSFamilyAndNameCall result = new Sp.SetDeviceOSFamilyAndNameCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.osFamily_ = osFamily_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.osName_ = osName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetDeviceOSFamilyAndNameCall other) {
if (other == Sp.SetDeviceOSFamilyAndNameCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasOsFamily()) {
b0_ |= 0x00000002;
osFamily_ = other.osFamily_;
}
if (other.hasOsName()) {
b0_ |= 0x00000004;
osName_ = other.osName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasOsFamily()) {
return false;
}
if (!hasOsName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetDeviceOSFamilyAndNameCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetDeviceOSFamilyAndNameCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private Object osFamily_ = "";
public boolean hasOsFamily() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOsFamily() {
Object ref = osFamily_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsFamily(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
osFamily_ = value;
return this;
}
public Builder clearOsFamily() {
b0_ = (b0_ & ~0x00000002);
osFamily_ = getDefaultInstance().getOsFamily();
return this;
}
public Builder setOsFamilyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
osFamily_ = value;
return this;
}
private Object osName_ = "";
public boolean hasOsName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsName() {
Object ref = osName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osName_ = value;
return this;
}
public Builder clearOsName() {
b0_ = (b0_ & ~0x00000004);
osName_ = getDefaultInstance().getOsName();
return this;
}
public Builder setOsNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osName_ = value;
return this;
}
}
static {
defaultInstance = new SetDeviceOSFamilyAndNameCall(true);
defaultInstance.initFields();
}
}
public interface DeleteOrganizationInvitationForUserCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
}
public static final class DeleteOrganizationInvitationForUserCall extends
GeneratedMessageLite implements
DeleteOrganizationInvitationForUserCallOrBuilder {
private DeleteOrganizationInvitationForUserCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DeleteOrganizationInvitationForUserCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DeleteOrganizationInvitationForUserCall defaultInstance;
public static DeleteOrganizationInvitationForUserCall getDefaultInstance() {
return defaultInstance;
}
public DeleteOrganizationInvitationForUserCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DeleteOrganizationInvitationForUserCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DeleteOrganizationInvitationForUserCall> PARSER =
new AbstractParser<DeleteOrganizationInvitationForUserCall>() {
public DeleteOrganizationInvitationForUserCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DeleteOrganizationInvitationForUserCall(input, er);
}
};
@Override
public Parser<DeleteOrganizationInvitationForUserCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteOrganizationInvitationForUserCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DeleteOrganizationInvitationForUserCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DeleteOrganizationInvitationForUserCall, Builder>
implements
Sp.DeleteOrganizationInvitationForUserCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DeleteOrganizationInvitationForUserCall getDefaultInstanceForType() {
return Sp.DeleteOrganizationInvitationForUserCall.getDefaultInstance();
}
public Sp.DeleteOrganizationInvitationForUserCall build() {
Sp.DeleteOrganizationInvitationForUserCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DeleteOrganizationInvitationForUserCall buildPartial() {
Sp.DeleteOrganizationInvitationForUserCall result = new Sp.DeleteOrganizationInvitationForUserCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DeleteOrganizationInvitationForUserCall other) {
if (other == Sp.DeleteOrganizationInvitationForUserCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DeleteOrganizationInvitationForUserCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DeleteOrganizationInvitationForUserCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
}
static {
defaultInstance = new DeleteOrganizationInvitationForUserCall(true);
defaultInstance.initFields();
}
}
public interface ListOrganizationInvitedUsersReplyOrBuilder extends
MessageLiteOrBuilder {
ProtocolStringList
getUserIdList();
int getUserIdCount();
String getUserId(int index);
ByteString
getUserIdBytes(int index);
}
public static final class ListOrganizationInvitedUsersReply extends
GeneratedMessageLite implements
ListOrganizationInvitedUsersReplyOrBuilder {
private ListOrganizationInvitedUsersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListOrganizationInvitedUsersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListOrganizationInvitedUsersReply defaultInstance;
public static ListOrganizationInvitedUsersReply getDefaultInstance() {
return defaultInstance;
}
public ListOrganizationInvitedUsersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListOrganizationInvitedUsersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
userId_ = new LazyStringArrayList();
mutable_b0_ |= 0x00000001;
}
userId_.add(bs);
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
userId_ = userId_.getUnmodifiableView();
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListOrganizationInvitedUsersReply> PARSER =
new AbstractParser<ListOrganizationInvitedUsersReply>() {
public ListOrganizationInvitedUsersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListOrganizationInvitedUsersReply(input, er);
}
};
@Override
public Parser<ListOrganizationInvitedUsersReply> getParserForType() {
return PARSER;
}
public static final int USER_ID_FIELD_NUMBER = 1;
private LazyStringList userId_;
public ProtocolStringList
getUserIdList() {
return userId_;
}
public int getUserIdCount() {
return userId_.size();
}
public String getUserId(int index) {
return userId_.get(index);
}
public ByteString
getUserIdBytes(int index) {
return userId_.getByteString(index);
}
private void initFields() {
userId_ = LazyStringArrayList.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < userId_.size(); i++) {
output.writeBytes(1, userId_.getByteString(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
{
int dataSize = 0;
for (int i = 0; i < userId_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(userId_.getByteString(i));
}
size += dataSize;
size += 1 * getUserIdList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationInvitedUsersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationInvitedUsersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationInvitedUsersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationInvitedUsersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationInvitedUsersReply, Builder>
implements
Sp.ListOrganizationInvitedUsersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationInvitedUsersReply getDefaultInstanceForType() {
return Sp.ListOrganizationInvitedUsersReply.getDefaultInstance();
}
public Sp.ListOrganizationInvitedUsersReply build() {
Sp.ListOrganizationInvitedUsersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationInvitedUsersReply buildPartial() {
Sp.ListOrganizationInvitedUsersReply result = new Sp.ListOrganizationInvitedUsersReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
userId_ = userId_.getUnmodifiableView();
b0_ = (b0_ & ~0x00000001);
}
result.userId_ = userId_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationInvitedUsersReply other) {
if (other == Sp.ListOrganizationInvitedUsersReply.getDefaultInstance()) return this;
if (!other.userId_.isEmpty()) {
if (userId_.isEmpty()) {
userId_ = other.userId_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUserIdIsMutable();
userId_.addAll(other.userId_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationInvitedUsersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationInvitedUsersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private LazyStringList userId_ = LazyStringArrayList.EMPTY;
private void ensureUserIdIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
userId_ = new LazyStringArrayList(userId_);
b0_ |= 0x00000001;
}
}
public ProtocolStringList
getUserIdList() {
return userId_.getUnmodifiableView();
}
public int getUserIdCount() {
return userId_.size();
}
public String getUserId(int index) {
return userId_.get(index);
}
public ByteString
getUserIdBytes(int index) {
return userId_.getByteString(index);
}
public Builder setUserId(
int index, String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIdIsMutable();
userId_.set(index, value);
return this;
}
public Builder addUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIdIsMutable();
userId_.add(value);
return this;
}
public Builder addAllUserId(
Iterable<String> values) {
ensureUserIdIsMutable();
AbstractMessageLite.Builder.addAll(
values, userId_);
return this;
}
public Builder clearUserId() {
userId_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder addUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIdIsMutable();
userId_.add(value);
return this;
}
}
static {
defaultInstance = new ListOrganizationInvitedUsersReply(true);
defaultInstance.initFields();
}
}
public interface SignUpWithCodeCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSignupCode();
String getSignupCode();
ByteString
getSignupCodeBytes();
boolean hasPassword();
ByteString getPassword();
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
}
public static final class SignUpWithCodeCall extends
GeneratedMessageLite implements
SignUpWithCodeCallOrBuilder {
private SignUpWithCodeCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SignUpWithCodeCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SignUpWithCodeCall defaultInstance;
public static SignUpWithCodeCall getDefaultInstance() {
return defaultInstance;
}
public SignUpWithCodeCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SignUpWithCodeCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
signupCode_ = bs;
break;
}
case 26: {
b0_ |= 0x00000002;
password_ = input.readBytes();
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
firstName_ = bs;
break;
}
case 42: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
lastName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SignUpWithCodeCall> PARSER =
new AbstractParser<SignUpWithCodeCall>() {
public SignUpWithCodeCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SignUpWithCodeCall(input, er);
}
};
@Override
public Parser<SignUpWithCodeCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SIGNUP_CODE_FIELD_NUMBER = 1;
private Object signupCode_;
public boolean hasSignupCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSignupCode() {
Object ref = signupCode_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
signupCode_ = s;
}
return s;
}
}
public ByteString
getSignupCodeBytes() {
Object ref = signupCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
signupCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int PASSWORD_FIELD_NUMBER = 3;
private ByteString password_;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
public static final int FIRST_NAME_FIELD_NUMBER = 4;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LAST_NAME_FIELD_NUMBER = 5;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
signupCode_ = "";
password_ = ByteString.EMPTY;
firstName_ = "";
lastName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSignupCode()) {
mii = 0;
return false;
}
if (!hasPassword()) {
mii = 0;
return false;
}
if (!hasFirstName()) {
mii = 0;
return false;
}
if (!hasLastName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getSignupCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(3, password_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(4, getFirstNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(5, getLastNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getSignupCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(3, password_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(4, getFirstNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(5, getLastNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SignUpWithCodeCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignUpWithCodeCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignUpWithCodeCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignUpWithCodeCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignUpWithCodeCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignUpWithCodeCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SignUpWithCodeCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SignUpWithCodeCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SignUpWithCodeCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignUpWithCodeCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SignUpWithCodeCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SignUpWithCodeCall, Builder>
implements
Sp.SignUpWithCodeCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
signupCode_ = "";
b0_ = (b0_ & ~0x00000001);
password_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
firstName_ = "";
b0_ = (b0_ & ~0x00000004);
lastName_ = "";
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SignUpWithCodeCall getDefaultInstanceForType() {
return Sp.SignUpWithCodeCall.getDefaultInstance();
}
public Sp.SignUpWithCodeCall build() {
Sp.SignUpWithCodeCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SignUpWithCodeCall buildPartial() {
Sp.SignUpWithCodeCall result = new Sp.SignUpWithCodeCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.signupCode_ = signupCode_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.password_ = password_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.lastName_ = lastName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SignUpWithCodeCall other) {
if (other == Sp.SignUpWithCodeCall.getDefaultInstance()) return this;
if (other.hasSignupCode()) {
b0_ |= 0x00000001;
signupCode_ = other.signupCode_;
}
if (other.hasPassword()) {
setPassword(other.getPassword());
}
if (other.hasFirstName()) {
b0_ |= 0x00000004;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000008;
lastName_ = other.lastName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSignupCode()) {
return false;
}
if (!hasPassword()) {
return false;
}
if (!hasFirstName()) {
return false;
}
if (!hasLastName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SignUpWithCodeCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SignUpWithCodeCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object signupCode_ = "";
public boolean hasSignupCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSignupCode() {
Object ref = signupCode_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
signupCode_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSignupCodeBytes() {
Object ref = signupCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
signupCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSignupCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
signupCode_ = value;
return this;
}
public Builder clearSignupCode() {
b0_ = (b0_ & ~0x00000001);
signupCode_ = getDefaultInstance().getSignupCode();
return this;
}
public Builder setSignupCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
signupCode_ = value;
return this;
}
private ByteString password_ = ByteString.EMPTY;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
public Builder setPassword(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
password_ = value;
return this;
}
public Builder clearPassword() {
b0_ = (b0_ & ~0x00000002);
password_ = getDefaultInstance().getPassword();
return this;
}
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000004);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000008);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
lastName_ = value;
return this;
}
}
static {
defaultInstance = new SignUpWithCodeCall(true);
defaultInstance.initFields();
}
}
public interface SignUpWithCodeReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrgId();
String getOrgId();
ByteString
getOrgIdBytes();
boolean hasExistingTeam();
boolean getExistingTeam();
}
public static final class SignUpWithCodeReply extends
GeneratedMessageLite implements
SignUpWithCodeReplyOrBuilder {
private SignUpWithCodeReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SignUpWithCodeReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SignUpWithCodeReply defaultInstance;
public static SignUpWithCodeReply getDefaultInstance() {
return defaultInstance;
}
public SignUpWithCodeReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SignUpWithCodeReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
orgId_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
existingTeam_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SignUpWithCodeReply> PARSER =
new AbstractParser<SignUpWithCodeReply>() {
public SignUpWithCodeReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SignUpWithCodeReply(input, er);
}
};
@Override
public Parser<SignUpWithCodeReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORG_ID_FIELD_NUMBER = 1;
private Object orgId_;
public boolean hasOrgId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgId() {
Object ref = orgId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int EXISTING_TEAM_FIELD_NUMBER = 2;
private boolean existingTeam_;
public boolean hasExistingTeam() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getExistingTeam() {
return existingTeam_;
}
private void initFields() {
orgId_ = "";
existingTeam_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOrgId()) {
mii = 0;
return false;
}
if (!hasExistingTeam()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getOrgIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, existingTeam_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getOrgIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, existingTeam_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SignUpWithCodeReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignUpWithCodeReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignUpWithCodeReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignUpWithCodeReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignUpWithCodeReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignUpWithCodeReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SignUpWithCodeReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SignUpWithCodeReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SignUpWithCodeReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignUpWithCodeReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SignUpWithCodeReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SignUpWithCodeReply, Builder>
implements
Sp.SignUpWithCodeReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
orgId_ = "";
b0_ = (b0_ & ~0x00000001);
existingTeam_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SignUpWithCodeReply getDefaultInstanceForType() {
return Sp.SignUpWithCodeReply.getDefaultInstance();
}
public Sp.SignUpWithCodeReply build() {
Sp.SignUpWithCodeReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SignUpWithCodeReply buildPartial() {
Sp.SignUpWithCodeReply result = new Sp.SignUpWithCodeReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.orgId_ = orgId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.existingTeam_ = existingTeam_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SignUpWithCodeReply other) {
if (other == Sp.SignUpWithCodeReply.getDefaultInstance()) return this;
if (other.hasOrgId()) {
b0_ |= 0x00000001;
orgId_ = other.orgId_;
}
if (other.hasExistingTeam()) {
setExistingTeam(other.getExistingTeam());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOrgId()) {
return false;
}
if (!hasExistingTeam()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SignUpWithCodeReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SignUpWithCodeReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object orgId_ = "";
public boolean hasOrgId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgId() {
Object ref = orgId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrgId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgId_ = value;
return this;
}
public Builder clearOrgId() {
b0_ = (b0_ & ~0x00000001);
orgId_ = getDefaultInstance().getOrgId();
return this;
}
public Builder setOrgIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgId_ = value;
return this;
}
private boolean existingTeam_ ;
public boolean hasExistingTeam() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getExistingTeam() {
return existingTeam_;
}
public Builder setExistingTeam(boolean value) {
b0_ |= 0x00000002;
existingTeam_ = value;
return this;
}
public Builder clearExistingTeam() {
b0_ = (b0_ & ~0x00000002);
existingTeam_ = false;
return this;
}
}
static {
defaultInstance = new SignUpWithCodeReply(true);
defaultInstance.initFields();
}
}
public interface ResolveSignUpCodeCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasCode();
String getCode();
ByteString
getCodeBytes();
}
public static final class ResolveSignUpCodeCall extends
GeneratedMessageLite implements
ResolveSignUpCodeCallOrBuilder {
private ResolveSignUpCodeCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ResolveSignUpCodeCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ResolveSignUpCodeCall defaultInstance;
public static ResolveSignUpCodeCall getDefaultInstance() {
return defaultInstance;
}
public ResolveSignUpCodeCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ResolveSignUpCodeCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
code_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ResolveSignUpCodeCall> PARSER =
new AbstractParser<ResolveSignUpCodeCall>() {
public ResolveSignUpCodeCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ResolveSignUpCodeCall(input, er);
}
};
@Override
public Parser<ResolveSignUpCodeCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CODE_FIELD_NUMBER = 1;
private Object code_;
public boolean hasCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCode() {
Object ref = code_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
code_ = s;
}
return s;
}
}
public ByteString
getCodeBytes() {
Object ref = code_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
code_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
code_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCode()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getCodeBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getCodeBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ResolveSignUpCodeCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResolveSignUpCodeCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResolveSignUpCodeCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResolveSignUpCodeCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResolveSignUpCodeCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResolveSignUpCodeCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ResolveSignUpCodeCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ResolveSignUpCodeCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ResolveSignUpCodeCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResolveSignUpCodeCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ResolveSignUpCodeCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ResolveSignUpCodeCall, Builder>
implements
Sp.ResolveSignUpCodeCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
code_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ResolveSignUpCodeCall getDefaultInstanceForType() {
return Sp.ResolveSignUpCodeCall.getDefaultInstance();
}
public Sp.ResolveSignUpCodeCall build() {
Sp.ResolveSignUpCodeCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ResolveSignUpCodeCall buildPartial() {
Sp.ResolveSignUpCodeCall result = new Sp.ResolveSignUpCodeCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.code_ = code_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ResolveSignUpCodeCall other) {
if (other == Sp.ResolveSignUpCodeCall.getDefaultInstance()) return this;
if (other.hasCode()) {
b0_ |= 0x00000001;
code_ = other.code_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCode()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ResolveSignUpCodeCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ResolveSignUpCodeCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object code_ = "";
public boolean hasCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCode() {
Object ref = code_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
code_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCodeBytes() {
Object ref = code_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
code_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
code_ = value;
return this;
}
public Builder clearCode() {
b0_ = (b0_ & ~0x00000001);
code_ = getDefaultInstance().getCode();
return this;
}
public Builder setCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
code_ = value;
return this;
}
}
static {
defaultInstance = new ResolveSignUpCodeCall(true);
defaultInstance.initFields();
}
}
public interface ResolveSignUpCodeReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasEmailAddress();
String getEmailAddress();
ByteString
getEmailAddressBytes();
}
public static final class ResolveSignUpCodeReply extends
GeneratedMessageLite implements
ResolveSignUpCodeReplyOrBuilder {
private ResolveSignUpCodeReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ResolveSignUpCodeReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ResolveSignUpCodeReply defaultInstance;
public static ResolveSignUpCodeReply getDefaultInstance() {
return defaultInstance;
}
public ResolveSignUpCodeReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ResolveSignUpCodeReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
emailAddress_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ResolveSignUpCodeReply> PARSER =
new AbstractParser<ResolveSignUpCodeReply>() {
public ResolveSignUpCodeReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ResolveSignUpCodeReply(input, er);
}
};
@Override
public Parser<ResolveSignUpCodeReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int EMAIL_ADDRESS_FIELD_NUMBER = 1;
private Object emailAddress_;
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
emailAddress_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEmailAddress()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getEmailAddressBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getEmailAddressBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ResolveSignUpCodeReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResolveSignUpCodeReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResolveSignUpCodeReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResolveSignUpCodeReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResolveSignUpCodeReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResolveSignUpCodeReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ResolveSignUpCodeReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ResolveSignUpCodeReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ResolveSignUpCodeReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResolveSignUpCodeReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ResolveSignUpCodeReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ResolveSignUpCodeReply, Builder>
implements
Sp.ResolveSignUpCodeReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
emailAddress_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ResolveSignUpCodeReply getDefaultInstanceForType() {
return Sp.ResolveSignUpCodeReply.getDefaultInstance();
}
public Sp.ResolveSignUpCodeReply build() {
Sp.ResolveSignUpCodeReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ResolveSignUpCodeReply buildPartial() {
Sp.ResolveSignUpCodeReply result = new Sp.ResolveSignUpCodeReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.emailAddress_ = emailAddress_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ResolveSignUpCodeReply other) {
if (other == Sp.ResolveSignUpCodeReply.getDefaultInstance()) return this;
if (other.hasEmailAddress()) {
b0_ |= 0x00000001;
emailAddress_ = other.emailAddress_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEmailAddress()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ResolveSignUpCodeReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ResolveSignUpCodeReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object emailAddress_ = "";
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setEmailAddress(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
public Builder clearEmailAddress() {
b0_ = (b0_ & ~0x00000001);
emailAddress_ = getDefaultInstance().getEmailAddress();
return this;
}
public Builder setEmailAddressBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
}
static {
defaultInstance = new ResolveSignUpCodeReply(true);
defaultInstance.initFields();
}
}
public interface VerifyBatchSignUpCodeCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasBsc();
String getBsc();
ByteString
getBscBytes();
}
public static final class VerifyBatchSignUpCodeCall extends
GeneratedMessageLite implements
VerifyBatchSignUpCodeCallOrBuilder {
private VerifyBatchSignUpCodeCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private VerifyBatchSignUpCodeCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final VerifyBatchSignUpCodeCall defaultInstance;
public static VerifyBatchSignUpCodeCall getDefaultInstance() {
return defaultInstance;
}
public VerifyBatchSignUpCodeCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private VerifyBatchSignUpCodeCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
bsc_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<VerifyBatchSignUpCodeCall> PARSER =
new AbstractParser<VerifyBatchSignUpCodeCall>() {
public VerifyBatchSignUpCodeCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new VerifyBatchSignUpCodeCall(input, er);
}
};
@Override
public Parser<VerifyBatchSignUpCodeCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int BSC_FIELD_NUMBER = 1;
private Object bsc_;
public boolean hasBsc() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getBsc() {
Object ref = bsc_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
bsc_ = s;
}
return s;
}
}
public ByteString
getBscBytes() {
Object ref = bsc_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
bsc_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
bsc_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasBsc()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getBscBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getBscBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.VerifyBatchSignUpCodeCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.VerifyBatchSignUpCodeCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.VerifyBatchSignUpCodeCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.VerifyBatchSignUpCodeCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.VerifyBatchSignUpCodeCall, Builder>
implements
Sp.VerifyBatchSignUpCodeCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
bsc_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.VerifyBatchSignUpCodeCall getDefaultInstanceForType() {
return Sp.VerifyBatchSignUpCodeCall.getDefaultInstance();
}
public Sp.VerifyBatchSignUpCodeCall build() {
Sp.VerifyBatchSignUpCodeCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.VerifyBatchSignUpCodeCall buildPartial() {
Sp.VerifyBatchSignUpCodeCall result = new Sp.VerifyBatchSignUpCodeCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.bsc_ = bsc_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.VerifyBatchSignUpCodeCall other) {
if (other == Sp.VerifyBatchSignUpCodeCall.getDefaultInstance()) return this;
if (other.hasBsc()) {
b0_ |= 0x00000001;
bsc_ = other.bsc_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasBsc()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.VerifyBatchSignUpCodeCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.VerifyBatchSignUpCodeCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object bsc_ = "";
public boolean hasBsc() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getBsc() {
Object ref = bsc_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
bsc_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getBscBytes() {
Object ref = bsc_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
bsc_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setBsc(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
bsc_ = value;
return this;
}
public Builder clearBsc() {
b0_ = (b0_ & ~0x00000001);
bsc_ = getDefaultInstance().getBsc();
return this;
}
public Builder setBscBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
bsc_ = value;
return this;
}
}
static {
defaultInstance = new VerifyBatchSignUpCodeCall(true);
defaultInstance.initFields();
}
}
public interface RequestToSignUpCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasEmailAddress();
String getEmailAddress();
ByteString
getEmailAddressBytes();
}
public static final class RequestToSignUpCall extends
GeneratedMessageLite implements
RequestToSignUpCallOrBuilder {
private RequestToSignUpCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RequestToSignUpCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RequestToSignUpCall defaultInstance;
public static RequestToSignUpCall getDefaultInstance() {
return defaultInstance;
}
public RequestToSignUpCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RequestToSignUpCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
emailAddress_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RequestToSignUpCall> PARSER =
new AbstractParser<RequestToSignUpCall>() {
public RequestToSignUpCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RequestToSignUpCall(input, er);
}
};
@Override
public Parser<RequestToSignUpCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int EMAIL_ADDRESS_FIELD_NUMBER = 1;
private Object emailAddress_;
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
emailAddress_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEmailAddress()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getEmailAddressBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getEmailAddressBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RequestToSignUpCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RequestToSignUpCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RequestToSignUpCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RequestToSignUpCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RequestToSignUpCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RequestToSignUpCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RequestToSignUpCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RequestToSignUpCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RequestToSignUpCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RequestToSignUpCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RequestToSignUpCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RequestToSignUpCall, Builder>
implements
Sp.RequestToSignUpCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
emailAddress_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RequestToSignUpCall getDefaultInstanceForType() {
return Sp.RequestToSignUpCall.getDefaultInstance();
}
public Sp.RequestToSignUpCall build() {
Sp.RequestToSignUpCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RequestToSignUpCall buildPartial() {
Sp.RequestToSignUpCall result = new Sp.RequestToSignUpCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.emailAddress_ = emailAddress_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RequestToSignUpCall other) {
if (other == Sp.RequestToSignUpCall.getDefaultInstance()) return this;
if (other.hasEmailAddress()) {
b0_ |= 0x00000001;
emailAddress_ = other.emailAddress_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEmailAddress()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RequestToSignUpCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RequestToSignUpCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object emailAddress_ = "";
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setEmailAddress(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
public Builder clearEmailAddress() {
b0_ = (b0_ & ~0x00000001);
emailAddress_ = getDefaultInstance().getEmailAddress();
return this;
}
public Builder setEmailAddressBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
}
static {
defaultInstance = new RequestToSignUpCall(true);
defaultInstance.initFields();
}
}
public interface InviteToOrganizationCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasEmailAddress();
String getEmailAddress();
ByteString
getEmailAddressBytes();
}
public static final class InviteToOrganizationCall extends
GeneratedMessageLite implements
InviteToOrganizationCallOrBuilder {
private InviteToOrganizationCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private InviteToOrganizationCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final InviteToOrganizationCall defaultInstance;
public static InviteToOrganizationCall getDefaultInstance() {
return defaultInstance;
}
public InviteToOrganizationCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private InviteToOrganizationCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
emailAddress_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<InviteToOrganizationCall> PARSER =
new AbstractParser<InviteToOrganizationCall>() {
public InviteToOrganizationCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new InviteToOrganizationCall(input, er);
}
};
@Override
public Parser<InviteToOrganizationCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int EMAIL_ADDRESS_FIELD_NUMBER = 1;
private Object emailAddress_;
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
emailAddress_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEmailAddress()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getEmailAddressBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getEmailAddressBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.InviteToOrganizationCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.InviteToOrganizationCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.InviteToOrganizationCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.InviteToOrganizationCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.InviteToOrganizationCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.InviteToOrganizationCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.InviteToOrganizationCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.InviteToOrganizationCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.InviteToOrganizationCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.InviteToOrganizationCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.InviteToOrganizationCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.InviteToOrganizationCall, Builder>
implements
Sp.InviteToOrganizationCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
emailAddress_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.InviteToOrganizationCall getDefaultInstanceForType() {
return Sp.InviteToOrganizationCall.getDefaultInstance();
}
public Sp.InviteToOrganizationCall build() {
Sp.InviteToOrganizationCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.InviteToOrganizationCall buildPartial() {
Sp.InviteToOrganizationCall result = new Sp.InviteToOrganizationCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.emailAddress_ = emailAddress_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.InviteToOrganizationCall other) {
if (other == Sp.InviteToOrganizationCall.getDefaultInstance()) return this;
if (other.hasEmailAddress()) {
b0_ |= 0x00000001;
emailAddress_ = other.emailAddress_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEmailAddress()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.InviteToOrganizationCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.InviteToOrganizationCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object emailAddress_ = "";
public boolean hasEmailAddress() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailAddress() {
Object ref = emailAddress_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailAddress_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getEmailAddressBytes() {
Object ref = emailAddress_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailAddress_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setEmailAddress(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
public Builder clearEmailAddress() {
b0_ = (b0_ & ~0x00000001);
emailAddress_ = getDefaultInstance().getEmailAddress();
return this;
}
public Builder setEmailAddressBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailAddress_ = value;
return this;
}
}
static {
defaultInstance = new InviteToOrganizationCall(true);
defaultInstance.initFields();
}
}
public interface InviteToOrganizationReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasLocallyManaged();
boolean getLocallyManaged();
}
public static final class InviteToOrganizationReply extends
GeneratedMessageLite implements
InviteToOrganizationReplyOrBuilder {
private InviteToOrganizationReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private InviteToOrganizationReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final InviteToOrganizationReply defaultInstance;
public static InviteToOrganizationReply getDefaultInstance() {
return defaultInstance;
}
public InviteToOrganizationReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private InviteToOrganizationReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
locallyManaged_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<InviteToOrganizationReply> PARSER =
new AbstractParser<InviteToOrganizationReply>() {
public InviteToOrganizationReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new InviteToOrganizationReply(input, er);
}
};
@Override
public Parser<InviteToOrganizationReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int LOCALLY_MANAGED_FIELD_NUMBER = 1;
private boolean locallyManaged_;
public boolean hasLocallyManaged() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getLocallyManaged() {
return locallyManaged_;
}
private void initFields() {
locallyManaged_ = true;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBool(1, locallyManaged_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBoolSize(1, locallyManaged_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.InviteToOrganizationReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.InviteToOrganizationReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.InviteToOrganizationReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.InviteToOrganizationReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.InviteToOrganizationReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.InviteToOrganizationReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.InviteToOrganizationReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.InviteToOrganizationReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.InviteToOrganizationReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.InviteToOrganizationReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.InviteToOrganizationReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.InviteToOrganizationReply, Builder>
implements
Sp.InviteToOrganizationReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
locallyManaged_ = true;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.InviteToOrganizationReply getDefaultInstanceForType() {
return Sp.InviteToOrganizationReply.getDefaultInstance();
}
public Sp.InviteToOrganizationReply build() {
Sp.InviteToOrganizationReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.InviteToOrganizationReply buildPartial() {
Sp.InviteToOrganizationReply result = new Sp.InviteToOrganizationReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.locallyManaged_ = locallyManaged_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.InviteToOrganizationReply other) {
if (other == Sp.InviteToOrganizationReply.getDefaultInstance()) return this;
if (other.hasLocallyManaged()) {
setLocallyManaged(other.getLocallyManaged());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.InviteToOrganizationReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.InviteToOrganizationReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private boolean locallyManaged_ = true;
public boolean hasLocallyManaged() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getLocallyManaged() {
return locallyManaged_;
}
public Builder setLocallyManaged(boolean value) {
b0_ |= 0x00000001;
locallyManaged_ = value;
return this;
}
public Builder clearLocallyManaged() {
b0_ = (b0_ & ~0x00000001);
locallyManaged_ = true;
return this;
}
}
static {
defaultInstance = new InviteToOrganizationReply(true);
defaultInstance.initFields();
}
}
public interface AcceptOrganizationInvitationCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrganizationId();
int getOrganizationId();
}
public static final class AcceptOrganizationInvitationCall extends
GeneratedMessageLite implements
AcceptOrganizationInvitationCallOrBuilder {
private AcceptOrganizationInvitationCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AcceptOrganizationInvitationCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AcceptOrganizationInvitationCall defaultInstance;
public static AcceptOrganizationInvitationCall getDefaultInstance() {
return defaultInstance;
}
public AcceptOrganizationInvitationCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AcceptOrganizationInvitationCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
organizationId_ = input.readInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AcceptOrganizationInvitationCall> PARSER =
new AbstractParser<AcceptOrganizationInvitationCall>() {
public AcceptOrganizationInvitationCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AcceptOrganizationInvitationCall(input, er);
}
};
@Override
public Parser<AcceptOrganizationInvitationCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORGANIZATION_ID_FIELD_NUMBER = 1;
private int organizationId_;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getOrganizationId() {
return organizationId_;
}
private void initFields() {
organizationId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOrganizationId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeInt32(1, organizationId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeInt32Size(1, organizationId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AcceptOrganizationInvitationCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AcceptOrganizationInvitationCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AcceptOrganizationInvitationCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AcceptOrganizationInvitationCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AcceptOrganizationInvitationCall, Builder>
implements
Sp.AcceptOrganizationInvitationCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
organizationId_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AcceptOrganizationInvitationCall getDefaultInstanceForType() {
return Sp.AcceptOrganizationInvitationCall.getDefaultInstance();
}
public Sp.AcceptOrganizationInvitationCall build() {
Sp.AcceptOrganizationInvitationCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AcceptOrganizationInvitationCall buildPartial() {
Sp.AcceptOrganizationInvitationCall result = new Sp.AcceptOrganizationInvitationCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.organizationId_ = organizationId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AcceptOrganizationInvitationCall other) {
if (other == Sp.AcceptOrganizationInvitationCall.getDefaultInstance()) return this;
if (other.hasOrganizationId()) {
setOrganizationId(other.getOrganizationId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOrganizationId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AcceptOrganizationInvitationCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AcceptOrganizationInvitationCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int organizationId_ ;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getOrganizationId() {
return organizationId_;
}
public Builder setOrganizationId(int value) {
b0_ |= 0x00000001;
organizationId_ = value;
return this;
}
public Builder clearOrganizationId() {
b0_ = (b0_ & ~0x00000001);
organizationId_ = 0;
return this;
}
}
static {
defaultInstance = new AcceptOrganizationInvitationCall(true);
defaultInstance.initFields();
}
}
public interface DeleteOrganizationInvitationCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrganizationId();
int getOrganizationId();
}
public static final class DeleteOrganizationInvitationCall extends
GeneratedMessageLite implements
DeleteOrganizationInvitationCallOrBuilder {
private DeleteOrganizationInvitationCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DeleteOrganizationInvitationCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DeleteOrganizationInvitationCall defaultInstance;
public static DeleteOrganizationInvitationCall getDefaultInstance() {
return defaultInstance;
}
public DeleteOrganizationInvitationCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DeleteOrganizationInvitationCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
organizationId_ = input.readInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DeleteOrganizationInvitationCall> PARSER =
new AbstractParser<DeleteOrganizationInvitationCall>() {
public DeleteOrganizationInvitationCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DeleteOrganizationInvitationCall(input, er);
}
};
@Override
public Parser<DeleteOrganizationInvitationCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORGANIZATION_ID_FIELD_NUMBER = 1;
private int organizationId_;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getOrganizationId() {
return organizationId_;
}
private void initFields() {
organizationId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOrganizationId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeInt32(1, organizationId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeInt32Size(1, organizationId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DeleteOrganizationInvitationCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DeleteOrganizationInvitationCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteOrganizationInvitationCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DeleteOrganizationInvitationCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DeleteOrganizationInvitationCall, Builder>
implements
Sp.DeleteOrganizationInvitationCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
organizationId_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DeleteOrganizationInvitationCall getDefaultInstanceForType() {
return Sp.DeleteOrganizationInvitationCall.getDefaultInstance();
}
public Sp.DeleteOrganizationInvitationCall build() {
Sp.DeleteOrganizationInvitationCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DeleteOrganizationInvitationCall buildPartial() {
Sp.DeleteOrganizationInvitationCall result = new Sp.DeleteOrganizationInvitationCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.organizationId_ = organizationId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DeleteOrganizationInvitationCall other) {
if (other == Sp.DeleteOrganizationInvitationCall.getDefaultInstance()) return this;
if (other.hasOrganizationId()) {
setOrganizationId(other.getOrganizationId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOrganizationId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DeleteOrganizationInvitationCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DeleteOrganizationInvitationCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int organizationId_ ;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getOrganizationId() {
return organizationId_;
}
public Builder setOrganizationId(int value) {
b0_ |= 0x00000001;
organizationId_ = value;
return this;
}
public Builder clearOrganizationId() {
b0_ = (b0_ & ~0x00000001);
organizationId_ = 0;
return this;
}
}
static {
defaultInstance = new DeleteOrganizationInvitationCall(true);
defaultInstance.initFields();
}
}
public interface ShareFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasFolderName();
String getFolderName();
ByteString
getFolderNameBytes();
boolean hasShareId();
ByteString getShareId();
List<Common.PBSubjectPermissions> 
getSubjectPermissionsList();
Common.PBSubjectPermissions getSubjectPermissions(int index);
int getSubjectPermissionsCount();
boolean hasNote();
String getNote();
ByteString
getNoteBytes();
boolean hasExternal();
boolean getExternal();
boolean hasSuppressSharingRulesWarnings();
boolean getSuppressSharingRulesWarnings();
}
public static final class ShareFolderCall extends
GeneratedMessageLite implements
ShareFolderCallOrBuilder {
private ShareFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ShareFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ShareFolderCall defaultInstance;
public static ShareFolderCall getDefaultInstance() {
return defaultInstance;
}
public ShareFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ShareFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000004) == 0x00000004)) {
subjectPermissions_ = new ArrayList<Common.PBSubjectPermissions>();
mutable_b0_ |= 0x00000004;
}
subjectPermissions_.add(input.readMessage(Common.PBSubjectPermissions.PARSER, er));
break;
}
case 18: {
b0_ |= 0x00000002;
shareId_ = input.readBytes();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
folderName_ = bs;
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
note_ = bs;
break;
}
case 40: {
b0_ |= 0x00000008;
external_ = input.readBool();
break;
}
case 48: {
b0_ |= 0x00000010;
suppressSharingRulesWarnings_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000004) == 0x00000004)) {
subjectPermissions_ = Collections.unmodifiableList(subjectPermissions_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ShareFolderCall> PARSER =
new AbstractParser<ShareFolderCall>() {
public ShareFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ShareFolderCall(input, er);
}
};
@Override
public Parser<ShareFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int FOLDER_NAME_FIELD_NUMBER = 3;
private Object folderName_;
public boolean hasFolderName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFolderName() {
Object ref = folderName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
folderName_ = s;
}
return s;
}
}
public ByteString
getFolderNameBytes() {
Object ref = folderName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
folderName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int SHARE_ID_FIELD_NUMBER = 2;
private ByteString shareId_;
public boolean hasShareId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getShareId() {
return shareId_;
}
public static final int SUBJECT_PERMISSIONS_FIELD_NUMBER = 1;
private List<Common.PBSubjectPermissions> subjectPermissions_;
public List<Common.PBSubjectPermissions> getSubjectPermissionsList() {
return subjectPermissions_;
}
public List<? extends Common.PBSubjectPermissionsOrBuilder> 
getSubjectPermissionsOrBuilderList() {
return subjectPermissions_;
}
public int getSubjectPermissionsCount() {
return subjectPermissions_.size();
}
public Common.PBSubjectPermissions getSubjectPermissions(int index) {
return subjectPermissions_.get(index);
}
public Common.PBSubjectPermissionsOrBuilder getSubjectPermissionsOrBuilder(
int index) {
return subjectPermissions_.get(index);
}
public static final int NOTE_FIELD_NUMBER = 4;
private Object note_;
public boolean hasNote() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getNote() {
Object ref = note_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
note_ = s;
}
return s;
}
}
public ByteString
getNoteBytes() {
Object ref = note_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
note_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int EXTERNAL_FIELD_NUMBER = 5;
private boolean external_;
public boolean hasExternal() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getExternal() {
return external_;
}
public static final int SUPPRESS_SHARING_RULES_WARNINGS_FIELD_NUMBER = 6;
private boolean suppressSharingRulesWarnings_;
public boolean hasSuppressSharingRulesWarnings() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getSuppressSharingRulesWarnings() {
return suppressSharingRulesWarnings_;
}
private void initFields() {
folderName_ = "";
shareId_ = ByteString.EMPTY;
subjectPermissions_ = Collections.emptyList();
note_ = "";
external_ = false;
suppressSharingRulesWarnings_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasFolderName()) {
mii = 0;
return false;
}
if (!hasShareId()) {
mii = 0;
return false;
}
for (int i = 0; i < getSubjectPermissionsCount(); i++) {
if (!getSubjectPermissions(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < subjectPermissions_.size(); i++) {
output.writeMessage(1, subjectPermissions_.get(i));
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, shareId_);
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(3, getFolderNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(4, getNoteBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBool(5, external_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeBool(6, suppressSharingRulesWarnings_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < subjectPermissions_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, subjectPermissions_.get(i));
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, shareId_);
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(3, getFolderNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(4, getNoteBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBoolSize(5, external_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeBoolSize(6, suppressSharingRulesWarnings_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ShareFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ShareFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ShareFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ShareFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ShareFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ShareFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ShareFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ShareFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ShareFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ShareFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ShareFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ShareFolderCall, Builder>
implements
Sp.ShareFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
folderName_ = "";
b0_ = (b0_ & ~0x00000001);
shareId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
subjectPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000004);
note_ = "";
b0_ = (b0_ & ~0x00000008);
external_ = false;
b0_ = (b0_ & ~0x00000010);
suppressSharingRulesWarnings_ = false;
b0_ = (b0_ & ~0x00000020);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ShareFolderCall getDefaultInstanceForType() {
return Sp.ShareFolderCall.getDefaultInstance();
}
public Sp.ShareFolderCall build() {
Sp.ShareFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ShareFolderCall buildPartial() {
Sp.ShareFolderCall result = new Sp.ShareFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.folderName_ = folderName_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.shareId_ = shareId_;
if (((b0_ & 0x00000004) == 0x00000004)) {
subjectPermissions_ = Collections.unmodifiableList(subjectPermissions_);
b0_ = (b0_ & ~0x00000004);
}
result.subjectPermissions_ = subjectPermissions_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000004;
}
result.note_ = note_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000008;
}
result.external_ = external_;
if (((from_b0_ & 0x00000020) == 0x00000020)) {
to_b0_ |= 0x00000010;
}
result.suppressSharingRulesWarnings_ = suppressSharingRulesWarnings_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ShareFolderCall other) {
if (other == Sp.ShareFolderCall.getDefaultInstance()) return this;
if (other.hasFolderName()) {
b0_ |= 0x00000001;
folderName_ = other.folderName_;
}
if (other.hasShareId()) {
setShareId(other.getShareId());
}
if (!other.subjectPermissions_.isEmpty()) {
if (subjectPermissions_.isEmpty()) {
subjectPermissions_ = other.subjectPermissions_;
b0_ = (b0_ & ~0x00000004);
} else {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.addAll(other.subjectPermissions_);
}
}
if (other.hasNote()) {
b0_ |= 0x00000008;
note_ = other.note_;
}
if (other.hasExternal()) {
setExternal(other.getExternal());
}
if (other.hasSuppressSharingRulesWarnings()) {
setSuppressSharingRulesWarnings(other.getSuppressSharingRulesWarnings());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasFolderName()) {
return false;
}
if (!hasShareId()) {
return false;
}
for (int i = 0; i < getSubjectPermissionsCount(); i++) {
if (!getSubjectPermissions(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ShareFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ShareFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object folderName_ = "";
public boolean hasFolderName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFolderName() {
Object ref = folderName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
folderName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFolderNameBytes() {
Object ref = folderName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
folderName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFolderName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
folderName_ = value;
return this;
}
public Builder clearFolderName() {
b0_ = (b0_ & ~0x00000001);
folderName_ = getDefaultInstance().getFolderName();
return this;
}
public Builder setFolderNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
folderName_ = value;
return this;
}
private ByteString shareId_ = ByteString.EMPTY;
public boolean hasShareId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getShareId() {
return shareId_;
}
public Builder setShareId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
shareId_ = value;
return this;
}
public Builder clearShareId() {
b0_ = (b0_ & ~0x00000002);
shareId_ = getDefaultInstance().getShareId();
return this;
}
private List<Common.PBSubjectPermissions> subjectPermissions_ =
Collections.emptyList();
private void ensureSubjectPermissionsIsMutable() {
if (!((b0_ & 0x00000004) == 0x00000004)) {
subjectPermissions_ = new ArrayList<Common.PBSubjectPermissions>(subjectPermissions_);
b0_ |= 0x00000004;
}
}
public List<Common.PBSubjectPermissions> getSubjectPermissionsList() {
return Collections.unmodifiableList(subjectPermissions_);
}
public int getSubjectPermissionsCount() {
return subjectPermissions_.size();
}
public Common.PBSubjectPermissions getSubjectPermissions(int index) {
return subjectPermissions_.get(index);
}
public Builder setSubjectPermissions(
int index, Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.set(index, value);
return this;
}
public Builder setSubjectPermissions(
int index, Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.set(index, bdForValue.build());
return this;
}
public Builder addSubjectPermissions(Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(value);
return this;
}
public Builder addSubjectPermissions(
int index, Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(index, value);
return this;
}
public Builder addSubjectPermissions(
Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(bdForValue.build());
return this;
}
public Builder addSubjectPermissions(
int index, Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(index, bdForValue.build());
return this;
}
public Builder addAllSubjectPermissions(
Iterable<? extends Common.PBSubjectPermissions> values) {
ensureSubjectPermissionsIsMutable();
AbstractMessageLite.Builder.addAll(
values, subjectPermissions_);
return this;
}
public Builder clearSubjectPermissions() {
subjectPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder removeSubjectPermissions(int index) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.remove(index);
return this;
}
private Object note_ = "";
public boolean hasNote() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getNote() {
Object ref = note_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
note_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getNoteBytes() {
Object ref = note_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
note_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setNote(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
note_ = value;
return this;
}
public Builder clearNote() {
b0_ = (b0_ & ~0x00000008);
note_ = getDefaultInstance().getNote();
return this;
}
public Builder setNoteBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
note_ = value;
return this;
}
private boolean external_ ;
public boolean hasExternal() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getExternal() {
return external_;
}
public Builder setExternal(boolean value) {
b0_ |= 0x00000010;
external_ = value;
return this;
}
public Builder clearExternal() {
b0_ = (b0_ & ~0x00000010);
external_ = false;
return this;
}
private boolean suppressSharingRulesWarnings_ ;
public boolean hasSuppressSharingRulesWarnings() {
return ((b0_ & 0x00000020) == 0x00000020);
}
public boolean getSuppressSharingRulesWarnings() {
return suppressSharingRulesWarnings_;
}
public Builder setSuppressSharingRulesWarnings(boolean value) {
b0_ |= 0x00000020;
suppressSharingRulesWarnings_ = value;
return this;
}
public Builder clearSuppressSharingRulesWarnings() {
b0_ = (b0_ & ~0x00000020);
suppressSharingRulesWarnings_ = false;
return this;
}
}
static {
defaultInstance = new ShareFolderCall(true);
defaultInstance.initFields();
}
}
public interface JoinSharedFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSharedId();
ByteString getSharedId();
boolean hasExternal();
boolean getExternal();
}
public static final class JoinSharedFolderCall extends
GeneratedMessageLite implements
JoinSharedFolderCallOrBuilder {
private JoinSharedFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private JoinSharedFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final JoinSharedFolderCall defaultInstance;
public static JoinSharedFolderCall getDefaultInstance() {
return defaultInstance;
}
public JoinSharedFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private JoinSharedFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sharedId_ = input.readBytes();
break;
}
case 16: {
b0_ |= 0x00000002;
external_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<JoinSharedFolderCall> PARSER =
new AbstractParser<JoinSharedFolderCall>() {
public JoinSharedFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new JoinSharedFolderCall(input, er);
}
};
@Override
public Parser<JoinSharedFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_ID_FIELD_NUMBER = 1;
private ByteString sharedId_;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public static final int EXTERNAL_FIELD_NUMBER = 2;
private boolean external_;
public boolean hasExternal() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getExternal() {
return external_;
}
private void initFields() {
sharedId_ = ByteString.EMPTY;
external_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSharedId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sharedId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, external_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sharedId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, external_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.JoinSharedFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.JoinSharedFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.JoinSharedFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.JoinSharedFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.JoinSharedFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.JoinSharedFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.JoinSharedFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.JoinSharedFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.JoinSharedFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.JoinSharedFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.JoinSharedFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.JoinSharedFolderCall, Builder>
implements
Sp.JoinSharedFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
external_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.JoinSharedFolderCall getDefaultInstanceForType() {
return Sp.JoinSharedFolderCall.getDefaultInstance();
}
public Sp.JoinSharedFolderCall build() {
Sp.JoinSharedFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.JoinSharedFolderCall buildPartial() {
Sp.JoinSharedFolderCall result = new Sp.JoinSharedFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sharedId_ = sharedId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.external_ = external_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.JoinSharedFolderCall other) {
if (other == Sp.JoinSharedFolderCall.getDefaultInstance()) return this;
if (other.hasSharedId()) {
setSharedId(other.getSharedId());
}
if (other.hasExternal()) {
setExternal(other.getExternal());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSharedId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.JoinSharedFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.JoinSharedFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sharedId_ = ByteString.EMPTY;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public Builder setSharedId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sharedId_ = value;
return this;
}
public Builder clearSharedId() {
b0_ = (b0_ & ~0x00000001);
sharedId_ = getDefaultInstance().getSharedId();
return this;
}
private boolean external_ ;
public boolean hasExternal() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getExternal() {
return external_;
}
public Builder setExternal(boolean value) {
b0_ |= 0x00000002;
external_ = value;
return this;
}
public Builder clearExternal() {
b0_ = (b0_ & ~0x00000002);
external_ = false;
return this;
}
}
static {
defaultInstance = new JoinSharedFolderCall(true);
defaultInstance.initFields();
}
}
public interface IgnoreSharedFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSharedId();
ByteString getSharedId();
}
public static final class IgnoreSharedFolderCall extends
GeneratedMessageLite implements
IgnoreSharedFolderCallOrBuilder {
private IgnoreSharedFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private IgnoreSharedFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final IgnoreSharedFolderCall defaultInstance;
public static IgnoreSharedFolderCall getDefaultInstance() {
return defaultInstance;
}
public IgnoreSharedFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private IgnoreSharedFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sharedId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<IgnoreSharedFolderCall> PARSER =
new AbstractParser<IgnoreSharedFolderCall>() {
public IgnoreSharedFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new IgnoreSharedFolderCall(input, er);
}
};
@Override
public Parser<IgnoreSharedFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_ID_FIELD_NUMBER = 1;
private ByteString sharedId_;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
private void initFields() {
sharedId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSharedId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sharedId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sharedId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.IgnoreSharedFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.IgnoreSharedFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.IgnoreSharedFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.IgnoreSharedFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.IgnoreSharedFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.IgnoreSharedFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.IgnoreSharedFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.IgnoreSharedFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.IgnoreSharedFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.IgnoreSharedFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.IgnoreSharedFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.IgnoreSharedFolderCall, Builder>
implements
Sp.IgnoreSharedFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.IgnoreSharedFolderCall getDefaultInstanceForType() {
return Sp.IgnoreSharedFolderCall.getDefaultInstance();
}
public Sp.IgnoreSharedFolderCall build() {
Sp.IgnoreSharedFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.IgnoreSharedFolderCall buildPartial() {
Sp.IgnoreSharedFolderCall result = new Sp.IgnoreSharedFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sharedId_ = sharedId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.IgnoreSharedFolderCall other) {
if (other == Sp.IgnoreSharedFolderCall.getDefaultInstance()) return this;
if (other.hasSharedId()) {
setSharedId(other.getSharedId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSharedId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.IgnoreSharedFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.IgnoreSharedFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sharedId_ = ByteString.EMPTY;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public Builder setSharedId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sharedId_ = value;
return this;
}
public Builder clearSharedId() {
b0_ = (b0_ & ~0x00000001);
sharedId_ = getDefaultInstance().getSharedId();
return this;
}
}
static {
defaultInstance = new IgnoreSharedFolderCall(true);
defaultInstance.initFields();
}
}
public interface LeaveSharedFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSharedId();
ByteString getSharedId();
}
public static final class LeaveSharedFolderCall extends
GeneratedMessageLite implements
LeaveSharedFolderCallOrBuilder {
private LeaveSharedFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private LeaveSharedFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final LeaveSharedFolderCall defaultInstance;
public static LeaveSharedFolderCall getDefaultInstance() {
return defaultInstance;
}
public LeaveSharedFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private LeaveSharedFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sharedId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<LeaveSharedFolderCall> PARSER =
new AbstractParser<LeaveSharedFolderCall>() {
public LeaveSharedFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new LeaveSharedFolderCall(input, er);
}
};
@Override
public Parser<LeaveSharedFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_ID_FIELD_NUMBER = 1;
private ByteString sharedId_;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
private void initFields() {
sharedId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSharedId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sharedId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sharedId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.LeaveSharedFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.LeaveSharedFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.LeaveSharedFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.LeaveSharedFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.LeaveSharedFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.LeaveSharedFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.LeaveSharedFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.LeaveSharedFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.LeaveSharedFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.LeaveSharedFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.LeaveSharedFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.LeaveSharedFolderCall, Builder>
implements
Sp.LeaveSharedFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.LeaveSharedFolderCall getDefaultInstanceForType() {
return Sp.LeaveSharedFolderCall.getDefaultInstance();
}
public Sp.LeaveSharedFolderCall build() {
Sp.LeaveSharedFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.LeaveSharedFolderCall buildPartial() {
Sp.LeaveSharedFolderCall result = new Sp.LeaveSharedFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sharedId_ = sharedId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.LeaveSharedFolderCall other) {
if (other == Sp.LeaveSharedFolderCall.getDefaultInstance()) return this;
if (other.hasSharedId()) {
setSharedId(other.getSharedId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSharedId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.LeaveSharedFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.LeaveSharedFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sharedId_ = ByteString.EMPTY;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public Builder setSharedId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sharedId_ = value;
return this;
}
public Builder clearSharedId() {
b0_ = (b0_ & ~0x00000001);
sharedId_ = getDefaultInstance().getSharedId();
return this;
}
}
static {
defaultInstance = new LeaveSharedFolderCall(true);
defaultInstance.initFields();
}
}
public interface SetSharedFolderNameCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasShareId();
ByteString getShareId();
boolean hasFolderName();
String getFolderName();
ByteString
getFolderNameBytes();
}
public static final class SetSharedFolderNameCall extends
GeneratedMessageLite implements
SetSharedFolderNameCallOrBuilder {
private SetSharedFolderNameCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetSharedFolderNameCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetSharedFolderNameCall defaultInstance;
public static SetSharedFolderNameCall getDefaultInstance() {
return defaultInstance;
}
public SetSharedFolderNameCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetSharedFolderNameCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
shareId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
folderName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetSharedFolderNameCall> PARSER =
new AbstractParser<SetSharedFolderNameCall>() {
public SetSharedFolderNameCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetSharedFolderNameCall(input, er);
}
};
@Override
public Parser<SetSharedFolderNameCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARE_ID_FIELD_NUMBER = 1;
private ByteString shareId_;
public boolean hasShareId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getShareId() {
return shareId_;
}
public static final int FOLDER_NAME_FIELD_NUMBER = 2;
private Object folderName_;
public boolean hasFolderName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFolderName() {
Object ref = folderName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
folderName_ = s;
}
return s;
}
}
public ByteString
getFolderNameBytes() {
Object ref = folderName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
folderName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
shareId_ = ByteString.EMPTY;
folderName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasShareId()) {
mii = 0;
return false;
}
if (!hasFolderName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, shareId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getFolderNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, shareId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getFolderNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetSharedFolderNameCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetSharedFolderNameCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetSharedFolderNameCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetSharedFolderNameCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetSharedFolderNameCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetSharedFolderNameCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetSharedFolderNameCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetSharedFolderNameCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetSharedFolderNameCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetSharedFolderNameCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetSharedFolderNameCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetSharedFolderNameCall, Builder>
implements
Sp.SetSharedFolderNameCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
shareId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
folderName_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetSharedFolderNameCall getDefaultInstanceForType() {
return Sp.SetSharedFolderNameCall.getDefaultInstance();
}
public Sp.SetSharedFolderNameCall build() {
Sp.SetSharedFolderNameCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetSharedFolderNameCall buildPartial() {
Sp.SetSharedFolderNameCall result = new Sp.SetSharedFolderNameCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.shareId_ = shareId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.folderName_ = folderName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetSharedFolderNameCall other) {
if (other == Sp.SetSharedFolderNameCall.getDefaultInstance()) return this;
if (other.hasShareId()) {
setShareId(other.getShareId());
}
if (other.hasFolderName()) {
b0_ |= 0x00000002;
folderName_ = other.folderName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasShareId()) {
return false;
}
if (!hasFolderName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetSharedFolderNameCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetSharedFolderNameCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString shareId_ = ByteString.EMPTY;
public boolean hasShareId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getShareId() {
return shareId_;
}
public Builder setShareId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
shareId_ = value;
return this;
}
public Builder clearShareId() {
b0_ = (b0_ & ~0x00000001);
shareId_ = getDefaultInstance().getShareId();
return this;
}
private Object folderName_ = "";
public boolean hasFolderName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFolderName() {
Object ref = folderName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
folderName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFolderNameBytes() {
Object ref = folderName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
folderName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFolderName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
folderName_ = value;
return this;
}
public Builder clearFolderName() {
b0_ = (b0_ & ~0x00000002);
folderName_ = getDefaultInstance().getFolderName();
return this;
}
public Builder setFolderNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
folderName_ = value;
return this;
}
}
static {
defaultInstance = new SetSharedFolderNameCall(true);
defaultInstance.initFields();
}
}
public interface ListPendingFolderInvitationsReplyOrBuilder extends
MessageLiteOrBuilder {
List<Common.PBFolderInvitation> 
getInvitationList();
Common.PBFolderInvitation getInvitation(int index);
int getInvitationCount();
}
public static final class ListPendingFolderInvitationsReply extends
GeneratedMessageLite implements
ListPendingFolderInvitationsReplyOrBuilder {
private ListPendingFolderInvitationsReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListPendingFolderInvitationsReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListPendingFolderInvitationsReply defaultInstance;
public static ListPendingFolderInvitationsReply getDefaultInstance() {
return defaultInstance;
}
public ListPendingFolderInvitationsReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListPendingFolderInvitationsReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
invitation_ = new ArrayList<Common.PBFolderInvitation>();
mutable_b0_ |= 0x00000001;
}
invitation_.add(input.readMessage(Common.PBFolderInvitation.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
invitation_ = Collections.unmodifiableList(invitation_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListPendingFolderInvitationsReply> PARSER =
new AbstractParser<ListPendingFolderInvitationsReply>() {
public ListPendingFolderInvitationsReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListPendingFolderInvitationsReply(input, er);
}
};
@Override
public Parser<ListPendingFolderInvitationsReply> getParserForType() {
return PARSER;
}
public static final int INVITATION_FIELD_NUMBER = 1;
private List<Common.PBFolderInvitation> invitation_;
public List<Common.PBFolderInvitation> getInvitationList() {
return invitation_;
}
public List<? extends Common.PBFolderInvitationOrBuilder> 
getInvitationOrBuilderList() {
return invitation_;
}
public int getInvitationCount() {
return invitation_.size();
}
public Common.PBFolderInvitation getInvitation(int index) {
return invitation_.get(index);
}
public Common.PBFolderInvitationOrBuilder getInvitationOrBuilder(
int index) {
return invitation_.get(index);
}
private void initFields() {
invitation_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getInvitationCount(); i++) {
if (!getInvitation(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < invitation_.size(); i++) {
output.writeMessage(1, invitation_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < invitation_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, invitation_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListPendingFolderInvitationsReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListPendingFolderInvitationsReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListPendingFolderInvitationsReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListPendingFolderInvitationsReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListPendingFolderInvitationsReply, Builder>
implements
Sp.ListPendingFolderInvitationsReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
invitation_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListPendingFolderInvitationsReply getDefaultInstanceForType() {
return Sp.ListPendingFolderInvitationsReply.getDefaultInstance();
}
public Sp.ListPendingFolderInvitationsReply build() {
Sp.ListPendingFolderInvitationsReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListPendingFolderInvitationsReply buildPartial() {
Sp.ListPendingFolderInvitationsReply result = new Sp.ListPendingFolderInvitationsReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
invitation_ = Collections.unmodifiableList(invitation_);
b0_ = (b0_ & ~0x00000001);
}
result.invitation_ = invitation_;
return result;
}
public Builder mergeFrom(Sp.ListPendingFolderInvitationsReply other) {
if (other == Sp.ListPendingFolderInvitationsReply.getDefaultInstance()) return this;
if (!other.invitation_.isEmpty()) {
if (invitation_.isEmpty()) {
invitation_ = other.invitation_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureInvitationIsMutable();
invitation_.addAll(other.invitation_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getInvitationCount(); i++) {
if (!getInvitation(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListPendingFolderInvitationsReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListPendingFolderInvitationsReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Common.PBFolderInvitation> invitation_ =
Collections.emptyList();
private void ensureInvitationIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
invitation_ = new ArrayList<Common.PBFolderInvitation>(invitation_);
b0_ |= 0x00000001;
}
}
public List<Common.PBFolderInvitation> getInvitationList() {
return Collections.unmodifiableList(invitation_);
}
public int getInvitationCount() {
return invitation_.size();
}
public Common.PBFolderInvitation getInvitation(int index) {
return invitation_.get(index);
}
public Builder setInvitation(
int index, Common.PBFolderInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureInvitationIsMutable();
invitation_.set(index, value);
return this;
}
public Builder setInvitation(
int index, Common.PBFolderInvitation.Builder bdForValue) {
ensureInvitationIsMutable();
invitation_.set(index, bdForValue.build());
return this;
}
public Builder addInvitation(Common.PBFolderInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureInvitationIsMutable();
invitation_.add(value);
return this;
}
public Builder addInvitation(
int index, Common.PBFolderInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureInvitationIsMutable();
invitation_.add(index, value);
return this;
}
public Builder addInvitation(
Common.PBFolderInvitation.Builder bdForValue) {
ensureInvitationIsMutable();
invitation_.add(bdForValue.build());
return this;
}
public Builder addInvitation(
int index, Common.PBFolderInvitation.Builder bdForValue) {
ensureInvitationIsMutable();
invitation_.add(index, bdForValue.build());
return this;
}
public Builder addAllInvitation(
Iterable<? extends Common.PBFolderInvitation> values) {
ensureInvitationIsMutable();
AbstractMessageLite.Builder.addAll(
values, invitation_);
return this;
}
public Builder clearInvitation() {
invitation_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeInvitation(int index) {
ensureInvitationIsMutable();
invitation_.remove(index);
return this;
}
}
static {
defaultInstance = new ListPendingFolderInvitationsReply(true);
defaultInstance.initFields();
}
}
public interface EmailUserCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSubject();
String getSubject();
ByteString
getSubjectBytes();
boolean hasBody();
String getBody();
ByteString
getBodyBytes();
}
public static final class EmailUserCall extends
GeneratedMessageLite implements
EmailUserCallOrBuilder {
private EmailUserCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private EmailUserCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final EmailUserCall defaultInstance;
public static EmailUserCall getDefaultInstance() {
return defaultInstance;
}
public EmailUserCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private EmailUserCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
subject_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
body_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<EmailUserCall> PARSER =
new AbstractParser<EmailUserCall>() {
public EmailUserCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new EmailUserCall(input, er);
}
};
@Override
public Parser<EmailUserCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SUBJECT_FIELD_NUMBER = 1;
private Object subject_;
public boolean hasSubject() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSubject() {
Object ref = subject_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int BODY_FIELD_NUMBER = 2;
private Object body_;
public boolean hasBody() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getBody() {
Object ref = body_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
body_ = s;
}
return s;
}
}
public ByteString
getBodyBytes() {
Object ref = body_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
body_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
subject_ = "";
body_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSubject()) {
mii = 0;
return false;
}
if (!hasBody()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getSubjectBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getBodyBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getSubjectBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getBodyBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.EmailUserCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.EmailUserCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.EmailUserCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.EmailUserCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.EmailUserCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.EmailUserCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.EmailUserCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.EmailUserCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.EmailUserCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.EmailUserCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.EmailUserCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.EmailUserCall, Builder>
implements
Sp.EmailUserCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
subject_ = "";
b0_ = (b0_ & ~0x00000001);
body_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.EmailUserCall getDefaultInstanceForType() {
return Sp.EmailUserCall.getDefaultInstance();
}
public Sp.EmailUserCall build() {
Sp.EmailUserCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.EmailUserCall buildPartial() {
Sp.EmailUserCall result = new Sp.EmailUserCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.subject_ = subject_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.body_ = body_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.EmailUserCall other) {
if (other == Sp.EmailUserCall.getDefaultInstance()) return this;
if (other.hasSubject()) {
b0_ |= 0x00000001;
subject_ = other.subject_;
}
if (other.hasBody()) {
b0_ |= 0x00000002;
body_ = other.body_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSubject()) {
return false;
}
if (!hasBody()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.EmailUserCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.EmailUserCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object subject_ = "";
public boolean hasSubject() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSubject() {
Object ref = subject_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSubject(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
subject_ = value;
return this;
}
public Builder clearSubject() {
b0_ = (b0_ & ~0x00000001);
subject_ = getDefaultInstance().getSubject();
return this;
}
public Builder setSubjectBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
subject_ = value;
return this;
}
private Object body_ = "";
public boolean hasBody() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getBody() {
Object ref = body_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
body_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getBodyBytes() {
Object ref = body_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
body_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setBody(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
body_ = value;
return this;
}
public Builder clearBody() {
b0_ = (b0_ & ~0x00000002);
body_ = getDefaultInstance().getBody();
return this;
}
public Builder setBodyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
body_ = value;
return this;
}
}
static {
defaultInstance = new EmailUserCall(true);
defaultInstance.initFields();
}
}
public interface GetUserPreferencesCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
}
public static final class GetUserPreferencesCall extends
GeneratedMessageLite implements
GetUserPreferencesCallOrBuilder {
private GetUserPreferencesCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUserPreferencesCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUserPreferencesCall defaultInstance;
public static GetUserPreferencesCall getDefaultInstance() {
return defaultInstance;
}
public GetUserPreferencesCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUserPreferencesCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUserPreferencesCall> PARSER =
new AbstractParser<GetUserPreferencesCall>() {
public GetUserPreferencesCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUserPreferencesCall(input, er);
}
};
@Override
public Parser<GetUserPreferencesCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUserPreferencesCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserPreferencesCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserPreferencesCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserPreferencesCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserPreferencesCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserPreferencesCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUserPreferencesCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUserPreferencesCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUserPreferencesCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserPreferencesCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUserPreferencesCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUserPreferencesCall, Builder>
implements
Sp.GetUserPreferencesCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUserPreferencesCall getDefaultInstanceForType() {
return Sp.GetUserPreferencesCall.getDefaultInstance();
}
public Sp.GetUserPreferencesCall build() {
Sp.GetUserPreferencesCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUserPreferencesCall buildPartial() {
Sp.GetUserPreferencesCall result = new Sp.GetUserPreferencesCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUserPreferencesCall other) {
if (other == Sp.GetUserPreferencesCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUserPreferencesCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUserPreferencesCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
}
static {
defaultInstance = new GetUserPreferencesCall(true);
defaultInstance.initFields();
}
}
public interface GetUserPreferencesReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
boolean hasSignupDate();
long getSignupDate();
boolean hasTwoFactorEnforced();
boolean getTwoFactorEnforced();
}
public static final class GetUserPreferencesReply extends
GeneratedMessageLite implements
GetUserPreferencesReplyOrBuilder {
private GetUserPreferencesReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUserPreferencesReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUserPreferencesReply defaultInstance;
public static GetUserPreferencesReply getDefaultInstance() {
return defaultInstance;
}
public GetUserPreferencesReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUserPreferencesReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
firstName_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
lastName_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
deviceName_ = bs;
break;
}
case 32: {
b0_ |= 0x00000008;
signupDate_ = input.readUInt64();
break;
}
case 40: {
b0_ |= 0x00000010;
twoFactorEnforced_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUserPreferencesReply> PARSER =
new AbstractParser<GetUserPreferencesReply>() {
public GetUserPreferencesReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUserPreferencesReply(input, er);
}
};
@Override
public Parser<GetUserPreferencesReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int FIRST_NAME_FIELD_NUMBER = 1;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LAST_NAME_FIELD_NUMBER = 2;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DEVICE_NAME_FIELD_NUMBER = 3;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int SIGNUP_DATE_FIELD_NUMBER = 4;
private long signupDate_;
public boolean hasSignupDate() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public long getSignupDate() {
return signupDate_;
}
public static final int TWO_FACTOR_ENFORCED_FIELD_NUMBER = 5;
private boolean twoFactorEnforced_;
public boolean hasTwoFactorEnforced() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getTwoFactorEnforced() {
return twoFactorEnforced_;
}
private void initFields() {
firstName_ = "";
lastName_ = "";
deviceName_ = "";
signupDate_ = 0L;
twoFactorEnforced_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasFirstName()) {
mii = 0;
return false;
}
if (!hasLastName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getFirstNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getLastNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getDeviceNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeUInt64(4, signupDate_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeBool(5, twoFactorEnforced_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getFirstNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getLastNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getDeviceNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeUInt64Size(4, signupDate_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeBoolSize(5, twoFactorEnforced_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUserPreferencesReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserPreferencesReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserPreferencesReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserPreferencesReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserPreferencesReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserPreferencesReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUserPreferencesReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUserPreferencesReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUserPreferencesReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserPreferencesReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUserPreferencesReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUserPreferencesReply, Builder>
implements
Sp.GetUserPreferencesReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
firstName_ = "";
b0_ = (b0_ & ~0x00000001);
lastName_ = "";
b0_ = (b0_ & ~0x00000002);
deviceName_ = "";
b0_ = (b0_ & ~0x00000004);
signupDate_ = 0L;
b0_ = (b0_ & ~0x00000008);
twoFactorEnforced_ = false;
b0_ = (b0_ & ~0x00000010);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUserPreferencesReply getDefaultInstanceForType() {
return Sp.GetUserPreferencesReply.getDefaultInstance();
}
public Sp.GetUserPreferencesReply build() {
Sp.GetUserPreferencesReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUserPreferencesReply buildPartial() {
Sp.GetUserPreferencesReply result = new Sp.GetUserPreferencesReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.lastName_ = lastName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.deviceName_ = deviceName_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.signupDate_ = signupDate_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.twoFactorEnforced_ = twoFactorEnforced_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUserPreferencesReply other) {
if (other == Sp.GetUserPreferencesReply.getDefaultInstance()) return this;
if (other.hasFirstName()) {
b0_ |= 0x00000001;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000002;
lastName_ = other.lastName_;
}
if (other.hasDeviceName()) {
b0_ |= 0x00000004;
deviceName_ = other.deviceName_;
}
if (other.hasSignupDate()) {
setSignupDate(other.getSignupDate());
}
if (other.hasTwoFactorEnforced()) {
setTwoFactorEnforced(other.getTwoFactorEnforced());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasFirstName()) {
return false;
}
if (!hasLastName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUserPreferencesReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUserPreferencesReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000001);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000002);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
lastName_ = value;
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000004);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
deviceName_ = value;
return this;
}
private long signupDate_ ;
public boolean hasSignupDate() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public long getSignupDate() {
return signupDate_;
}
public Builder setSignupDate(long value) {
b0_ |= 0x00000008;
signupDate_ = value;
return this;
}
public Builder clearSignupDate() {
b0_ = (b0_ & ~0x00000008);
signupDate_ = 0L;
return this;
}
private boolean twoFactorEnforced_ ;
public boolean hasTwoFactorEnforced() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getTwoFactorEnforced() {
return twoFactorEnforced_;
}
public Builder setTwoFactorEnforced(boolean value) {
b0_ |= 0x00000010;
twoFactorEnforced_ = value;
return this;
}
public Builder clearTwoFactorEnforced() {
b0_ = (b0_ & ~0x00000010);
twoFactorEnforced_ = false;
return this;
}
}
static {
defaultInstance = new GetUserPreferencesReply(true);
defaultInstance.initFields();
}
}
public interface GetUserSettingsTokenReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasToken();
String getToken();
ByteString
getTokenBytes();
}
public static final class GetUserSettingsTokenReply extends
GeneratedMessageLite implements
GetUserSettingsTokenReplyOrBuilder {
private GetUserSettingsTokenReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUserSettingsTokenReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUserSettingsTokenReply defaultInstance;
public static GetUserSettingsTokenReply getDefaultInstance() {
return defaultInstance;
}
public GetUserSettingsTokenReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUserSettingsTokenReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
token_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUserSettingsTokenReply> PARSER =
new AbstractParser<GetUserSettingsTokenReply>() {
public GetUserSettingsTokenReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUserSettingsTokenReply(input, er);
}
};
@Override
public Parser<GetUserSettingsTokenReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int TOKEN_FIELD_NUMBER = 1;
private Object token_;
public boolean hasToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getToken() {
Object ref = token_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
token_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getTokenBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getTokenBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUserSettingsTokenReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserSettingsTokenReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserSettingsTokenReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserSettingsTokenReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserSettingsTokenReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserSettingsTokenReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUserSettingsTokenReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUserSettingsTokenReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUserSettingsTokenReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserSettingsTokenReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUserSettingsTokenReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUserSettingsTokenReply, Builder>
implements
Sp.GetUserSettingsTokenReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
token_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUserSettingsTokenReply getDefaultInstanceForType() {
return Sp.GetUserSettingsTokenReply.getDefaultInstance();
}
public Sp.GetUserSettingsTokenReply build() {
Sp.GetUserSettingsTokenReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUserSettingsTokenReply buildPartial() {
Sp.GetUserSettingsTokenReply result = new Sp.GetUserSettingsTokenReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.token_ = token_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUserSettingsTokenReply other) {
if (other == Sp.GetUserSettingsTokenReply.getDefaultInstance()) return this;
if (other.hasToken()) {
b0_ |= 0x00000001;
token_ = other.token_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUserSettingsTokenReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUserSettingsTokenReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object token_ = "";
public boolean hasToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getToken() {
Object ref = token_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
token_ = value;
return this;
}
public Builder clearToken() {
b0_ = (b0_ & ~0x00000001);
token_ = getDefaultInstance().getToken();
return this;
}
public Builder setTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
token_ = value;
return this;
}
}
static {
defaultInstance = new GetUserSettingsTokenReply(true);
defaultInstance.initFields();
}
}
public interface SetUserSettingsTokenCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasToken();
String getToken();
ByteString
getTokenBytes();
}
public static final class SetUserSettingsTokenCall extends
GeneratedMessageLite implements
SetUserSettingsTokenCallOrBuilder {
private SetUserSettingsTokenCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUserSettingsTokenCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUserSettingsTokenCall defaultInstance;
public static SetUserSettingsTokenCall getDefaultInstance() {
return defaultInstance;
}
public SetUserSettingsTokenCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUserSettingsTokenCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
token_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUserSettingsTokenCall> PARSER =
new AbstractParser<SetUserSettingsTokenCall>() {
public SetUserSettingsTokenCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUserSettingsTokenCall(input, er);
}
};
@Override
public Parser<SetUserSettingsTokenCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int TOKEN_FIELD_NUMBER = 1;
private Object token_;
public boolean hasToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getToken() {
Object ref = token_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
token_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasToken()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getTokenBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getTokenBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUserSettingsTokenCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUserSettingsTokenCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUserSettingsTokenCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUserSettingsTokenCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUserSettingsTokenCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUserSettingsTokenCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUserSettingsTokenCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUserSettingsTokenCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUserSettingsTokenCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUserSettingsTokenCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUserSettingsTokenCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUserSettingsTokenCall, Builder>
implements
Sp.SetUserSettingsTokenCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
token_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUserSettingsTokenCall getDefaultInstanceForType() {
return Sp.SetUserSettingsTokenCall.getDefaultInstance();
}
public Sp.SetUserSettingsTokenCall build() {
Sp.SetUserSettingsTokenCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUserSettingsTokenCall buildPartial() {
Sp.SetUserSettingsTokenCall result = new Sp.SetUserSettingsTokenCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.token_ = token_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUserSettingsTokenCall other) {
if (other == Sp.SetUserSettingsTokenCall.getDefaultInstance()) return this;
if (other.hasToken()) {
b0_ |= 0x00000001;
token_ = other.token_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasToken()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUserSettingsTokenCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUserSettingsTokenCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object token_ = "";
public boolean hasToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getToken() {
Object ref = token_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
token_ = value;
return this;
}
public Builder clearToken() {
b0_ = (b0_ & ~0x00000001);
token_ = getDefaultInstance().getToken();
return this;
}
public Builder setTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
token_ = value;
return this;
}
}
static {
defaultInstance = new SetUserSettingsTokenCall(true);
defaultInstance.initFields();
}
}
public interface SetUserPreferencesCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
}
public static final class SetUserPreferencesCall extends
GeneratedMessageLite implements
SetUserPreferencesCallOrBuilder {
private SetUserPreferencesCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUserPreferencesCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUserPreferencesCall defaultInstance;
public static SetUserPreferencesCall getDefaultInstance() {
return defaultInstance;
}
public SetUserPreferencesCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUserPreferencesCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
firstName_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
lastName_ = bs;
break;
}
case 34: {
b0_ |= 0x00000008;
deviceId_ = input.readBytes();
break;
}
case 42: {
ByteString bs = input.readBytes();
b0_ |= 0x00000010;
deviceName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUserPreferencesCall> PARSER =
new AbstractParser<SetUserPreferencesCall>() {
public SetUserPreferencesCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUserPreferencesCall(input, er);
}
};
@Override
public Parser<SetUserPreferencesCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int FIRST_NAME_FIELD_NUMBER = 2;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LAST_NAME_FIELD_NUMBER = 3;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DEVICE_ID_FIELD_NUMBER = 4;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int DEVICE_NAME_FIELD_NUMBER = 5;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userId_ = "";
firstName_ = "";
lastName_ = "";
deviceId_ = ByteString.EMPTY;
deviceName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, deviceId_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeBytes(5, getDeviceNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, deviceId_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeBytesSize(5, getDeviceNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUserPreferencesCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUserPreferencesCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUserPreferencesCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUserPreferencesCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUserPreferencesCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUserPreferencesCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUserPreferencesCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUserPreferencesCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUserPreferencesCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUserPreferencesCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUserPreferencesCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUserPreferencesCall, Builder>
implements
Sp.SetUserPreferencesCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
firstName_ = "";
b0_ = (b0_ & ~0x00000002);
lastName_ = "";
b0_ = (b0_ & ~0x00000004);
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000008);
deviceName_ = "";
b0_ = (b0_ & ~0x00000010);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUserPreferencesCall getDefaultInstanceForType() {
return Sp.SetUserPreferencesCall.getDefaultInstance();
}
public Sp.SetUserPreferencesCall build() {
Sp.SetUserPreferencesCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUserPreferencesCall buildPartial() {
Sp.SetUserPreferencesCall result = new Sp.SetUserPreferencesCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.lastName_ = lastName_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.deviceName_ = deviceName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUserPreferencesCall other) {
if (other == Sp.SetUserPreferencesCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasFirstName()) {
b0_ |= 0x00000002;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000004;
lastName_ = other.lastName_;
}
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasDeviceName()) {
b0_ |= 0x00000010;
deviceName_ = other.deviceName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUserPreferencesCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUserPreferencesCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000002);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000004);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000008);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000010;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000010);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000010;
deviceName_ = value;
return this;
}
}
static {
defaultInstance = new SetUserPreferencesCall(true);
defaultInstance.initFields();
}
}
public interface GetACLCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasEpoch();
long getEpoch();
}
public static final class GetACLCall extends
GeneratedMessageLite implements
GetACLCallOrBuilder {
private GetACLCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetACLCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetACLCall defaultInstance;
public static GetACLCall getDefaultInstance() {
return defaultInstance;
}
public GetACLCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetACLCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
epoch_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetACLCall> PARSER =
new AbstractParser<GetACLCall>() {
public GetACLCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetACLCall(input, er);
}
};
@Override
public Parser<GetACLCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int EPOCH_FIELD_NUMBER = 1;
private long epoch_;
public boolean hasEpoch() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getEpoch() {
return epoch_;
}
private void initFields() {
epoch_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEpoch()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt64(1, epoch_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt64Size(1, epoch_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetACLCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetACLCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetACLCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetACLCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetACLCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetACLCall, Builder>
implements
Sp.GetACLCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
epoch_ = 0L;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetACLCall getDefaultInstanceForType() {
return Sp.GetACLCall.getDefaultInstance();
}
public Sp.GetACLCall build() {
Sp.GetACLCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetACLCall buildPartial() {
Sp.GetACLCall result = new Sp.GetACLCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.epoch_ = epoch_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetACLCall other) {
if (other == Sp.GetACLCall.getDefaultInstance()) return this;
if (other.hasEpoch()) {
setEpoch(other.getEpoch());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEpoch()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetACLCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetACLCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private long epoch_ ;
public boolean hasEpoch() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getEpoch() {
return epoch_;
}
public Builder setEpoch(long value) {
b0_ |= 0x00000001;
epoch_ = value;
return this;
}
public Builder clearEpoch() {
b0_ = (b0_ & ~0x00000001);
epoch_ = 0L;
return this;
}
}
static {
defaultInstance = new GetACLCall(true);
defaultInstance.initFields();
}
}
public interface GetACLReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.GetACLReply.PBStoreACL> 
getStoreAclList();
Sp.GetACLReply.PBStoreACL getStoreAcl(int index);
int getStoreAclCount();
boolean hasEpoch();
long getEpoch();
}
public static final class GetACLReply extends
GeneratedMessageLite implements
GetACLReplyOrBuilder {
private GetACLReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetACLReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetACLReply defaultInstance;
public static GetACLReply getDefaultInstance() {
return defaultInstance;
}
public GetACLReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetACLReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
storeAcl_ = new ArrayList<Sp.GetACLReply.PBStoreACL>();
mutable_b0_ |= 0x00000001;
}
storeAcl_.add(input.readMessage(Sp.GetACLReply.PBStoreACL.PARSER, er));
break;
}
case 16: {
b0_ |= 0x00000001;
epoch_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
storeAcl_ = Collections.unmodifiableList(storeAcl_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetACLReply> PARSER =
new AbstractParser<GetACLReply>() {
public GetACLReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetACLReply(input, er);
}
};
@Override
public Parser<GetACLReply> getParserForType() {
return PARSER;
}
public interface PBStoreACLOrBuilder extends
MessageLiteOrBuilder {
boolean hasStoreId();
ByteString getStoreId();
List<Common.PBSubjectPermissions> 
getSubjectPermissionsList();
Common.PBSubjectPermissions getSubjectPermissions(int index);
int getSubjectPermissionsCount();
boolean hasExternal();
boolean getExternal();
boolean hasName();
String getName();
ByteString
getNameBytes();
}
public static final class PBStoreACL extends
GeneratedMessageLite implements
PBStoreACLOrBuilder {
private PBStoreACL(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBStoreACL(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBStoreACL defaultInstance;
public static PBStoreACL getDefaultInstance() {
return defaultInstance;
}
public PBStoreACL getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBStoreACL(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
storeId_ = input.readBytes();
break;
}
case 18: {
if (!((mutable_b0_ & 0x00000002) == 0x00000002)) {
subjectPermissions_ = new ArrayList<Common.PBSubjectPermissions>();
mutable_b0_ |= 0x00000002;
}
subjectPermissions_.add(input.readMessage(Common.PBSubjectPermissions.PARSER, er));
break;
}
case 24: {
b0_ |= 0x00000002;
external_ = input.readBool();
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
name_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000002) == 0x00000002)) {
subjectPermissions_ = Collections.unmodifiableList(subjectPermissions_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBStoreACL> PARSER =
new AbstractParser<PBStoreACL>() {
public PBStoreACL parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBStoreACL(input, er);
}
};
@Override
public Parser<PBStoreACL> getParserForType() {
return PARSER;
}
private int b0_;
public static final int STORE_ID_FIELD_NUMBER = 1;
private ByteString storeId_;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public static final int SUBJECT_PERMISSIONS_FIELD_NUMBER = 2;
private List<Common.PBSubjectPermissions> subjectPermissions_;
public List<Common.PBSubjectPermissions> getSubjectPermissionsList() {
return subjectPermissions_;
}
public List<? extends Common.PBSubjectPermissionsOrBuilder> 
getSubjectPermissionsOrBuilderList() {
return subjectPermissions_;
}
public int getSubjectPermissionsCount() {
return subjectPermissions_.size();
}
public Common.PBSubjectPermissions getSubjectPermissions(int index) {
return subjectPermissions_.get(index);
}
public Common.PBSubjectPermissionsOrBuilder getSubjectPermissionsOrBuilder(
int index) {
return subjectPermissions_.get(index);
}
public static final int EXTERNAL_FIELD_NUMBER = 3;
private boolean external_;
public boolean hasExternal() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getExternal() {
return external_;
}
public static final int NAME_FIELD_NUMBER = 4;
private Object name_;
public boolean hasName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getName() {
Object ref = name_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
storeId_ = ByteString.EMPTY;
subjectPermissions_ = Collections.emptyList();
external_ = false;
name_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasStoreId()) {
mii = 0;
return false;
}
if (!hasExternal()) {
mii = 0;
return false;
}
if (!hasName()) {
mii = 0;
return false;
}
for (int i = 0; i < getSubjectPermissionsCount(); i++) {
if (!getSubjectPermissions(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, storeId_);
}
for (int i = 0; i < subjectPermissions_.size(); i++) {
output.writeMessage(2, subjectPermissions_.get(i));
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(3, external_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(4, getNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, storeId_);
}
for (int i = 0; i < subjectPermissions_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(2, subjectPermissions_.get(i));
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(3, external_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(4, getNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetACLReply.PBStoreACL parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetACLReply.PBStoreACL parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLReply.PBStoreACL parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetACLReply.PBStoreACL prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetACLReply.PBStoreACL, Builder>
implements
Sp.GetACLReply.PBStoreACLOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
subjectPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000002);
external_ = false;
b0_ = (b0_ & ~0x00000004);
name_ = "";
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetACLReply.PBStoreACL getDefaultInstanceForType() {
return Sp.GetACLReply.PBStoreACL.getDefaultInstance();
}
public Sp.GetACLReply.PBStoreACL build() {
Sp.GetACLReply.PBStoreACL result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetACLReply.PBStoreACL buildPartial() {
Sp.GetACLReply.PBStoreACL result = new Sp.GetACLReply.PBStoreACL(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.storeId_ = storeId_;
if (((b0_ & 0x00000002) == 0x00000002)) {
subjectPermissions_ = Collections.unmodifiableList(subjectPermissions_);
b0_ = (b0_ & ~0x00000002);
}
result.subjectPermissions_ = subjectPermissions_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000002;
}
result.external_ = external_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000004;
}
result.name_ = name_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetACLReply.PBStoreACL other) {
if (other == Sp.GetACLReply.PBStoreACL.getDefaultInstance()) return this;
if (other.hasStoreId()) {
setStoreId(other.getStoreId());
}
if (!other.subjectPermissions_.isEmpty()) {
if (subjectPermissions_.isEmpty()) {
subjectPermissions_ = other.subjectPermissions_;
b0_ = (b0_ & ~0x00000002);
} else {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.addAll(other.subjectPermissions_);
}
}
if (other.hasExternal()) {
setExternal(other.getExternal());
}
if (other.hasName()) {
b0_ |= 0x00000008;
name_ = other.name_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasStoreId()) {
return false;
}
if (!hasExternal()) {
return false;
}
if (!hasName()) {
return false;
}
for (int i = 0; i < getSubjectPermissionsCount(); i++) {
if (!getSubjectPermissions(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetACLReply.PBStoreACL pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetACLReply.PBStoreACL) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString storeId_ = ByteString.EMPTY;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public Builder setStoreId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
storeId_ = value;
return this;
}
public Builder clearStoreId() {
b0_ = (b0_ & ~0x00000001);
storeId_ = getDefaultInstance().getStoreId();
return this;
}
private List<Common.PBSubjectPermissions> subjectPermissions_ =
Collections.emptyList();
private void ensureSubjectPermissionsIsMutable() {
if (!((b0_ & 0x00000002) == 0x00000002)) {
subjectPermissions_ = new ArrayList<Common.PBSubjectPermissions>(subjectPermissions_);
b0_ |= 0x00000002;
}
}
public List<Common.PBSubjectPermissions> getSubjectPermissionsList() {
return Collections.unmodifiableList(subjectPermissions_);
}
public int getSubjectPermissionsCount() {
return subjectPermissions_.size();
}
public Common.PBSubjectPermissions getSubjectPermissions(int index) {
return subjectPermissions_.get(index);
}
public Builder setSubjectPermissions(
int index, Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.set(index, value);
return this;
}
public Builder setSubjectPermissions(
int index, Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.set(index, bdForValue.build());
return this;
}
public Builder addSubjectPermissions(Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(value);
return this;
}
public Builder addSubjectPermissions(
int index, Common.PBSubjectPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(index, value);
return this;
}
public Builder addSubjectPermissions(
Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(bdForValue.build());
return this;
}
public Builder addSubjectPermissions(
int index, Common.PBSubjectPermissions.Builder bdForValue) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.add(index, bdForValue.build());
return this;
}
public Builder addAllSubjectPermissions(
Iterable<? extends Common.PBSubjectPermissions> values) {
ensureSubjectPermissionsIsMutable();
AbstractMessageLite.Builder.addAll(
values, subjectPermissions_);
return this;
}
public Builder clearSubjectPermissions() {
subjectPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder removeSubjectPermissions(int index) {
ensureSubjectPermissionsIsMutable();
subjectPermissions_.remove(index);
return this;
}
private boolean external_ ;
public boolean hasExternal() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getExternal() {
return external_;
}
public Builder setExternal(boolean value) {
b0_ |= 0x00000004;
external_ = value;
return this;
}
public Builder clearExternal() {
b0_ = (b0_ & ~0x00000004);
external_ = false;
return this;
}
private Object name_ = "";
public boolean hasName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getName() {
Object ref = name_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
name_ = value;
return this;
}
public Builder clearName() {
b0_ = (b0_ & ~0x00000008);
name_ = getDefaultInstance().getName();
return this;
}
public Builder setNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
name_ = value;
return this;
}
}
static {
defaultInstance = new PBStoreACL(true);
defaultInstance.initFields();
}
}
private int b0_;
public static final int STORE_ACL_FIELD_NUMBER = 1;
private List<Sp.GetACLReply.PBStoreACL> storeAcl_;
public List<Sp.GetACLReply.PBStoreACL> getStoreAclList() {
return storeAcl_;
}
public List<? extends Sp.GetACLReply.PBStoreACLOrBuilder> 
getStoreAclOrBuilderList() {
return storeAcl_;
}
public int getStoreAclCount() {
return storeAcl_.size();
}
public Sp.GetACLReply.PBStoreACL getStoreAcl(int index) {
return storeAcl_.get(index);
}
public Sp.GetACLReply.PBStoreACLOrBuilder getStoreAclOrBuilder(
int index) {
return storeAcl_.get(index);
}
public static final int EPOCH_FIELD_NUMBER = 2;
private long epoch_;
public boolean hasEpoch() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getEpoch() {
return epoch_;
}
private void initFields() {
storeAcl_ = Collections.emptyList();
epoch_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEpoch()) {
mii = 0;
return false;
}
for (int i = 0; i < getStoreAclCount(); i++) {
if (!getStoreAcl(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < storeAcl_.size(); i++) {
output.writeMessage(1, storeAcl_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt64(2, epoch_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < storeAcl_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, storeAcl_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt64Size(2, epoch_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetACLReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetACLReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetACLReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetACLReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetACLReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetACLReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetACLReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetACLReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetACLReply, Builder>
implements
Sp.GetACLReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeAcl_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
epoch_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetACLReply getDefaultInstanceForType() {
return Sp.GetACLReply.getDefaultInstance();
}
public Sp.GetACLReply build() {
Sp.GetACLReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetACLReply buildPartial() {
Sp.GetACLReply result = new Sp.GetACLReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
storeAcl_ = Collections.unmodifiableList(storeAcl_);
b0_ = (b0_ & ~0x00000001);
}
result.storeAcl_ = storeAcl_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000001;
}
result.epoch_ = epoch_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetACLReply other) {
if (other == Sp.GetACLReply.getDefaultInstance()) return this;
if (!other.storeAcl_.isEmpty()) {
if (storeAcl_.isEmpty()) {
storeAcl_ = other.storeAcl_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureStoreAclIsMutable();
storeAcl_.addAll(other.storeAcl_);
}
}
if (other.hasEpoch()) {
setEpoch(other.getEpoch());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEpoch()) {
return false;
}
for (int i = 0; i < getStoreAclCount(); i++) {
if (!getStoreAcl(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetACLReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetACLReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.GetACLReply.PBStoreACL> storeAcl_ =
Collections.emptyList();
private void ensureStoreAclIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
storeAcl_ = new ArrayList<Sp.GetACLReply.PBStoreACL>(storeAcl_);
b0_ |= 0x00000001;
}
}
public List<Sp.GetACLReply.PBStoreACL> getStoreAclList() {
return Collections.unmodifiableList(storeAcl_);
}
public int getStoreAclCount() {
return storeAcl_.size();
}
public Sp.GetACLReply.PBStoreACL getStoreAcl(int index) {
return storeAcl_.get(index);
}
public Builder setStoreAcl(
int index, Sp.GetACLReply.PBStoreACL value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreAclIsMutable();
storeAcl_.set(index, value);
return this;
}
public Builder setStoreAcl(
int index, Sp.GetACLReply.PBStoreACL.Builder bdForValue) {
ensureStoreAclIsMutable();
storeAcl_.set(index, bdForValue.build());
return this;
}
public Builder addStoreAcl(Sp.GetACLReply.PBStoreACL value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreAclIsMutable();
storeAcl_.add(value);
return this;
}
public Builder addStoreAcl(
int index, Sp.GetACLReply.PBStoreACL value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreAclIsMutable();
storeAcl_.add(index, value);
return this;
}
public Builder addStoreAcl(
Sp.GetACLReply.PBStoreACL.Builder bdForValue) {
ensureStoreAclIsMutable();
storeAcl_.add(bdForValue.build());
return this;
}
public Builder addStoreAcl(
int index, Sp.GetACLReply.PBStoreACL.Builder bdForValue) {
ensureStoreAclIsMutable();
storeAcl_.add(index, bdForValue.build());
return this;
}
public Builder addAllStoreAcl(
Iterable<? extends Sp.GetACLReply.PBStoreACL> values) {
ensureStoreAclIsMutable();
AbstractMessageLite.Builder.addAll(
values, storeAcl_);
return this;
}
public Builder clearStoreAcl() {
storeAcl_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeStoreAcl(int index) {
ensureStoreAclIsMutable();
storeAcl_.remove(index);
return this;
}
private long epoch_ ;
public boolean hasEpoch() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getEpoch() {
return epoch_;
}
public Builder setEpoch(long value) {
b0_ |= 0x00000002;
epoch_ = value;
return this;
}
public Builder clearEpoch() {
b0_ = (b0_ & ~0x00000002);
epoch_ = 0L;
return this;
}
}
static {
defaultInstance = new GetACLReply(true);
defaultInstance.initFields();
}
}
public interface UpdateACLCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasStoreId();
ByteString getStoreId();
boolean hasSubject();
String getSubject();
ByteString
getSubjectBytes();
boolean hasPermissions();
Common.PBPermissions getPermissions();
boolean hasSuppressSharingRulesWarnings();
boolean getSuppressSharingRulesWarnings();
}
public static final class UpdateACLCall extends
GeneratedMessageLite implements
UpdateACLCallOrBuilder {
private UpdateACLCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private UpdateACLCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final UpdateACLCall defaultInstance;
public static UpdateACLCall getDefaultInstance() {
return defaultInstance;
}
public UpdateACLCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private UpdateACLCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
storeId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
subject_ = bs;
break;
}
case 26: {
Common.PBPermissions.Builder subBuilder = null;
if (((b0_ & 0x00000004) == 0x00000004)) {
subBuilder = permissions_.toBuilder();
}
permissions_ = input.readMessage(Common.PBPermissions.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(permissions_);
permissions_ = subBuilder.buildPartial();
}
b0_ |= 0x00000004;
break;
}
case 32: {
b0_ |= 0x00000008;
suppressSharingRulesWarnings_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<UpdateACLCall> PARSER =
new AbstractParser<UpdateACLCall>() {
public UpdateACLCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new UpdateACLCall(input, er);
}
};
@Override
public Parser<UpdateACLCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int STORE_ID_FIELD_NUMBER = 1;
private ByteString storeId_;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public static final int SUBJECT_FIELD_NUMBER = 2;
private Object subject_;
public boolean hasSubject() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSubject() {
Object ref = subject_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int PERMISSIONS_FIELD_NUMBER = 3;
private Common.PBPermissions permissions_;
public boolean hasPermissions() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
public static final int SUPPRESS_SHARING_RULES_WARNINGS_FIELD_NUMBER = 4;
private boolean suppressSharingRulesWarnings_;
public boolean hasSuppressSharingRulesWarnings() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getSuppressSharingRulesWarnings() {
return suppressSharingRulesWarnings_;
}
private void initFields() {
storeId_ = ByteString.EMPTY;
subject_ = "";
permissions_ = Common.PBPermissions.getDefaultInstance();
suppressSharingRulesWarnings_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasStoreId()) {
mii = 0;
return false;
}
if (!hasSubject()) {
mii = 0;
return false;
}
if (!hasPermissions()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getSubjectBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeMessage(3, permissions_);
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBool(4, suppressSharingRulesWarnings_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getSubjectBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeMessageSize(3, permissions_);
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBoolSize(4, suppressSharingRulesWarnings_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.UpdateACLCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.UpdateACLCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.UpdateACLCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.UpdateACLCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.UpdateACLCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.UpdateACLCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.UpdateACLCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.UpdateACLCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.UpdateACLCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.UpdateACLCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.UpdateACLCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.UpdateACLCall, Builder>
implements
Sp.UpdateACLCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
subject_ = "";
b0_ = (b0_ & ~0x00000002);
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000004);
suppressSharingRulesWarnings_ = false;
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.UpdateACLCall getDefaultInstanceForType() {
return Sp.UpdateACLCall.getDefaultInstance();
}
public Sp.UpdateACLCall build() {
Sp.UpdateACLCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.UpdateACLCall buildPartial() {
Sp.UpdateACLCall result = new Sp.UpdateACLCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.storeId_ = storeId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.subject_ = subject_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.permissions_ = permissions_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.suppressSharingRulesWarnings_ = suppressSharingRulesWarnings_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.UpdateACLCall other) {
if (other == Sp.UpdateACLCall.getDefaultInstance()) return this;
if (other.hasStoreId()) {
setStoreId(other.getStoreId());
}
if (other.hasSubject()) {
b0_ |= 0x00000002;
subject_ = other.subject_;
}
if (other.hasPermissions()) {
mergePermissions(other.getPermissions());
}
if (other.hasSuppressSharingRulesWarnings()) {
setSuppressSharingRulesWarnings(other.getSuppressSharingRulesWarnings());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasStoreId()) {
return false;
}
if (!hasSubject()) {
return false;
}
if (!hasPermissions()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.UpdateACLCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.UpdateACLCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString storeId_ = ByteString.EMPTY;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public Builder setStoreId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
storeId_ = value;
return this;
}
public Builder clearStoreId() {
b0_ = (b0_ & ~0x00000001);
storeId_ = getDefaultInstance().getStoreId();
return this;
}
private Object subject_ = "";
public boolean hasSubject() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSubject() {
Object ref = subject_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSubject(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
subject_ = value;
return this;
}
public Builder clearSubject() {
b0_ = (b0_ & ~0x00000002);
subject_ = getDefaultInstance().getSubject();
return this;
}
public Builder setSubjectBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
subject_ = value;
return this;
}
private Common.PBPermissions permissions_ = Common.PBPermissions.getDefaultInstance();
public boolean hasPermissions() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
public Builder setPermissions(Common.PBPermissions value) {
if (value == null) {
throw new NullPointerException();
}
permissions_ = value;
b0_ |= 0x00000004;
return this;
}
public Builder setPermissions(
Common.PBPermissions.Builder bdForValue) {
permissions_ = bdForValue.build();
b0_ |= 0x00000004;
return this;
}
public Builder mergePermissions(Common.PBPermissions value) {
if (((b0_ & 0x00000004) == 0x00000004) &&
permissions_ != Common.PBPermissions.getDefaultInstance()) {
permissions_ =
Common.PBPermissions.newBuilder(permissions_).mergeFrom(value).buildPartial();
} else {
permissions_ = value;
}
b0_ |= 0x00000004;
return this;
}
public Builder clearPermissions() {
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000004);
return this;
}
private boolean suppressSharingRulesWarnings_ ;
public boolean hasSuppressSharingRulesWarnings() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getSuppressSharingRulesWarnings() {
return suppressSharingRulesWarnings_;
}
public Builder setSuppressSharingRulesWarnings(boolean value) {
b0_ |= 0x00000008;
suppressSharingRulesWarnings_ = value;
return this;
}
public Builder clearSuppressSharingRulesWarnings() {
b0_ = (b0_ & ~0x00000008);
suppressSharingRulesWarnings_ = false;
return this;
}
}
static {
defaultInstance = new UpdateACLCall(true);
defaultInstance.initFields();
}
}
public interface DeleteACLCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasStoreId();
ByteString getStoreId();
boolean hasSubject();
String getSubject();
ByteString
getSubjectBytes();
}
public static final class DeleteACLCall extends
GeneratedMessageLite implements
DeleteACLCallOrBuilder {
private DeleteACLCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DeleteACLCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DeleteACLCall defaultInstance;
public static DeleteACLCall getDefaultInstance() {
return defaultInstance;
}
public DeleteACLCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DeleteACLCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
storeId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
subject_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DeleteACLCall> PARSER =
new AbstractParser<DeleteACLCall>() {
public DeleteACLCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DeleteACLCall(input, er);
}
};
@Override
public Parser<DeleteACLCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int STORE_ID_FIELD_NUMBER = 1;
private ByteString storeId_;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public static final int SUBJECT_FIELD_NUMBER = 2;
private Object subject_;
public boolean hasSubject() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSubject() {
Object ref = subject_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
storeId_ = ByteString.EMPTY;
subject_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasStoreId()) {
mii = 0;
return false;
}
if (!hasSubject()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getSubjectBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getSubjectBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DeleteACLCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteACLCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteACLCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteACLCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteACLCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteACLCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DeleteACLCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DeleteACLCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DeleteACLCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteACLCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DeleteACLCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DeleteACLCall, Builder>
implements
Sp.DeleteACLCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
subject_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DeleteACLCall getDefaultInstanceForType() {
return Sp.DeleteACLCall.getDefaultInstance();
}
public Sp.DeleteACLCall build() {
Sp.DeleteACLCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DeleteACLCall buildPartial() {
Sp.DeleteACLCall result = new Sp.DeleteACLCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.storeId_ = storeId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.subject_ = subject_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DeleteACLCall other) {
if (other == Sp.DeleteACLCall.getDefaultInstance()) return this;
if (other.hasStoreId()) {
setStoreId(other.getStoreId());
}
if (other.hasSubject()) {
b0_ |= 0x00000002;
subject_ = other.subject_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasStoreId()) {
return false;
}
if (!hasSubject()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DeleteACLCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DeleteACLCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString storeId_ = ByteString.EMPTY;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public Builder setStoreId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
storeId_ = value;
return this;
}
public Builder clearStoreId() {
b0_ = (b0_ & ~0x00000001);
storeId_ = getDefaultInstance().getStoreId();
return this;
}
private Object subject_ = "";
public boolean hasSubject() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSubject() {
Object ref = subject_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSubject(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
subject_ = value;
return this;
}
public Builder clearSubject() {
b0_ = (b0_ & ~0x00000002);
subject_ = getDefaultInstance().getSubject();
return this;
}
public Builder setSubjectBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
subject_ = value;
return this;
}
}
static {
defaultInstance = new DeleteACLCall(true);
defaultInstance.initFields();
}
}
public interface VerifyEmailCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasVerificationCode();
String getVerificationCode();
ByteString
getVerificationCodeBytes();
}
public static final class VerifyEmailCall extends
GeneratedMessageLite implements
VerifyEmailCallOrBuilder {
private VerifyEmailCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private VerifyEmailCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final VerifyEmailCall defaultInstance;
public static VerifyEmailCall getDefaultInstance() {
return defaultInstance;
}
public VerifyEmailCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private VerifyEmailCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
verificationCode_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<VerifyEmailCall> PARSER =
new AbstractParser<VerifyEmailCall>() {
public VerifyEmailCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new VerifyEmailCall(input, er);
}
};
@Override
public Parser<VerifyEmailCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int VERIFICATION_CODE_FIELD_NUMBER = 1;
private Object verificationCode_;
public boolean hasVerificationCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getVerificationCode() {
Object ref = verificationCode_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
verificationCode_ = s;
}
return s;
}
}
public ByteString
getVerificationCodeBytes() {
Object ref = verificationCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
verificationCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
verificationCode_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasVerificationCode()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getVerificationCodeBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getVerificationCodeBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.VerifyEmailCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.VerifyEmailCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.VerifyEmailCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.VerifyEmailCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.VerifyEmailCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.VerifyEmailCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.VerifyEmailCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.VerifyEmailCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.VerifyEmailCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.VerifyEmailCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.VerifyEmailCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.VerifyEmailCall, Builder>
implements
Sp.VerifyEmailCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
verificationCode_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.VerifyEmailCall getDefaultInstanceForType() {
return Sp.VerifyEmailCall.getDefaultInstance();
}
public Sp.VerifyEmailCall build() {
Sp.VerifyEmailCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.VerifyEmailCall buildPartial() {
Sp.VerifyEmailCall result = new Sp.VerifyEmailCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.verificationCode_ = verificationCode_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.VerifyEmailCall other) {
if (other == Sp.VerifyEmailCall.getDefaultInstance()) return this;
if (other.hasVerificationCode()) {
b0_ |= 0x00000001;
verificationCode_ = other.verificationCode_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasVerificationCode()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.VerifyEmailCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.VerifyEmailCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object verificationCode_ = "";
public boolean hasVerificationCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getVerificationCode() {
Object ref = verificationCode_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
verificationCode_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getVerificationCodeBytes() {
Object ref = verificationCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
verificationCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setVerificationCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
verificationCode_ = value;
return this;
}
public Builder clearVerificationCode() {
b0_ = (b0_ & ~0x00000001);
verificationCode_ = getDefaultInstance().getVerificationCode();
return this;
}
public Builder setVerificationCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
verificationCode_ = value;
return this;
}
}
static {
defaultInstance = new VerifyEmailCall(true);
defaultInstance.initFields();
}
}
public interface GetTeamServerUserIDReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasId();
String getId();
ByteString
getIdBytes();
}
public static final class GetTeamServerUserIDReply extends
GeneratedMessageLite implements
GetTeamServerUserIDReplyOrBuilder {
private GetTeamServerUserIDReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetTeamServerUserIDReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetTeamServerUserIDReply defaultInstance;
public static GetTeamServerUserIDReply getDefaultInstance() {
return defaultInstance;
}
public GetTeamServerUserIDReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetTeamServerUserIDReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
id_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetTeamServerUserIDReply> PARSER =
new AbstractParser<GetTeamServerUserIDReply>() {
public GetTeamServerUserIDReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetTeamServerUserIDReply(input, er);
}
};
@Override
public Parser<GetTeamServerUserIDReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ID_FIELD_NUMBER = 1;
private Object id_;
public boolean hasId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getId() {
Object ref = id_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
id_ = s;
}
return s;
}
}
public ByteString
getIdBytes() {
Object ref = id_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
id_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
id_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetTeamServerUserIDReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetTeamServerUserIDReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetTeamServerUserIDReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetTeamServerUserIDReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetTeamServerUserIDReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetTeamServerUserIDReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetTeamServerUserIDReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetTeamServerUserIDReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetTeamServerUserIDReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetTeamServerUserIDReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetTeamServerUserIDReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetTeamServerUserIDReply, Builder>
implements
Sp.GetTeamServerUserIDReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
id_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetTeamServerUserIDReply getDefaultInstanceForType() {
return Sp.GetTeamServerUserIDReply.getDefaultInstance();
}
public Sp.GetTeamServerUserIDReply build() {
Sp.GetTeamServerUserIDReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetTeamServerUserIDReply buildPartial() {
Sp.GetTeamServerUserIDReply result = new Sp.GetTeamServerUserIDReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.id_ = id_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetTeamServerUserIDReply other) {
if (other == Sp.GetTeamServerUserIDReply.getDefaultInstance()) return this;
if (other.hasId()) {
b0_ |= 0x00000001;
id_ = other.id_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetTeamServerUserIDReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetTeamServerUserIDReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object id_ = "";
public boolean hasId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getId() {
Object ref = id_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
id_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getIdBytes() {
Object ref = id_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
id_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
id_ = value;
return this;
}
public Builder clearId() {
b0_ = (b0_ & ~0x00000001);
id_ = getDefaultInstance().getId();
return this;
}
public Builder setIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
id_ = value;
return this;
}
}
static {
defaultInstance = new GetTeamServerUserIDReply(true);
defaultInstance.initFields();
}
}
public interface RegisterDeviceCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasCsr();
ByteString getCsr();
boolean hasOsFamily();
String getOsFamily();
ByteString
getOsFamilyBytes();
boolean hasOsName();
String getOsName();
ByteString
getOsNameBytes();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
List<Sp.RegisterDeviceCall.Interface> 
getInterfacesList();
Sp.RegisterDeviceCall.Interface getInterfaces(int index);
int getInterfacesCount();
boolean hasToken();
String getToken();
ByteString
getTokenBytes();
}
public static final class RegisterDeviceCall extends
GeneratedMessageLite implements
RegisterDeviceCallOrBuilder {
private RegisterDeviceCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RegisterDeviceCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RegisterDeviceCall defaultInstance;
public static RegisterDeviceCall getDefaultInstance() {
return defaultInstance;
}
public RegisterDeviceCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RegisterDeviceCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 18: {
b0_ |= 0x00000002;
csr_ = input.readBytes();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
osFamily_ = bs;
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
osName_ = bs;
break;
}
case 42: {
ByteString bs = input.readBytes();
b0_ |= 0x00000010;
deviceName_ = bs;
break;
}
case 50: {
if (!((mutable_b0_ & 0x00000020) == 0x00000020)) {
interfaces_ = new ArrayList<Sp.RegisterDeviceCall.Interface>();
mutable_b0_ |= 0x00000020;
}
interfaces_.add(input.readMessage(Sp.RegisterDeviceCall.Interface.PARSER, er));
break;
}
case 58: {
ByteString bs = input.readBytes();
b0_ |= 0x00000020;
token_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000020) == 0x00000020)) {
interfaces_ = Collections.unmodifiableList(interfaces_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RegisterDeviceCall> PARSER =
new AbstractParser<RegisterDeviceCall>() {
public RegisterDeviceCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RegisterDeviceCall(input, er);
}
};
@Override
public Parser<RegisterDeviceCall> getParserForType() {
return PARSER;
}
public interface InterfaceOrBuilder extends
MessageLiteOrBuilder {
boolean hasName();
String getName();
ByteString
getNameBytes();
boolean hasMac();
String getMac();
ByteString
getMacBytes();
ProtocolStringList
getIpsList();
int getIpsCount();
String getIps(int index);
ByteString
getIpsBytes(int index);
}
public static final class Interface extends
GeneratedMessageLite implements
InterfaceOrBuilder {
private Interface(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private Interface(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final Interface defaultInstance;
public static Interface getDefaultInstance() {
return defaultInstance;
}
public Interface getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private Interface(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
name_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
mac_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
if (!((mutable_b0_ & 0x00000004) == 0x00000004)) {
ips_ = new LazyStringArrayList();
mutable_b0_ |= 0x00000004;
}
ips_.add(bs);
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000004) == 0x00000004)) {
ips_ = ips_.getUnmodifiableView();
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<Interface> PARSER =
new AbstractParser<Interface>() {
public Interface parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new Interface(input, er);
}
};
@Override
public Parser<Interface> getParserForType() {
return PARSER;
}
private int b0_;
public static final int NAME_FIELD_NUMBER = 1;
private Object name_;
public boolean hasName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getName() {
Object ref = name_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int MAC_FIELD_NUMBER = 2;
private Object mac_;
public boolean hasMac() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getMac() {
Object ref = mac_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
mac_ = s;
}
return s;
}
}
public ByteString
getMacBytes() {
Object ref = mac_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
mac_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int IPS_FIELD_NUMBER = 3;
private LazyStringList ips_;
public ProtocolStringList
getIpsList() {
return ips_;
}
public int getIpsCount() {
return ips_.size();
}
public String getIps(int index) {
return ips_.get(index);
}
public ByteString
getIpsBytes(int index) {
return ips_.getByteString(index);
}
private void initFields() {
name_ = "";
mac_ = "";
ips_ = LazyStringArrayList.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasName()) {
mii = 0;
return false;
}
if (!hasMac()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getMacBytes());
}
for (int i = 0; i < ips_.size(); i++) {
output.writeBytes(3, ips_.getByteString(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getMacBytes());
}
{
int dataSize = 0;
for (int i = 0; i < ips_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(ips_.getByteString(i));
}
size += dataSize;
size += 1 * getIpsList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RegisterDeviceCall.Interface parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RegisterDeviceCall.Interface parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceCall.Interface parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RegisterDeviceCall.Interface prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RegisterDeviceCall.Interface, Builder>
implements
Sp.RegisterDeviceCall.InterfaceOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
name_ = "";
b0_ = (b0_ & ~0x00000001);
mac_ = "";
b0_ = (b0_ & ~0x00000002);
ips_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RegisterDeviceCall.Interface getDefaultInstanceForType() {
return Sp.RegisterDeviceCall.Interface.getDefaultInstance();
}
public Sp.RegisterDeviceCall.Interface build() {
Sp.RegisterDeviceCall.Interface result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RegisterDeviceCall.Interface buildPartial() {
Sp.RegisterDeviceCall.Interface result = new Sp.RegisterDeviceCall.Interface(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.name_ = name_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.mac_ = mac_;
if (((b0_ & 0x00000004) == 0x00000004)) {
ips_ = ips_.getUnmodifiableView();
b0_ = (b0_ & ~0x00000004);
}
result.ips_ = ips_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RegisterDeviceCall.Interface other) {
if (other == Sp.RegisterDeviceCall.Interface.getDefaultInstance()) return this;
if (other.hasName()) {
b0_ |= 0x00000001;
name_ = other.name_;
}
if (other.hasMac()) {
b0_ |= 0x00000002;
mac_ = other.mac_;
}
if (!other.ips_.isEmpty()) {
if (ips_.isEmpty()) {
ips_ = other.ips_;
b0_ = (b0_ & ~0x00000004);
} else {
ensureIpsIsMutable();
ips_.addAll(other.ips_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasName()) {
return false;
}
if (!hasMac()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RegisterDeviceCall.Interface pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RegisterDeviceCall.Interface) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object name_ = "";
public boolean hasName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getName() {
Object ref = name_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
name_ = value;
return this;
}
public Builder clearName() {
b0_ = (b0_ & ~0x00000001);
name_ = getDefaultInstance().getName();
return this;
}
public Builder setNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
name_ = value;
return this;
}
private Object mac_ = "";
public boolean hasMac() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getMac() {
Object ref = mac_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
mac_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getMacBytes() {
Object ref = mac_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
mac_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setMac(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
mac_ = value;
return this;
}
public Builder clearMac() {
b0_ = (b0_ & ~0x00000002);
mac_ = getDefaultInstance().getMac();
return this;
}
public Builder setMacBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
mac_ = value;
return this;
}
private LazyStringList ips_ = LazyStringArrayList.EMPTY;
private void ensureIpsIsMutable() {
if (!((b0_ & 0x00000004) == 0x00000004)) {
ips_ = new LazyStringArrayList(ips_);
b0_ |= 0x00000004;
}
}
public ProtocolStringList
getIpsList() {
return ips_.getUnmodifiableView();
}
public int getIpsCount() {
return ips_.size();
}
public String getIps(int index) {
return ips_.get(index);
}
public ByteString
getIpsBytes(int index) {
return ips_.getByteString(index);
}
public Builder setIps(
int index, String value) {
if (value == null) {
throw new NullPointerException();
}
ensureIpsIsMutable();
ips_.set(index, value);
return this;
}
public Builder addIps(
String value) {
if (value == null) {
throw new NullPointerException();
}
ensureIpsIsMutable();
ips_.add(value);
return this;
}
public Builder addAllIps(
Iterable<String> values) {
ensureIpsIsMutable();
AbstractMessageLite.Builder.addAll(
values, ips_);
return this;
}
public Builder clearIps() {
ips_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder addIpsBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureIpsIsMutable();
ips_.add(value);
return this;
}
}
static {
defaultInstance = new Interface(true);
defaultInstance.initFields();
}
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int CSR_FIELD_NUMBER = 2;
private ByteString csr_;
public boolean hasCsr() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCsr() {
return csr_;
}
public static final int OS_FAMILY_FIELD_NUMBER = 3;
private Object osFamily_;
public boolean hasOsFamily() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsFamily() {
Object ref = osFamily_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int OS_NAME_FIELD_NUMBER = 4;
private Object osName_;
public boolean hasOsName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getOsName() {
Object ref = osName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DEVICE_NAME_FIELD_NUMBER = 5;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int INTERFACES_FIELD_NUMBER = 6;
private List<Sp.RegisterDeviceCall.Interface> interfaces_;
public List<Sp.RegisterDeviceCall.Interface> getInterfacesList() {
return interfaces_;
}
public List<? extends Sp.RegisterDeviceCall.InterfaceOrBuilder> 
getInterfacesOrBuilderList() {
return interfaces_;
}
public int getInterfacesCount() {
return interfaces_.size();
}
public Sp.RegisterDeviceCall.Interface getInterfaces(int index) {
return interfaces_.get(index);
}
public Sp.RegisterDeviceCall.InterfaceOrBuilder getInterfacesOrBuilder(
int index) {
return interfaces_.get(index);
}
public static final int TOKEN_FIELD_NUMBER = 7;
private Object token_;
public boolean hasToken() {
return ((b0_ & 0x00000020) == 0x00000020);
}
public String getToken() {
Object ref = token_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
csr_ = ByteString.EMPTY;
osFamily_ = "";
osName_ = "";
deviceName_ = "";
interfaces_ = Collections.emptyList();
token_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasCsr()) {
mii = 0;
return false;
}
if (!hasOsFamily()) {
mii = 0;
return false;
}
if (!hasOsName()) {
mii = 0;
return false;
}
if (!hasDeviceName()) {
mii = 0;
return false;
}
for (int i = 0; i < getInterfacesCount(); i++) {
if (!getInterfaces(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, csr_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getOsFamilyBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, getOsNameBytes());
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeBytes(5, getDeviceNameBytes());
}
for (int i = 0; i < interfaces_.size(); i++) {
output.writeMessage(6, interfaces_.get(i));
}
if (((b0_ & 0x00000020) == 0x00000020)) {
output.writeBytes(7, getTokenBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, csr_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getOsFamilyBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, getOsNameBytes());
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeBytesSize(5, getDeviceNameBytes());
}
for (int i = 0; i < interfaces_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(6, interfaces_.get(i));
}
if (((b0_ & 0x00000020) == 0x00000020)) {
size += CodedOutputStream
.computeBytesSize(7, getTokenBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RegisterDeviceCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RegisterDeviceCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RegisterDeviceCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RegisterDeviceCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RegisterDeviceCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RegisterDeviceCall, Builder>
implements
Sp.RegisterDeviceCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
csr_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
osFamily_ = "";
b0_ = (b0_ & ~0x00000004);
osName_ = "";
b0_ = (b0_ & ~0x00000008);
deviceName_ = "";
b0_ = (b0_ & ~0x00000010);
interfaces_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000020);
token_ = "";
b0_ = (b0_ & ~0x00000040);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RegisterDeviceCall getDefaultInstanceForType() {
return Sp.RegisterDeviceCall.getDefaultInstance();
}
public Sp.RegisterDeviceCall build() {
Sp.RegisterDeviceCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RegisterDeviceCall buildPartial() {
Sp.RegisterDeviceCall result = new Sp.RegisterDeviceCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.csr_ = csr_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.osFamily_ = osFamily_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.osName_ = osName_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.deviceName_ = deviceName_;
if (((b0_ & 0x00000020) == 0x00000020)) {
interfaces_ = Collections.unmodifiableList(interfaces_);
b0_ = (b0_ & ~0x00000020);
}
result.interfaces_ = interfaces_;
if (((from_b0_ & 0x00000040) == 0x00000040)) {
to_b0_ |= 0x00000020;
}
result.token_ = token_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RegisterDeviceCall other) {
if (other == Sp.RegisterDeviceCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasCsr()) {
setCsr(other.getCsr());
}
if (other.hasOsFamily()) {
b0_ |= 0x00000004;
osFamily_ = other.osFamily_;
}
if (other.hasOsName()) {
b0_ |= 0x00000008;
osName_ = other.osName_;
}
if (other.hasDeviceName()) {
b0_ |= 0x00000010;
deviceName_ = other.deviceName_;
}
if (!other.interfaces_.isEmpty()) {
if (interfaces_.isEmpty()) {
interfaces_ = other.interfaces_;
b0_ = (b0_ & ~0x00000020);
} else {
ensureInterfacesIsMutable();
interfaces_.addAll(other.interfaces_);
}
}
if (other.hasToken()) {
b0_ |= 0x00000040;
token_ = other.token_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasCsr()) {
return false;
}
if (!hasOsFamily()) {
return false;
}
if (!hasOsName()) {
return false;
}
if (!hasDeviceName()) {
return false;
}
for (int i = 0; i < getInterfacesCount(); i++) {
if (!getInterfaces(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RegisterDeviceCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RegisterDeviceCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private ByteString csr_ = ByteString.EMPTY;
public boolean hasCsr() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCsr() {
return csr_;
}
public Builder setCsr(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
csr_ = value;
return this;
}
public Builder clearCsr() {
b0_ = (b0_ & ~0x00000002);
csr_ = getDefaultInstance().getCsr();
return this;
}
private Object osFamily_ = "";
public boolean hasOsFamily() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsFamily() {
Object ref = osFamily_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsFamily(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osFamily_ = value;
return this;
}
public Builder clearOsFamily() {
b0_ = (b0_ & ~0x00000004);
osFamily_ = getDefaultInstance().getOsFamily();
return this;
}
public Builder setOsFamilyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osFamily_ = value;
return this;
}
private Object osName_ = "";
public boolean hasOsName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getOsName() {
Object ref = osName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
osName_ = value;
return this;
}
public Builder clearOsName() {
b0_ = (b0_ & ~0x00000008);
osName_ = getDefaultInstance().getOsName();
return this;
}
public Builder setOsNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
osName_ = value;
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000010;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000010);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000010;
deviceName_ = value;
return this;
}
private List<Sp.RegisterDeviceCall.Interface> interfaces_ =
Collections.emptyList();
private void ensureInterfacesIsMutable() {
if (!((b0_ & 0x00000020) == 0x00000020)) {
interfaces_ = new ArrayList<Sp.RegisterDeviceCall.Interface>(interfaces_);
b0_ |= 0x00000020;
}
}
public List<Sp.RegisterDeviceCall.Interface> getInterfacesList() {
return Collections.unmodifiableList(interfaces_);
}
public int getInterfacesCount() {
return interfaces_.size();
}
public Sp.RegisterDeviceCall.Interface getInterfaces(int index) {
return interfaces_.get(index);
}
public Builder setInterfaces(
int index, Sp.RegisterDeviceCall.Interface value) {
if (value == null) {
throw new NullPointerException();
}
ensureInterfacesIsMutable();
interfaces_.set(index, value);
return this;
}
public Builder setInterfaces(
int index, Sp.RegisterDeviceCall.Interface.Builder bdForValue) {
ensureInterfacesIsMutable();
interfaces_.set(index, bdForValue.build());
return this;
}
public Builder addInterfaces(Sp.RegisterDeviceCall.Interface value) {
if (value == null) {
throw new NullPointerException();
}
ensureInterfacesIsMutable();
interfaces_.add(value);
return this;
}
public Builder addInterfaces(
int index, Sp.RegisterDeviceCall.Interface value) {
if (value == null) {
throw new NullPointerException();
}
ensureInterfacesIsMutable();
interfaces_.add(index, value);
return this;
}
public Builder addInterfaces(
Sp.RegisterDeviceCall.Interface.Builder bdForValue) {
ensureInterfacesIsMutable();
interfaces_.add(bdForValue.build());
return this;
}
public Builder addInterfaces(
int index, Sp.RegisterDeviceCall.Interface.Builder bdForValue) {
ensureInterfacesIsMutable();
interfaces_.add(index, bdForValue.build());
return this;
}
public Builder addAllInterfaces(
Iterable<? extends Sp.RegisterDeviceCall.Interface> values) {
ensureInterfacesIsMutable();
AbstractMessageLite.Builder.addAll(
values, interfaces_);
return this;
}
public Builder clearInterfaces() {
interfaces_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000020);
return this;
}
public Builder removeInterfaces(int index) {
ensureInterfacesIsMutable();
interfaces_.remove(index);
return this;
}
private Object token_ = "";
public boolean hasToken() {
return ((b0_ & 0x00000040) == 0x00000040);
}
public String getToken() {
Object ref = token_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000040;
token_ = value;
return this;
}
public Builder clearToken() {
b0_ = (b0_ & ~0x00000040);
token_ = getDefaultInstance().getToken();
return this;
}
public Builder setTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000040;
token_ = value;
return this;
}
}
static {
defaultInstance = new RegisterDeviceCall(true);
defaultInstance.initFields();
}
}
public interface RegisterDeviceReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasCert();
String getCert();
ByteString
getCertBytes();
}
public static final class RegisterDeviceReply extends
GeneratedMessageLite implements
RegisterDeviceReplyOrBuilder {
private RegisterDeviceReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RegisterDeviceReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RegisterDeviceReply defaultInstance;
public static RegisterDeviceReply getDefaultInstance() {
return defaultInstance;
}
public RegisterDeviceReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RegisterDeviceReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
cert_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RegisterDeviceReply> PARSER =
new AbstractParser<RegisterDeviceReply>() {
public RegisterDeviceReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RegisterDeviceReply(input, er);
}
};
@Override
public Parser<RegisterDeviceReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CERT_FIELD_NUMBER = 1;
private Object cert_;
public boolean hasCert() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCert() {
Object ref = cert_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
cert_ = s;
}
return s;
}
}
public ByteString
getCertBytes() {
Object ref = cert_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
cert_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
cert_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCert()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getCertBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getCertBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RegisterDeviceReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RegisterDeviceReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RegisterDeviceReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RegisterDeviceReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RegisterDeviceReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RegisterDeviceReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RegisterDeviceReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RegisterDeviceReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RegisterDeviceReply, Builder>
implements
Sp.RegisterDeviceReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
cert_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RegisterDeviceReply getDefaultInstanceForType() {
return Sp.RegisterDeviceReply.getDefaultInstance();
}
public Sp.RegisterDeviceReply build() {
Sp.RegisterDeviceReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RegisterDeviceReply buildPartial() {
Sp.RegisterDeviceReply result = new Sp.RegisterDeviceReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.cert_ = cert_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RegisterDeviceReply other) {
if (other == Sp.RegisterDeviceReply.getDefaultInstance()) return this;
if (other.hasCert()) {
b0_ |= 0x00000001;
cert_ = other.cert_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCert()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RegisterDeviceReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RegisterDeviceReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object cert_ = "";
public boolean hasCert() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCert() {
Object ref = cert_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
cert_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCertBytes() {
Object ref = cert_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
cert_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCert(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
cert_ = value;
return this;
}
public Builder clearCert() {
b0_ = (b0_ & ~0x00000001);
cert_ = getDefaultInstance().getCert();
return this;
}
public Builder setCertBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
cert_ = value;
return this;
}
}
static {
defaultInstance = new RegisterDeviceReply(true);
defaultInstance.initFields();
}
}
public interface ListOrganizationMembersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasMaxResults();
int getMaxResults();
boolean hasOffset();
int getOffset();
boolean hasSearchString();
String getSearchString();
ByteString
getSearchStringBytes();
}
public static final class ListOrganizationMembersCall extends
GeneratedMessageLite implements
ListOrganizationMembersCallOrBuilder {
private ListOrganizationMembersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListOrganizationMembersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListOrganizationMembersCall defaultInstance;
public static ListOrganizationMembersCall getDefaultInstance() {
return defaultInstance;
}
public ListOrganizationMembersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListOrganizationMembersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
maxResults_ = input.readUInt32();
break;
}
case 16: {
b0_ |= 0x00000002;
offset_ = input.readUInt32();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
searchString_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListOrganizationMembersCall> PARSER =
new AbstractParser<ListOrganizationMembersCall>() {
public ListOrganizationMembersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListOrganizationMembersCall(input, er);
}
};
@Override
public Parser<ListOrganizationMembersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int MAX_RESULTS_FIELD_NUMBER = 1;
private int maxResults_;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public static final int OFFSET_FIELD_NUMBER = 2;
private int offset_;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public static final int SEARCH_STRING_FIELD_NUMBER = 3;
private Object searchString_;
public boolean hasSearchString() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchString() {
Object ref = searchString_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
maxResults_ = 0;
offset_ = 0;
searchString_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasMaxResults()) {
mii = 0;
return false;
}
if (!hasOffset()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt32(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getSearchStringBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt32Size(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getSearchStringBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationMembersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationMembersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationMembersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationMembersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationMembersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationMembersCall, Builder>
implements
Sp.ListOrganizationMembersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
maxResults_ = 0;
b0_ = (b0_ & ~0x00000001);
offset_ = 0;
b0_ = (b0_ & ~0x00000002);
searchString_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationMembersCall getDefaultInstanceForType() {
return Sp.ListOrganizationMembersCall.getDefaultInstance();
}
public Sp.ListOrganizationMembersCall build() {
Sp.ListOrganizationMembersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationMembersCall buildPartial() {
Sp.ListOrganizationMembersCall result = new Sp.ListOrganizationMembersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.maxResults_ = maxResults_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.offset_ = offset_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.searchString_ = searchString_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationMembersCall other) {
if (other == Sp.ListOrganizationMembersCall.getDefaultInstance()) return this;
if (other.hasMaxResults()) {
setMaxResults(other.getMaxResults());
}
if (other.hasOffset()) {
setOffset(other.getOffset());
}
if (other.hasSearchString()) {
b0_ |= 0x00000004;
searchString_ = other.searchString_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasMaxResults()) {
return false;
}
if (!hasOffset()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationMembersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationMembersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int maxResults_ ;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public Builder setMaxResults(int value) {
b0_ |= 0x00000001;
maxResults_ = value;
return this;
}
public Builder clearMaxResults() {
b0_ = (b0_ & ~0x00000001);
maxResults_ = 0;
return this;
}
private int offset_ ;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public Builder setOffset(int value) {
b0_ |= 0x00000002;
offset_ = value;
return this;
}
public Builder clearOffset() {
b0_ = (b0_ & ~0x00000002);
offset_ = 0;
return this;
}
private Object searchString_ = "";
public boolean hasSearchString() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchString() {
Object ref = searchString_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSearchString(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchString_ = value;
return this;
}
public Builder clearSearchString() {
b0_ = (b0_ & ~0x00000004);
searchString_ = getDefaultInstance().getSearchString();
return this;
}
public Builder setSearchStringBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchString_ = value;
return this;
}
}
static {
defaultInstance = new ListOrganizationMembersCall(true);
defaultInstance.initFields();
}
}
public interface ListOrganizationMembersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.ListOrganizationMembersReply.PBUserAndLevel> 
getUserAndLevelList();
Sp.ListOrganizationMembersReply.PBUserAndLevel getUserAndLevel(int index);
int getUserAndLevelCount();
boolean hasTotalCount();
int getTotalCount();
}
public static final class ListOrganizationMembersReply extends
GeneratedMessageLite implements
ListOrganizationMembersReplyOrBuilder {
private ListOrganizationMembersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListOrganizationMembersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListOrganizationMembersReply defaultInstance;
public static ListOrganizationMembersReply getDefaultInstance() {
return defaultInstance;
}
public ListOrganizationMembersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListOrganizationMembersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
userAndLevel_ = new ArrayList<Sp.ListOrganizationMembersReply.PBUserAndLevel>();
mutable_b0_ |= 0x00000001;
}
userAndLevel_.add(input.readMessage(Sp.ListOrganizationMembersReply.PBUserAndLevel.PARSER, er));
break;
}
case 16: {
b0_ |= 0x00000001;
totalCount_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
userAndLevel_ = Collections.unmodifiableList(userAndLevel_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListOrganizationMembersReply> PARSER =
new AbstractParser<ListOrganizationMembersReply>() {
public ListOrganizationMembersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListOrganizationMembersReply(input, er);
}
};
@Override
public Parser<ListOrganizationMembersReply> getParserForType() {
return PARSER;
}
public interface PBUserAndLevelOrBuilder extends
MessageLiteOrBuilder {
boolean hasUser();
Sp.PBUser getUser();
boolean hasLevel();
Sp.PBAuthorizationLevel getLevel();
}
public static final class PBUserAndLevel extends
GeneratedMessageLite implements
PBUserAndLevelOrBuilder {
private PBUserAndLevel(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBUserAndLevel(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBUserAndLevel defaultInstance;
public static PBUserAndLevel getDefaultInstance() {
return defaultInstance;
}
public PBUserAndLevel getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBUserAndLevel(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBUser.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = user_.toBuilder();
}
user_ = input.readMessage(Sp.PBUser.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(user_);
user_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 16: {
int rawValue = input.readEnum();
Sp.PBAuthorizationLevel value = Sp.PBAuthorizationLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000002;
level_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBUserAndLevel> PARSER =
new AbstractParser<PBUserAndLevel>() {
public PBUserAndLevel parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBUserAndLevel(input, er);
}
};
@Override
public Parser<PBUserAndLevel> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_FIELD_NUMBER = 1;
private Sp.PBUser user_;
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public static final int LEVEL_FIELD_NUMBER = 2;
private Sp.PBAuthorizationLevel level_;
public boolean hasLevel() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBAuthorizationLevel getLevel() {
return level_;
}
private void initFields() {
user_ = Sp.PBUser.getDefaultInstance();
level_ = Sp.PBAuthorizationLevel.USER;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUser()) {
mii = 0;
return false;
}
if (!hasLevel()) {
mii = 0;
return false;
}
if (!getUser().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeEnum(2, level_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeEnumSize(2, level_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersReply.PBUserAndLevel parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationMembersReply.PBUserAndLevel prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationMembersReply.PBUserAndLevel, Builder>
implements
Sp.ListOrganizationMembersReply.PBUserAndLevelOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
level_ = Sp.PBAuthorizationLevel.USER;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationMembersReply.PBUserAndLevel getDefaultInstanceForType() {
return Sp.ListOrganizationMembersReply.PBUserAndLevel.getDefaultInstance();
}
public Sp.ListOrganizationMembersReply.PBUserAndLevel build() {
Sp.ListOrganizationMembersReply.PBUserAndLevel result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationMembersReply.PBUserAndLevel buildPartial() {
Sp.ListOrganizationMembersReply.PBUserAndLevel result = new Sp.ListOrganizationMembersReply.PBUserAndLevel(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.user_ = user_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.level_ = level_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationMembersReply.PBUserAndLevel other) {
if (other == Sp.ListOrganizationMembersReply.PBUserAndLevel.getDefaultInstance()) return this;
if (other.hasUser()) {
mergeUser(other.getUser());
}
if (other.hasLevel()) {
setLevel(other.getLevel());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUser()) {
return false;
}
if (!hasLevel()) {
return false;
}
if (!getUser().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationMembersReply.PBUserAndLevel pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationMembersReply.PBUserAndLevel) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBUser user_ = Sp.PBUser.getDefaultInstance();
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public Builder setUser(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
user_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setUser(
Sp.PBUser.Builder bdForValue) {
user_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeUser(Sp.PBUser value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
user_ != Sp.PBUser.getDefaultInstance()) {
user_ =
Sp.PBUser.newBuilder(user_).mergeFrom(value).buildPartial();
} else {
user_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearUser() {
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private Sp.PBAuthorizationLevel level_ = Sp.PBAuthorizationLevel.USER;
public boolean hasLevel() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBAuthorizationLevel getLevel() {
return level_;
}
public Builder setLevel(Sp.PBAuthorizationLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
level_ = value;
return this;
}
public Builder clearLevel() {
b0_ = (b0_ & ~0x00000002);
level_ = Sp.PBAuthorizationLevel.USER;
return this;
}
}
static {
defaultInstance = new PBUserAndLevel(true);
defaultInstance.initFields();
}
}
private int b0_;
public static final int USER_AND_LEVEL_FIELD_NUMBER = 1;
private List<Sp.ListOrganizationMembersReply.PBUserAndLevel> userAndLevel_;
public List<Sp.ListOrganizationMembersReply.PBUserAndLevel> getUserAndLevelList() {
return userAndLevel_;
}
public List<? extends Sp.ListOrganizationMembersReply.PBUserAndLevelOrBuilder> 
getUserAndLevelOrBuilderList() {
return userAndLevel_;
}
public int getUserAndLevelCount() {
return userAndLevel_.size();
}
public Sp.ListOrganizationMembersReply.PBUserAndLevel getUserAndLevel(int index) {
return userAndLevel_.get(index);
}
public Sp.ListOrganizationMembersReply.PBUserAndLevelOrBuilder getUserAndLevelOrBuilder(
int index) {
return userAndLevel_.get(index);
}
public static final int TOTAL_COUNT_FIELD_NUMBER = 2;
private int totalCount_;
public boolean hasTotalCount() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getTotalCount() {
return totalCount_;
}
private void initFields() {
userAndLevel_ = Collections.emptyList();
totalCount_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasTotalCount()) {
mii = 0;
return false;
}
for (int i = 0; i < getUserAndLevelCount(); i++) {
if (!getUserAndLevel(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < userAndLevel_.size(); i++) {
output.writeMessage(1, userAndLevel_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(2, totalCount_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < userAndLevel_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, userAndLevel_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(2, totalCount_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationMembersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationMembersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationMembersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationMembersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationMembersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationMembersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationMembersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationMembersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationMembersReply, Builder>
implements
Sp.ListOrganizationMembersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userAndLevel_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
totalCount_ = 0;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationMembersReply getDefaultInstanceForType() {
return Sp.ListOrganizationMembersReply.getDefaultInstance();
}
public Sp.ListOrganizationMembersReply build() {
Sp.ListOrganizationMembersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationMembersReply buildPartial() {
Sp.ListOrganizationMembersReply result = new Sp.ListOrganizationMembersReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
userAndLevel_ = Collections.unmodifiableList(userAndLevel_);
b0_ = (b0_ & ~0x00000001);
}
result.userAndLevel_ = userAndLevel_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000001;
}
result.totalCount_ = totalCount_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationMembersReply other) {
if (other == Sp.ListOrganizationMembersReply.getDefaultInstance()) return this;
if (!other.userAndLevel_.isEmpty()) {
if (userAndLevel_.isEmpty()) {
userAndLevel_ = other.userAndLevel_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUserAndLevelIsMutable();
userAndLevel_.addAll(other.userAndLevel_);
}
}
if (other.hasTotalCount()) {
setTotalCount(other.getTotalCount());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasTotalCount()) {
return false;
}
for (int i = 0; i < getUserAndLevelCount(); i++) {
if (!getUserAndLevel(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationMembersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationMembersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.ListOrganizationMembersReply.PBUserAndLevel> userAndLevel_ =
Collections.emptyList();
private void ensureUserAndLevelIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
userAndLevel_ = new ArrayList<Sp.ListOrganizationMembersReply.PBUserAndLevel>(userAndLevel_);
b0_ |= 0x00000001;
}
}
public List<Sp.ListOrganizationMembersReply.PBUserAndLevel> getUserAndLevelList() {
return Collections.unmodifiableList(userAndLevel_);
}
public int getUserAndLevelCount() {
return userAndLevel_.size();
}
public Sp.ListOrganizationMembersReply.PBUserAndLevel getUserAndLevel(int index) {
return userAndLevel_.get(index);
}
public Builder setUserAndLevel(
int index, Sp.ListOrganizationMembersReply.PBUserAndLevel value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndLevelIsMutable();
userAndLevel_.set(index, value);
return this;
}
public Builder setUserAndLevel(
int index, Sp.ListOrganizationMembersReply.PBUserAndLevel.Builder bdForValue) {
ensureUserAndLevelIsMutable();
userAndLevel_.set(index, bdForValue.build());
return this;
}
public Builder addUserAndLevel(Sp.ListOrganizationMembersReply.PBUserAndLevel value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndLevelIsMutable();
userAndLevel_.add(value);
return this;
}
public Builder addUserAndLevel(
int index, Sp.ListOrganizationMembersReply.PBUserAndLevel value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndLevelIsMutable();
userAndLevel_.add(index, value);
return this;
}
public Builder addUserAndLevel(
Sp.ListOrganizationMembersReply.PBUserAndLevel.Builder bdForValue) {
ensureUserAndLevelIsMutable();
userAndLevel_.add(bdForValue.build());
return this;
}
public Builder addUserAndLevel(
int index, Sp.ListOrganizationMembersReply.PBUserAndLevel.Builder bdForValue) {
ensureUserAndLevelIsMutable();
userAndLevel_.add(index, bdForValue.build());
return this;
}
public Builder addAllUserAndLevel(
Iterable<? extends Sp.ListOrganizationMembersReply.PBUserAndLevel> values) {
ensureUserAndLevelIsMutable();
AbstractMessageLite.Builder.addAll(
values, userAndLevel_);
return this;
}
public Builder clearUserAndLevel() {
userAndLevel_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeUserAndLevel(int index) {
ensureUserAndLevelIsMutable();
userAndLevel_.remove(index);
return this;
}
private int totalCount_ ;
public boolean hasTotalCount() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getTotalCount() {
return totalCount_;
}
public Builder setTotalCount(int value) {
b0_ |= 0x00000002;
totalCount_ = value;
return this;
}
public Builder clearTotalCount() {
b0_ = (b0_ & ~0x00000002);
totalCount_ = 0;
return this;
}
}
static {
defaultInstance = new ListOrganizationMembersReply(true);
defaultInstance.initFields();
}
}
public interface GetOrganizationIDReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrgId();
String getOrgId();
ByteString
getOrgIdBytes();
}
public static final class GetOrganizationIDReply extends
GeneratedMessageLite implements
GetOrganizationIDReplyOrBuilder {
private GetOrganizationIDReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetOrganizationIDReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetOrganizationIDReply defaultInstance;
public static GetOrganizationIDReply getDefaultInstance() {
return defaultInstance;
}
public GetOrganizationIDReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetOrganizationIDReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
orgId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetOrganizationIDReply> PARSER =
new AbstractParser<GetOrganizationIDReply>() {
public GetOrganizationIDReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetOrganizationIDReply(input, er);
}
};
@Override
public Parser<GetOrganizationIDReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORG_ID_FIELD_NUMBER = 1;
private Object orgId_;
public boolean hasOrgId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgId() {
Object ref = orgId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
orgId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOrgId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getOrgIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getOrgIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetOrganizationIDReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationIDReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationIDReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationIDReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationIDReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationIDReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetOrganizationIDReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetOrganizationIDReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetOrganizationIDReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationIDReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetOrganizationIDReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetOrganizationIDReply, Builder>
implements
Sp.GetOrganizationIDReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
orgId_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetOrganizationIDReply getDefaultInstanceForType() {
return Sp.GetOrganizationIDReply.getDefaultInstance();
}
public Sp.GetOrganizationIDReply build() {
Sp.GetOrganizationIDReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetOrganizationIDReply buildPartial() {
Sp.GetOrganizationIDReply result = new Sp.GetOrganizationIDReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.orgId_ = orgId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetOrganizationIDReply other) {
if (other == Sp.GetOrganizationIDReply.getDefaultInstance()) return this;
if (other.hasOrgId()) {
b0_ |= 0x00000001;
orgId_ = other.orgId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOrgId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetOrganizationIDReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetOrganizationIDReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object orgId_ = "";
public boolean hasOrgId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgId() {
Object ref = orgId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrgId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgId_ = value;
return this;
}
public Builder clearOrgId() {
b0_ = (b0_ & ~0x00000001);
orgId_ = getDefaultInstance().getOrgId();
return this;
}
public Builder setOrgIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgId_ = value;
return this;
}
}
static {
defaultInstance = new GetOrganizationIDReply(true);
defaultInstance.initFields();
}
}
public interface GetAuthorizationLevelReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasLevel();
Sp.PBAuthorizationLevel getLevel();
}
public static final class GetAuthorizationLevelReply extends
GeneratedMessageLite implements
GetAuthorizationLevelReplyOrBuilder {
private GetAuthorizationLevelReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetAuthorizationLevelReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetAuthorizationLevelReply defaultInstance;
public static GetAuthorizationLevelReply getDefaultInstance() {
return defaultInstance;
}
public GetAuthorizationLevelReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetAuthorizationLevelReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
int rawValue = input.readEnum();
Sp.PBAuthorizationLevel value = Sp.PBAuthorizationLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000001;
level_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetAuthorizationLevelReply> PARSER =
new AbstractParser<GetAuthorizationLevelReply>() {
public GetAuthorizationLevelReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetAuthorizationLevelReply(input, er);
}
};
@Override
public Parser<GetAuthorizationLevelReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int LEVEL_FIELD_NUMBER = 1;
private Sp.PBAuthorizationLevel level_;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBAuthorizationLevel getLevel() {
return level_;
}
private void initFields() {
level_ = Sp.PBAuthorizationLevel.USER;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasLevel()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeEnum(1, level_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeEnumSize(1, level_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetAuthorizationLevelReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetAuthorizationLevelReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetAuthorizationLevelReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetAuthorizationLevelReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetAuthorizationLevelReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetAuthorizationLevelReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetAuthorizationLevelReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetAuthorizationLevelReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetAuthorizationLevelReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetAuthorizationLevelReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetAuthorizationLevelReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetAuthorizationLevelReply, Builder>
implements
Sp.GetAuthorizationLevelReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
level_ = Sp.PBAuthorizationLevel.USER;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetAuthorizationLevelReply getDefaultInstanceForType() {
return Sp.GetAuthorizationLevelReply.getDefaultInstance();
}
public Sp.GetAuthorizationLevelReply build() {
Sp.GetAuthorizationLevelReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetAuthorizationLevelReply buildPartial() {
Sp.GetAuthorizationLevelReply result = new Sp.GetAuthorizationLevelReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.level_ = level_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetAuthorizationLevelReply other) {
if (other == Sp.GetAuthorizationLevelReply.getDefaultInstance()) return this;
if (other.hasLevel()) {
setLevel(other.getLevel());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasLevel()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetAuthorizationLevelReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetAuthorizationLevelReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBAuthorizationLevel level_ = Sp.PBAuthorizationLevel.USER;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBAuthorizationLevel getLevel() {
return level_;
}
public Builder setLevel(Sp.PBAuthorizationLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
level_ = value;
return this;
}
public Builder clearLevel() {
b0_ = (b0_ & ~0x00000001);
level_ = Sp.PBAuthorizationLevel.USER;
return this;
}
}
static {
defaultInstance = new GetAuthorizationLevelReply(true);
defaultInstance.initFields();
}
}
public interface PBUserOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserEmail();
String getUserEmail();
ByteString
getUserEmailBytes();
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
boolean hasTwoFactorEnforced();
boolean getTwoFactorEnforced();
}
public static final class PBUser extends
GeneratedMessageLite implements
PBUserOrBuilder {
private PBUser(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBUser(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBUser defaultInstance;
public static PBUser getDefaultInstance() {
return defaultInstance;
}
public PBUser getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBUser(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userEmail_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
firstName_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
lastName_ = bs;
break;
}
case 32: {
b0_ |= 0x00000008;
twoFactorEnforced_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBUser> PARSER =
new AbstractParser<PBUser>() {
public PBUser parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBUser(input, er);
}
};
@Override
public Parser<PBUser> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_EMAIL_FIELD_NUMBER = 1;
private Object userEmail_;
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int FIRST_NAME_FIELD_NUMBER = 2;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LAST_NAME_FIELD_NUMBER = 3;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int TWO_FACTOR_ENFORCED_FIELD_NUMBER = 4;
private boolean twoFactorEnforced_;
public boolean hasTwoFactorEnforced() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getTwoFactorEnforced() {
return twoFactorEnforced_;
}
private void initFields() {
userEmail_ = "";
firstName_ = "";
lastName_ = "";
twoFactorEnforced_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserEmail()) {
mii = 0;
return false;
}
if (!hasFirstName()) {
mii = 0;
return false;
}
if (!hasLastName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserEmailBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBool(4, twoFactorEnforced_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserEmailBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBoolSize(4, twoFactorEnforced_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBUser parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBUser parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBUser parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBUser parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBUser parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBUser parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBUser parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBUser parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBUser parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBUser parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBUser prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBUser, Builder>
implements
Sp.PBUserOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userEmail_ = "";
b0_ = (b0_ & ~0x00000001);
firstName_ = "";
b0_ = (b0_ & ~0x00000002);
lastName_ = "";
b0_ = (b0_ & ~0x00000004);
twoFactorEnforced_ = false;
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBUser getDefaultInstanceForType() {
return Sp.PBUser.getDefaultInstance();
}
public Sp.PBUser build() {
Sp.PBUser result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBUser buildPartial() {
Sp.PBUser result = new Sp.PBUser(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userEmail_ = userEmail_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.lastName_ = lastName_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.twoFactorEnforced_ = twoFactorEnforced_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBUser other) {
if (other == Sp.PBUser.getDefaultInstance()) return this;
if (other.hasUserEmail()) {
b0_ |= 0x00000001;
userEmail_ = other.userEmail_;
}
if (other.hasFirstName()) {
b0_ |= 0x00000002;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000004;
lastName_ = other.lastName_;
}
if (other.hasTwoFactorEnforced()) {
setTwoFactorEnforced(other.getTwoFactorEnforced());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserEmail()) {
return false;
}
if (!hasFirstName()) {
return false;
}
if (!hasLastName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBUser pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBUser) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userEmail_ = "";
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
public Builder clearUserEmail() {
b0_ = (b0_ & ~0x00000001);
userEmail_ = getDefaultInstance().getUserEmail();
return this;
}
public Builder setUserEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000002);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000004);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
private boolean twoFactorEnforced_ ;
public boolean hasTwoFactorEnforced() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getTwoFactorEnforced() {
return twoFactorEnforced_;
}
public Builder setTwoFactorEnforced(boolean value) {
b0_ |= 0x00000008;
twoFactorEnforced_ = value;
return this;
}
public Builder clearTwoFactorEnforced() {
b0_ = (b0_ & ~0x00000008);
twoFactorEnforced_ = false;
return this;
}
}
static {
defaultInstance = new PBUser(true);
defaultInstance.initFields();
}
}
public interface PBGroupOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
boolean hasCommonName();
String getCommonName();
ByteString
getCommonNameBytes();
boolean hasExternallyManaged();
boolean getExternallyManaged();
}
public static final class PBGroup extends
GeneratedMessageLite implements
PBGroupOrBuilder {
private PBGroup(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBGroup(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBGroup defaultInstance;
public static PBGroup getDefaultInstance() {
return defaultInstance;
}
public PBGroup getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBGroup(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
commonName_ = bs;
break;
}
case 24: {
b0_ |= 0x00000004;
externallyManaged_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBGroup> PARSER =
new AbstractParser<PBGroup>() {
public PBGroup parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBGroup(input, er);
}
};
@Override
public Parser<PBGroup> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public static final int COMMON_NAME_FIELD_NUMBER = 2;
private Object commonName_;
public boolean hasCommonName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getCommonName() {
Object ref = commonName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int EXTERNALLY_MANAGED_FIELD_NUMBER = 3;
private boolean externallyManaged_;
public boolean hasExternallyManaged() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getExternallyManaged() {
return externallyManaged_;
}
private void initFields() {
groupId_ = 0;
commonName_ = "";
externallyManaged_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
if (!hasCommonName()) {
mii = 0;
return false;
}
if (!hasExternallyManaged()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getCommonNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBool(3, externallyManaged_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getCommonNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBoolSize(3, externallyManaged_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBGroup parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBGroup parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBGroup parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBGroup parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBGroup parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBGroup parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBGroup parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBGroup parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBGroup parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBGroup parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBGroup prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBGroup, Builder>
implements
Sp.PBGroupOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
commonName_ = "";
b0_ = (b0_ & ~0x00000002);
externallyManaged_ = false;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBGroup getDefaultInstanceForType() {
return Sp.PBGroup.getDefaultInstance();
}
public Sp.PBGroup build() {
Sp.PBGroup result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBGroup buildPartial() {
Sp.PBGroup result = new Sp.PBGroup(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.commonName_ = commonName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.externallyManaged_ = externallyManaged_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBGroup other) {
if (other == Sp.PBGroup.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
if (other.hasCommonName()) {
b0_ |= 0x00000002;
commonName_ = other.commonName_;
}
if (other.hasExternallyManaged()) {
setExternallyManaged(other.getExternallyManaged());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
if (!hasCommonName()) {
return false;
}
if (!hasExternallyManaged()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBGroup pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBGroup) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
private Object commonName_ = "";
public boolean hasCommonName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getCommonName() {
Object ref = commonName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCommonName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
commonName_ = value;
return this;
}
public Builder clearCommonName() {
b0_ = (b0_ & ~0x00000002);
commonName_ = getDefaultInstance().getCommonName();
return this;
}
public Builder setCommonNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
commonName_ = value;
return this;
}
private boolean externallyManaged_ ;
public boolean hasExternallyManaged() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getExternallyManaged() {
return externallyManaged_;
}
public Builder setExternallyManaged(boolean value) {
b0_ |= 0x00000004;
externallyManaged_ = value;
return this;
}
public Builder clearExternallyManaged() {
b0_ = (b0_ & ~0x00000004);
externallyManaged_ = false;
return this;
}
}
static {
defaultInstance = new PBGroup(true);
defaultInstance.initFields();
}
}
public interface SetAuthorizationLevelCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserEmail();
String getUserEmail();
ByteString
getUserEmailBytes();
boolean hasAuthLevel();
Sp.PBAuthorizationLevel getAuthLevel();
}
public static final class SetAuthorizationLevelCall extends
GeneratedMessageLite implements
SetAuthorizationLevelCallOrBuilder {
private SetAuthorizationLevelCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetAuthorizationLevelCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetAuthorizationLevelCall defaultInstance;
public static SetAuthorizationLevelCall getDefaultInstance() {
return defaultInstance;
}
public SetAuthorizationLevelCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetAuthorizationLevelCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userEmail_ = bs;
break;
}
case 16: {
int rawValue = input.readEnum();
Sp.PBAuthorizationLevel value = Sp.PBAuthorizationLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000002;
authLevel_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetAuthorizationLevelCall> PARSER =
new AbstractParser<SetAuthorizationLevelCall>() {
public SetAuthorizationLevelCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetAuthorizationLevelCall(input, er);
}
};
@Override
public Parser<SetAuthorizationLevelCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_EMAIL_FIELD_NUMBER = 1;
private Object userEmail_;
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int AUTH_LEVEL_FIELD_NUMBER = 2;
private Sp.PBAuthorizationLevel authLevel_;
public boolean hasAuthLevel() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBAuthorizationLevel getAuthLevel() {
return authLevel_;
}
private void initFields() {
userEmail_ = "";
authLevel_ = Sp.PBAuthorizationLevel.USER;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserEmail()) {
mii = 0;
return false;
}
if (!hasAuthLevel()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserEmailBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeEnum(2, authLevel_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserEmailBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeEnumSize(2, authLevel_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetAuthorizationLevelCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetAuthorizationLevelCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetAuthorizationLevelCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetAuthorizationLevelCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetAuthorizationLevelCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetAuthorizationLevelCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetAuthorizationLevelCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetAuthorizationLevelCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetAuthorizationLevelCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetAuthorizationLevelCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetAuthorizationLevelCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetAuthorizationLevelCall, Builder>
implements
Sp.SetAuthorizationLevelCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userEmail_ = "";
b0_ = (b0_ & ~0x00000001);
authLevel_ = Sp.PBAuthorizationLevel.USER;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetAuthorizationLevelCall getDefaultInstanceForType() {
return Sp.SetAuthorizationLevelCall.getDefaultInstance();
}
public Sp.SetAuthorizationLevelCall build() {
Sp.SetAuthorizationLevelCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetAuthorizationLevelCall buildPartial() {
Sp.SetAuthorizationLevelCall result = new Sp.SetAuthorizationLevelCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userEmail_ = userEmail_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.authLevel_ = authLevel_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetAuthorizationLevelCall other) {
if (other == Sp.SetAuthorizationLevelCall.getDefaultInstance()) return this;
if (other.hasUserEmail()) {
b0_ |= 0x00000001;
userEmail_ = other.userEmail_;
}
if (other.hasAuthLevel()) {
setAuthLevel(other.getAuthLevel());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserEmail()) {
return false;
}
if (!hasAuthLevel()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetAuthorizationLevelCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetAuthorizationLevelCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userEmail_ = "";
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
public Builder clearUserEmail() {
b0_ = (b0_ & ~0x00000001);
userEmail_ = getDefaultInstance().getUserEmail();
return this;
}
public Builder setUserEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
private Sp.PBAuthorizationLevel authLevel_ = Sp.PBAuthorizationLevel.USER;
public boolean hasAuthLevel() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBAuthorizationLevel getAuthLevel() {
return authLevel_;
}
public Builder setAuthLevel(Sp.PBAuthorizationLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
authLevel_ = value;
return this;
}
public Builder clearAuthLevel() {
b0_ = (b0_ & ~0x00000002);
authLevel_ = Sp.PBAuthorizationLevel.USER;
return this;
}
}
static {
defaultInstance = new SetAuthorizationLevelCall(true);
defaultInstance.initFields();
}
}
public interface SendPasswordResetEmailCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserEmail();
String getUserEmail();
ByteString
getUserEmailBytes();
}
public static final class SendPasswordResetEmailCall extends
GeneratedMessageLite implements
SendPasswordResetEmailCallOrBuilder {
private SendPasswordResetEmailCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SendPasswordResetEmailCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SendPasswordResetEmailCall defaultInstance;
public static SendPasswordResetEmailCall getDefaultInstance() {
return defaultInstance;
}
public SendPasswordResetEmailCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SendPasswordResetEmailCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userEmail_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SendPasswordResetEmailCall> PARSER =
new AbstractParser<SendPasswordResetEmailCall>() {
public SendPasswordResetEmailCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SendPasswordResetEmailCall(input, er);
}
};
@Override
public Parser<SendPasswordResetEmailCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_EMAIL_FIELD_NUMBER = 1;
private Object userEmail_;
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userEmail_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserEmail()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserEmailBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserEmailBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SendPasswordResetEmailCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SendPasswordResetEmailCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SendPasswordResetEmailCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SendPasswordResetEmailCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SendPasswordResetEmailCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SendPasswordResetEmailCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SendPasswordResetEmailCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SendPasswordResetEmailCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SendPasswordResetEmailCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SendPasswordResetEmailCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SendPasswordResetEmailCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SendPasswordResetEmailCall, Builder>
implements
Sp.SendPasswordResetEmailCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userEmail_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SendPasswordResetEmailCall getDefaultInstanceForType() {
return Sp.SendPasswordResetEmailCall.getDefaultInstance();
}
public Sp.SendPasswordResetEmailCall build() {
Sp.SendPasswordResetEmailCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SendPasswordResetEmailCall buildPartial() {
Sp.SendPasswordResetEmailCall result = new Sp.SendPasswordResetEmailCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userEmail_ = userEmail_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SendPasswordResetEmailCall other) {
if (other == Sp.SendPasswordResetEmailCall.getDefaultInstance()) return this;
if (other.hasUserEmail()) {
b0_ |= 0x00000001;
userEmail_ = other.userEmail_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserEmail()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SendPasswordResetEmailCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SendPasswordResetEmailCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userEmail_ = "";
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
public Builder clearUserEmail() {
b0_ = (b0_ & ~0x00000001);
userEmail_ = getDefaultInstance().getUserEmail();
return this;
}
public Builder setUserEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
}
static {
defaultInstance = new SendPasswordResetEmailCall(true);
defaultInstance.initFields();
}
}
public interface ResetPasswordCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasPasswordResetToken();
String getPasswordResetToken();
ByteString
getPasswordResetTokenBytes();
boolean hasNewCredentials();
ByteString getNewCredentials();
}
public static final class ResetPasswordCall extends
GeneratedMessageLite implements
ResetPasswordCallOrBuilder {
private ResetPasswordCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ResetPasswordCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ResetPasswordCall defaultInstance;
public static ResetPasswordCall getDefaultInstance() {
return defaultInstance;
}
public ResetPasswordCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ResetPasswordCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
passwordResetToken_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
newCredentials_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ResetPasswordCall> PARSER =
new AbstractParser<ResetPasswordCall>() {
public ResetPasswordCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ResetPasswordCall(input, er);
}
};
@Override
public Parser<ResetPasswordCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int PASSWORD_RESET_TOKEN_FIELD_NUMBER = 1;
private Object passwordResetToken_;
public boolean hasPasswordResetToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getPasswordResetToken() {
Object ref = passwordResetToken_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
passwordResetToken_ = s;
}
return s;
}
}
public ByteString
getPasswordResetTokenBytes() {
Object ref = passwordResetToken_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
passwordResetToken_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int NEW_CREDENTIALS_FIELD_NUMBER = 2;
private ByteString newCredentials_;
public boolean hasNewCredentials() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getNewCredentials() {
return newCredentials_;
}
private void initFields() {
passwordResetToken_ = "";
newCredentials_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasPasswordResetToken()) {
mii = 0;
return false;
}
if (!hasNewCredentials()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getPasswordResetTokenBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, newCredentials_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getPasswordResetTokenBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, newCredentials_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ResetPasswordCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResetPasswordCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResetPasswordCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ResetPasswordCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ResetPasswordCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResetPasswordCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ResetPasswordCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ResetPasswordCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ResetPasswordCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ResetPasswordCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ResetPasswordCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ResetPasswordCall, Builder>
implements
Sp.ResetPasswordCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
passwordResetToken_ = "";
b0_ = (b0_ & ~0x00000001);
newCredentials_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ResetPasswordCall getDefaultInstanceForType() {
return Sp.ResetPasswordCall.getDefaultInstance();
}
public Sp.ResetPasswordCall build() {
Sp.ResetPasswordCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ResetPasswordCall buildPartial() {
Sp.ResetPasswordCall result = new Sp.ResetPasswordCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.passwordResetToken_ = passwordResetToken_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.newCredentials_ = newCredentials_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ResetPasswordCall other) {
if (other == Sp.ResetPasswordCall.getDefaultInstance()) return this;
if (other.hasPasswordResetToken()) {
b0_ |= 0x00000001;
passwordResetToken_ = other.passwordResetToken_;
}
if (other.hasNewCredentials()) {
setNewCredentials(other.getNewCredentials());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasPasswordResetToken()) {
return false;
}
if (!hasNewCredentials()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ResetPasswordCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ResetPasswordCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object passwordResetToken_ = "";
public boolean hasPasswordResetToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getPasswordResetToken() {
Object ref = passwordResetToken_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
passwordResetToken_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getPasswordResetTokenBytes() {
Object ref = passwordResetToken_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
passwordResetToken_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setPasswordResetToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
passwordResetToken_ = value;
return this;
}
public Builder clearPasswordResetToken() {
b0_ = (b0_ & ~0x00000001);
passwordResetToken_ = getDefaultInstance().getPasswordResetToken();
return this;
}
public Builder setPasswordResetTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
passwordResetToken_ = value;
return this;
}
private ByteString newCredentials_ = ByteString.EMPTY;
public boolean hasNewCredentials() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getNewCredentials() {
return newCredentials_;
}
public Builder setNewCredentials(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
newCredentials_ = value;
return this;
}
public Builder clearNewCredentials() {
b0_ = (b0_ & ~0x00000002);
newCredentials_ = getDefaultInstance().getNewCredentials();
return this;
}
}
static {
defaultInstance = new ResetPasswordCall(true);
defaultInstance.initFields();
}
}
public interface ChangePasswordCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasOldCredentials();
ByteString getOldCredentials();
boolean hasNewCredentials();
ByteString getNewCredentials();
}
public static final class ChangePasswordCall extends
GeneratedMessageLite implements
ChangePasswordCallOrBuilder {
private ChangePasswordCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ChangePasswordCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ChangePasswordCall defaultInstance;
public static ChangePasswordCall getDefaultInstance() {
return defaultInstance;
}
public ChangePasswordCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ChangePasswordCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
oldCredentials_ = input.readBytes();
break;
}
case 18: {
b0_ |= 0x00000002;
newCredentials_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ChangePasswordCall> PARSER =
new AbstractParser<ChangePasswordCall>() {
public ChangePasswordCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ChangePasswordCall(input, er);
}
};
@Override
public Parser<ChangePasswordCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int OLD_CREDENTIALS_FIELD_NUMBER = 1;
private ByteString oldCredentials_;
public boolean hasOldCredentials() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getOldCredentials() {
return oldCredentials_;
}
public static final int NEW_CREDENTIALS_FIELD_NUMBER = 2;
private ByteString newCredentials_;
public boolean hasNewCredentials() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getNewCredentials() {
return newCredentials_;
}
private void initFields() {
oldCredentials_ = ByteString.EMPTY;
newCredentials_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOldCredentials()) {
mii = 0;
return false;
}
if (!hasNewCredentials()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, oldCredentials_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, newCredentials_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, oldCredentials_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, newCredentials_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ChangePasswordCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ChangePasswordCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ChangePasswordCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ChangePasswordCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ChangePasswordCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ChangePasswordCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ChangePasswordCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ChangePasswordCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ChangePasswordCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ChangePasswordCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ChangePasswordCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ChangePasswordCall, Builder>
implements
Sp.ChangePasswordCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
oldCredentials_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
newCredentials_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ChangePasswordCall getDefaultInstanceForType() {
return Sp.ChangePasswordCall.getDefaultInstance();
}
public Sp.ChangePasswordCall build() {
Sp.ChangePasswordCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ChangePasswordCall buildPartial() {
Sp.ChangePasswordCall result = new Sp.ChangePasswordCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.oldCredentials_ = oldCredentials_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.newCredentials_ = newCredentials_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ChangePasswordCall other) {
if (other == Sp.ChangePasswordCall.getDefaultInstance()) return this;
if (other.hasOldCredentials()) {
setOldCredentials(other.getOldCredentials());
}
if (other.hasNewCredentials()) {
setNewCredentials(other.getNewCredentials());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOldCredentials()) {
return false;
}
if (!hasNewCredentials()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ChangePasswordCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ChangePasswordCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString oldCredentials_ = ByteString.EMPTY;
public boolean hasOldCredentials() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getOldCredentials() {
return oldCredentials_;
}
public Builder setOldCredentials(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
oldCredentials_ = value;
return this;
}
public Builder clearOldCredentials() {
b0_ = (b0_ & ~0x00000001);
oldCredentials_ = getDefaultInstance().getOldCredentials();
return this;
}
private ByteString newCredentials_ = ByteString.EMPTY;
public boolean hasNewCredentials() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getNewCredentials() {
return newCredentials_;
}
public Builder setNewCredentials(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
newCredentials_ = value;
return this;
}
public Builder clearNewCredentials() {
b0_ = (b0_ & ~0x00000002);
newCredentials_ = getDefaultInstance().getNewCredentials();
return this;
}
}
static {
defaultInstance = new ChangePasswordCall(true);
defaultInstance.initFields();
}
}
public interface GetUserCRLCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasCrlEpoch();
long getCrlEpoch();
}
public static final class GetUserCRLCall extends
GeneratedMessageLite implements
GetUserCRLCallOrBuilder {
private GetUserCRLCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUserCRLCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUserCRLCall defaultInstance;
public static GetUserCRLCall getDefaultInstance() {
return defaultInstance;
}
public GetUserCRLCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUserCRLCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
crlEpoch_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUserCRLCall> PARSER =
new AbstractParser<GetUserCRLCall>() {
public GetUserCRLCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUserCRLCall(input, er);
}
};
@Override
public Parser<GetUserCRLCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CRL_EPOCH_FIELD_NUMBER = 1;
private long crlEpoch_;
public boolean hasCrlEpoch() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getCrlEpoch() {
return crlEpoch_;
}
private void initFields() {
crlEpoch_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCrlEpoch()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt64(1, crlEpoch_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt64Size(1, crlEpoch_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUserCRLCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserCRLCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserCRLCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUserCRLCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUserCRLCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserCRLCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUserCRLCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUserCRLCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUserCRLCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUserCRLCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUserCRLCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUserCRLCall, Builder>
implements
Sp.GetUserCRLCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
crlEpoch_ = 0L;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUserCRLCall getDefaultInstanceForType() {
return Sp.GetUserCRLCall.getDefaultInstance();
}
public Sp.GetUserCRLCall build() {
Sp.GetUserCRLCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUserCRLCall buildPartial() {
Sp.GetUserCRLCall result = new Sp.GetUserCRLCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.crlEpoch_ = crlEpoch_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUserCRLCall other) {
if (other == Sp.GetUserCRLCall.getDefaultInstance()) return this;
if (other.hasCrlEpoch()) {
setCrlEpoch(other.getCrlEpoch());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCrlEpoch()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUserCRLCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUserCRLCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private long crlEpoch_ ;
public boolean hasCrlEpoch() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getCrlEpoch() {
return crlEpoch_;
}
public Builder setCrlEpoch(long value) {
b0_ |= 0x00000001;
crlEpoch_ = value;
return this;
}
public Builder clearCrlEpoch() {
b0_ = (b0_ & ~0x00000001);
crlEpoch_ = 0L;
return this;
}
}
static {
defaultInstance = new GetUserCRLCall(true);
defaultInstance.initFields();
}
}
public interface UnlinkDeviceCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasErase();
boolean getErase();
}
public static final class UnlinkDeviceCall extends
GeneratedMessageLite implements
UnlinkDeviceCallOrBuilder {
private UnlinkDeviceCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private UnlinkDeviceCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final UnlinkDeviceCall defaultInstance;
public static UnlinkDeviceCall getDefaultInstance() {
return defaultInstance;
}
public UnlinkDeviceCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private UnlinkDeviceCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 16: {
b0_ |= 0x00000002;
erase_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<UnlinkDeviceCall> PARSER =
new AbstractParser<UnlinkDeviceCall>() {
public UnlinkDeviceCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new UnlinkDeviceCall(input, er);
}
};
@Override
public Parser<UnlinkDeviceCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int ERASE_FIELD_NUMBER = 2;
private boolean erase_;
public boolean hasErase() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getErase() {
return erase_;
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
erase_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasErase()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, erase_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, erase_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.UnlinkDeviceCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.UnlinkDeviceCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.UnlinkDeviceCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.UnlinkDeviceCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.UnlinkDeviceCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.UnlinkDeviceCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.UnlinkDeviceCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.UnlinkDeviceCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.UnlinkDeviceCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.UnlinkDeviceCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.UnlinkDeviceCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.UnlinkDeviceCall, Builder>
implements
Sp.UnlinkDeviceCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
erase_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.UnlinkDeviceCall getDefaultInstanceForType() {
return Sp.UnlinkDeviceCall.getDefaultInstance();
}
public Sp.UnlinkDeviceCall build() {
Sp.UnlinkDeviceCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.UnlinkDeviceCall buildPartial() {
Sp.UnlinkDeviceCall result = new Sp.UnlinkDeviceCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.erase_ = erase_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.UnlinkDeviceCall other) {
if (other == Sp.UnlinkDeviceCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasErase()) {
setErase(other.getErase());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasErase()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.UnlinkDeviceCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.UnlinkDeviceCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private boolean erase_ ;
public boolean hasErase() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getErase() {
return erase_;
}
public Builder setErase(boolean value) {
b0_ |= 0x00000002;
erase_ = value;
return this;
}
public Builder clearErase() {
b0_ = (b0_ & ~0x00000002);
erase_ = false;
return this;
}
}
static {
defaultInstance = new UnlinkDeviceCall(true);
defaultInstance.initFields();
}
}
public interface GetDeviceInfoCallOrBuilder extends
MessageLiteOrBuilder {
List<ByteString> getDeviceIdList();
int getDeviceIdCount();
ByteString getDeviceId(int index);
}
public static final class GetDeviceInfoCall extends
GeneratedMessageLite implements
GetDeviceInfoCallOrBuilder {
private GetDeviceInfoCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetDeviceInfoCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetDeviceInfoCall defaultInstance;
public static GetDeviceInfoCall getDefaultInstance() {
return defaultInstance;
}
public GetDeviceInfoCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetDeviceInfoCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
deviceId_ = new ArrayList<ByteString>();
mutable_b0_ |= 0x00000001;
}
deviceId_.add(input.readBytes());
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
deviceId_ = Collections.unmodifiableList(deviceId_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetDeviceInfoCall> PARSER =
new AbstractParser<GetDeviceInfoCall>() {
public GetDeviceInfoCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetDeviceInfoCall(input, er);
}
};
@Override
public Parser<GetDeviceInfoCall> getParserForType() {
return PARSER;
}
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private List<ByteString> deviceId_;
public List<ByteString>
getDeviceIdList() {
return deviceId_;
}
public int getDeviceIdCount() {
return deviceId_.size();
}
public ByteString getDeviceId(int index) {
return deviceId_.get(index);
}
private void initFields() {
deviceId_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < deviceId_.size(); i++) {
output.writeBytes(1, deviceId_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
{
int dataSize = 0;
for (int i = 0; i < deviceId_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(deviceId_.get(i));
}
size += dataSize;
size += 1 * getDeviceIdList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetDeviceInfoCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetDeviceInfoCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetDeviceInfoCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetDeviceInfoCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetDeviceInfoCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetDeviceInfoCall, Builder>
implements
Sp.GetDeviceInfoCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetDeviceInfoCall getDefaultInstanceForType() {
return Sp.GetDeviceInfoCall.getDefaultInstance();
}
public Sp.GetDeviceInfoCall build() {
Sp.GetDeviceInfoCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetDeviceInfoCall buildPartial() {
Sp.GetDeviceInfoCall result = new Sp.GetDeviceInfoCall(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
deviceId_ = Collections.unmodifiableList(deviceId_);
b0_ = (b0_ & ~0x00000001);
}
result.deviceId_ = deviceId_;
return result;
}
public Builder mergeFrom(Sp.GetDeviceInfoCall other) {
if (other == Sp.GetDeviceInfoCall.getDefaultInstance()) return this;
if (!other.deviceId_.isEmpty()) {
if (deviceId_.isEmpty()) {
deviceId_ = other.deviceId_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureDeviceIdIsMutable();
deviceId_.addAll(other.deviceId_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetDeviceInfoCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetDeviceInfoCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<ByteString> deviceId_ = Collections.emptyList();
private void ensureDeviceIdIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
deviceId_ = new ArrayList<ByteString>(deviceId_);
b0_ |= 0x00000001;
}
}
public List<ByteString>
getDeviceIdList() {
return Collections.unmodifiableList(deviceId_);
}
public int getDeviceIdCount() {
return deviceId_.size();
}
public ByteString getDeviceId(int index) {
return deviceId_.get(index);
}
public Builder setDeviceId(
int index, ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceIdIsMutable();
deviceId_.set(index, value);
return this;
}
public Builder addDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceIdIsMutable();
deviceId_.add(value);
return this;
}
public Builder addAllDeviceId(
Iterable<? extends ByteString> values) {
ensureDeviceIdIsMutable();
AbstractMessageLite.Builder.addAll(
values, deviceId_);
return this;
}
public Builder clearDeviceId() {
deviceId_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
}
static {
defaultInstance = new GetDeviceInfoCall(true);
defaultInstance.initFields();
}
}
public interface GetDeviceInfoReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.GetDeviceInfoReply.PBDeviceInfo> 
getDeviceInfoList();
Sp.GetDeviceInfoReply.PBDeviceInfo getDeviceInfo(int index);
int getDeviceInfoCount();
}
public static final class GetDeviceInfoReply extends
GeneratedMessageLite implements
GetDeviceInfoReplyOrBuilder {
private GetDeviceInfoReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetDeviceInfoReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetDeviceInfoReply defaultInstance;
public static GetDeviceInfoReply getDefaultInstance() {
return defaultInstance;
}
public GetDeviceInfoReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetDeviceInfoReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
deviceInfo_ = new ArrayList<Sp.GetDeviceInfoReply.PBDeviceInfo>();
mutable_b0_ |= 0x00000001;
}
deviceInfo_.add(input.readMessage(Sp.GetDeviceInfoReply.PBDeviceInfo.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
deviceInfo_ = Collections.unmodifiableList(deviceInfo_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetDeviceInfoReply> PARSER =
new AbstractParser<GetDeviceInfoReply>() {
public GetDeviceInfoReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetDeviceInfoReply(input, er);
}
};
@Override
public Parser<GetDeviceInfoReply> getParserForType() {
return PARSER;
}
public interface PBDeviceInfoOrBuilder extends
MessageLiteOrBuilder {
boolean hasOwner();
Sp.PBUser getOwner();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
}
public static final class PBDeviceInfo extends
GeneratedMessageLite implements
PBDeviceInfoOrBuilder {
private PBDeviceInfo(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBDeviceInfo(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBDeviceInfo defaultInstance;
public static PBDeviceInfo getDefaultInstance() {
return defaultInstance;
}
public PBDeviceInfo getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBDeviceInfo(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBUser.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = owner_.toBuilder();
}
owner_ = input.readMessage(Sp.PBUser.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(owner_);
owner_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
deviceName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBDeviceInfo> PARSER =
new AbstractParser<PBDeviceInfo>() {
public PBDeviceInfo parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBDeviceInfo(input, er);
}
};
@Override
public Parser<PBDeviceInfo> getParserForType() {
return PARSER;
}
private int b0_;
public static final int OWNER_FIELD_NUMBER = 1;
private Sp.PBUser owner_;
public boolean hasOwner() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getOwner() {
return owner_;
}
public static final int DEVICE_NAME_FIELD_NUMBER = 2;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
owner_ = Sp.PBUser.getDefaultInstance();
deviceName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (hasOwner()) {
if (!getOwner().isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, owner_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getDeviceNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, owner_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getDeviceNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoReply.PBDeviceInfo parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetDeviceInfoReply.PBDeviceInfo prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetDeviceInfoReply.PBDeviceInfo, Builder>
implements
Sp.GetDeviceInfoReply.PBDeviceInfoOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
owner_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
deviceName_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetDeviceInfoReply.PBDeviceInfo getDefaultInstanceForType() {
return Sp.GetDeviceInfoReply.PBDeviceInfo.getDefaultInstance();
}
public Sp.GetDeviceInfoReply.PBDeviceInfo build() {
Sp.GetDeviceInfoReply.PBDeviceInfo result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetDeviceInfoReply.PBDeviceInfo buildPartial() {
Sp.GetDeviceInfoReply.PBDeviceInfo result = new Sp.GetDeviceInfoReply.PBDeviceInfo(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.owner_ = owner_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.deviceName_ = deviceName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetDeviceInfoReply.PBDeviceInfo other) {
if (other == Sp.GetDeviceInfoReply.PBDeviceInfo.getDefaultInstance()) return this;
if (other.hasOwner()) {
mergeOwner(other.getOwner());
}
if (other.hasDeviceName()) {
b0_ |= 0x00000002;
deviceName_ = other.deviceName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (hasOwner()) {
if (!getOwner().isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetDeviceInfoReply.PBDeviceInfo pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetDeviceInfoReply.PBDeviceInfo) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBUser owner_ = Sp.PBUser.getDefaultInstance();
public boolean hasOwner() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getOwner() {
return owner_;
}
public Builder setOwner(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
owner_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setOwner(
Sp.PBUser.Builder bdForValue) {
owner_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeOwner(Sp.PBUser value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
owner_ != Sp.PBUser.getDefaultInstance()) {
owner_ =
Sp.PBUser.newBuilder(owner_).mergeFrom(value).buildPartial();
} else {
owner_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearOwner() {
owner_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000002);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
}
static {
defaultInstance = new PBDeviceInfo(true);
defaultInstance.initFields();
}
}
public static final int DEVICE_INFO_FIELD_NUMBER = 1;
private List<Sp.GetDeviceInfoReply.PBDeviceInfo> deviceInfo_;
public List<Sp.GetDeviceInfoReply.PBDeviceInfo> getDeviceInfoList() {
return deviceInfo_;
}
public List<? extends Sp.GetDeviceInfoReply.PBDeviceInfoOrBuilder> 
getDeviceInfoOrBuilderList() {
return deviceInfo_;
}
public int getDeviceInfoCount() {
return deviceInfo_.size();
}
public Sp.GetDeviceInfoReply.PBDeviceInfo getDeviceInfo(int index) {
return deviceInfo_.get(index);
}
public Sp.GetDeviceInfoReply.PBDeviceInfoOrBuilder getDeviceInfoOrBuilder(
int index) {
return deviceInfo_.get(index);
}
private void initFields() {
deviceInfo_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getDeviceInfoCount(); i++) {
if (!getDeviceInfo(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < deviceInfo_.size(); i++) {
output.writeMessage(1, deviceInfo_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < deviceInfo_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, deviceInfo_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetDeviceInfoReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetDeviceInfoReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetDeviceInfoReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetDeviceInfoReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetDeviceInfoReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetDeviceInfoReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetDeviceInfoReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetDeviceInfoReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetDeviceInfoReply, Builder>
implements
Sp.GetDeviceInfoReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceInfo_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetDeviceInfoReply getDefaultInstanceForType() {
return Sp.GetDeviceInfoReply.getDefaultInstance();
}
public Sp.GetDeviceInfoReply build() {
Sp.GetDeviceInfoReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetDeviceInfoReply buildPartial() {
Sp.GetDeviceInfoReply result = new Sp.GetDeviceInfoReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
deviceInfo_ = Collections.unmodifiableList(deviceInfo_);
b0_ = (b0_ & ~0x00000001);
}
result.deviceInfo_ = deviceInfo_;
return result;
}
public Builder mergeFrom(Sp.GetDeviceInfoReply other) {
if (other == Sp.GetDeviceInfoReply.getDefaultInstance()) return this;
if (!other.deviceInfo_.isEmpty()) {
if (deviceInfo_.isEmpty()) {
deviceInfo_ = other.deviceInfo_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureDeviceInfoIsMutable();
deviceInfo_.addAll(other.deviceInfo_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getDeviceInfoCount(); i++) {
if (!getDeviceInfo(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetDeviceInfoReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetDeviceInfoReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.GetDeviceInfoReply.PBDeviceInfo> deviceInfo_ =
Collections.emptyList();
private void ensureDeviceInfoIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
deviceInfo_ = new ArrayList<Sp.GetDeviceInfoReply.PBDeviceInfo>(deviceInfo_);
b0_ |= 0x00000001;
}
}
public List<Sp.GetDeviceInfoReply.PBDeviceInfo> getDeviceInfoList() {
return Collections.unmodifiableList(deviceInfo_);
}
public int getDeviceInfoCount() {
return deviceInfo_.size();
}
public Sp.GetDeviceInfoReply.PBDeviceInfo getDeviceInfo(int index) {
return deviceInfo_.get(index);
}
public Builder setDeviceInfo(
int index, Sp.GetDeviceInfoReply.PBDeviceInfo value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceInfoIsMutable();
deviceInfo_.set(index, value);
return this;
}
public Builder setDeviceInfo(
int index, Sp.GetDeviceInfoReply.PBDeviceInfo.Builder bdForValue) {
ensureDeviceInfoIsMutable();
deviceInfo_.set(index, bdForValue.build());
return this;
}
public Builder addDeviceInfo(Sp.GetDeviceInfoReply.PBDeviceInfo value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceInfoIsMutable();
deviceInfo_.add(value);
return this;
}
public Builder addDeviceInfo(
int index, Sp.GetDeviceInfoReply.PBDeviceInfo value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceInfoIsMutable();
deviceInfo_.add(index, value);
return this;
}
public Builder addDeviceInfo(
Sp.GetDeviceInfoReply.PBDeviceInfo.Builder bdForValue) {
ensureDeviceInfoIsMutable();
deviceInfo_.add(bdForValue.build());
return this;
}
public Builder addDeviceInfo(
int index, Sp.GetDeviceInfoReply.PBDeviceInfo.Builder bdForValue) {
ensureDeviceInfoIsMutable();
deviceInfo_.add(index, bdForValue.build());
return this;
}
public Builder addAllDeviceInfo(
Iterable<? extends Sp.GetDeviceInfoReply.PBDeviceInfo> values) {
ensureDeviceInfoIsMutable();
AbstractMessageLite.Builder.addAll(
values, deviceInfo_);
return this;
}
public Builder clearDeviceInfo() {
deviceInfo_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeDeviceInfo(int index) {
ensureDeviceInfoIsMutable();
deviceInfo_.remove(index);
return this;
}
}
static {
defaultInstance = new GetDeviceInfoReply(true);
defaultInstance.initFields();
}
}
public interface ListUserDevicesCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
}
public static final class ListUserDevicesCall extends
GeneratedMessageLite implements
ListUserDevicesCallOrBuilder {
private ListUserDevicesCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUserDevicesCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUserDevicesCall defaultInstance;
public static ListUserDevicesCall getDefaultInstance() {
return defaultInstance;
}
public ListUserDevicesCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUserDevicesCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUserDevicesCall> PARSER =
new AbstractParser<ListUserDevicesCall>() {
public ListUserDevicesCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUserDevicesCall(input, er);
}
};
@Override
public Parser<ListUserDevicesCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUserDevicesCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUserDevicesCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUserDevicesCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUserDevicesCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUserDevicesCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUserDevicesCall, Builder>
implements
Sp.ListUserDevicesCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUserDevicesCall getDefaultInstanceForType() {
return Sp.ListUserDevicesCall.getDefaultInstance();
}
public Sp.ListUserDevicesCall build() {
Sp.ListUserDevicesCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUserDevicesCall buildPartial() {
Sp.ListUserDevicesCall result = new Sp.ListUserDevicesCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListUserDevicesCall other) {
if (other == Sp.ListUserDevicesCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUserDevicesCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUserDevicesCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
}
static {
defaultInstance = new ListUserDevicesCall(true);
defaultInstance.initFields();
}
}
public interface ListUserDevicesReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.ListUserDevicesReply.PBDevice> 
getDeviceList();
Sp.ListUserDevicesReply.PBDevice getDevice(int index);
int getDeviceCount();
}
public static final class ListUserDevicesReply extends
GeneratedMessageLite implements
ListUserDevicesReplyOrBuilder {
private ListUserDevicesReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUserDevicesReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUserDevicesReply defaultInstance;
public static ListUserDevicesReply getDefaultInstance() {
return defaultInstance;
}
public ListUserDevicesReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUserDevicesReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
device_ = new ArrayList<Sp.ListUserDevicesReply.PBDevice>();
mutable_b0_ |= 0x00000001;
}
device_.add(input.readMessage(Sp.ListUserDevicesReply.PBDevice.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
device_ = Collections.unmodifiableList(device_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUserDevicesReply> PARSER =
new AbstractParser<ListUserDevicesReply>() {
public ListUserDevicesReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUserDevicesReply(input, er);
}
};
@Override
public Parser<ListUserDevicesReply> getParserForType() {
return PARSER;
}
public interface PBDeviceOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
boolean hasOsFamily();
String getOsFamily();
ByteString
getOsFamilyBytes();
boolean hasOsName();
String getOsName();
ByteString
getOsNameBytes();
}
public static final class PBDevice extends
GeneratedMessageLite implements
PBDeviceOrBuilder {
private PBDevice(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBDevice(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBDevice defaultInstance;
public static PBDevice getDefaultInstance() {
return defaultInstance;
}
public PBDevice getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBDevice(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
deviceName_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
osFamily_ = bs;
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
osName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBDevice> PARSER =
new AbstractParser<PBDevice>() {
public PBDevice parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBDevice(input, er);
}
};
@Override
public Parser<PBDevice> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int DEVICE_NAME_FIELD_NUMBER = 2;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int OS_FAMILY_FIELD_NUMBER = 3;
private Object osFamily_;
public boolean hasOsFamily() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsFamily() {
Object ref = osFamily_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int OS_NAME_FIELD_NUMBER = 4;
private Object osName_;
public boolean hasOsName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getOsName() {
Object ref = osName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
deviceName_ = "";
osFamily_ = "";
osName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasDeviceName()) {
mii = 0;
return false;
}
if (!hasOsFamily()) {
mii = 0;
return false;
}
if (!hasOsName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getDeviceNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getOsFamilyBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, getOsNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getDeviceNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getOsFamilyBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, getOsNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUserDevicesReply.PBDevice parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUserDevicesReply.PBDevice parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesReply.PBDevice parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUserDevicesReply.PBDevice prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUserDevicesReply.PBDevice, Builder>
implements
Sp.ListUserDevicesReply.PBDeviceOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
deviceName_ = "";
b0_ = (b0_ & ~0x00000002);
osFamily_ = "";
b0_ = (b0_ & ~0x00000004);
osName_ = "";
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUserDevicesReply.PBDevice getDefaultInstanceForType() {
return Sp.ListUserDevicesReply.PBDevice.getDefaultInstance();
}
public Sp.ListUserDevicesReply.PBDevice build() {
Sp.ListUserDevicesReply.PBDevice result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUserDevicesReply.PBDevice buildPartial() {
Sp.ListUserDevicesReply.PBDevice result = new Sp.ListUserDevicesReply.PBDevice(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.deviceName_ = deviceName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.osFamily_ = osFamily_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.osName_ = osName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListUserDevicesReply.PBDevice other) {
if (other == Sp.ListUserDevicesReply.PBDevice.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasDeviceName()) {
b0_ |= 0x00000002;
deviceName_ = other.deviceName_;
}
if (other.hasOsFamily()) {
b0_ |= 0x00000004;
osFamily_ = other.osFamily_;
}
if (other.hasOsName()) {
b0_ |= 0x00000008;
osName_ = other.osName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasDeviceName()) {
return false;
}
if (!hasOsFamily()) {
return false;
}
if (!hasOsName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUserDevicesReply.PBDevice pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUserDevicesReply.PBDevice) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000002);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
private Object osFamily_ = "";
public boolean hasOsFamily() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getOsFamily() {
Object ref = osFamily_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osFamily_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsFamilyBytes() {
Object ref = osFamily_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osFamily_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsFamily(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osFamily_ = value;
return this;
}
public Builder clearOsFamily() {
b0_ = (b0_ & ~0x00000004);
osFamily_ = getDefaultInstance().getOsFamily();
return this;
}
public Builder setOsFamilyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
osFamily_ = value;
return this;
}
private Object osName_ = "";
public boolean hasOsName() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getOsName() {
Object ref = osName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
osName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOsNameBytes() {
Object ref = osName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
osName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOsName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
osName_ = value;
return this;
}
public Builder clearOsName() {
b0_ = (b0_ & ~0x00000008);
osName_ = getDefaultInstance().getOsName();
return this;
}
public Builder setOsNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
osName_ = value;
return this;
}
}
static {
defaultInstance = new PBDevice(true);
defaultInstance.initFields();
}
}
public static final int DEVICE_FIELD_NUMBER = 1;
private List<Sp.ListUserDevicesReply.PBDevice> device_;
public List<Sp.ListUserDevicesReply.PBDevice> getDeviceList() {
return device_;
}
public List<? extends Sp.ListUserDevicesReply.PBDeviceOrBuilder> 
getDeviceOrBuilderList() {
return device_;
}
public int getDeviceCount() {
return device_.size();
}
public Sp.ListUserDevicesReply.PBDevice getDevice(int index) {
return device_.get(index);
}
public Sp.ListUserDevicesReply.PBDeviceOrBuilder getDeviceOrBuilder(
int index) {
return device_.get(index);
}
private void initFields() {
device_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getDeviceCount(); i++) {
if (!getDevice(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < device_.size(); i++) {
output.writeMessage(1, device_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < device_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, device_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUserDevicesReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserDevicesReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserDevicesReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUserDevicesReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUserDevicesReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUserDevicesReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserDevicesReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUserDevicesReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUserDevicesReply, Builder>
implements
Sp.ListUserDevicesReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
device_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUserDevicesReply getDefaultInstanceForType() {
return Sp.ListUserDevicesReply.getDefaultInstance();
}
public Sp.ListUserDevicesReply build() {
Sp.ListUserDevicesReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUserDevicesReply buildPartial() {
Sp.ListUserDevicesReply result = new Sp.ListUserDevicesReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
device_ = Collections.unmodifiableList(device_);
b0_ = (b0_ & ~0x00000001);
}
result.device_ = device_;
return result;
}
public Builder mergeFrom(Sp.ListUserDevicesReply other) {
if (other == Sp.ListUserDevicesReply.getDefaultInstance()) return this;
if (!other.device_.isEmpty()) {
if (device_.isEmpty()) {
device_ = other.device_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureDeviceIsMutable();
device_.addAll(other.device_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getDeviceCount(); i++) {
if (!getDevice(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUserDevicesReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUserDevicesReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.ListUserDevicesReply.PBDevice> device_ =
Collections.emptyList();
private void ensureDeviceIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
device_ = new ArrayList<Sp.ListUserDevicesReply.PBDevice>(device_);
b0_ |= 0x00000001;
}
}
public List<Sp.ListUserDevicesReply.PBDevice> getDeviceList() {
return Collections.unmodifiableList(device_);
}
public int getDeviceCount() {
return device_.size();
}
public Sp.ListUserDevicesReply.PBDevice getDevice(int index) {
return device_.get(index);
}
public Builder setDevice(
int index, Sp.ListUserDevicesReply.PBDevice value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceIsMutable();
device_.set(index, value);
return this;
}
public Builder setDevice(
int index, Sp.ListUserDevicesReply.PBDevice.Builder bdForValue) {
ensureDeviceIsMutable();
device_.set(index, bdForValue.build());
return this;
}
public Builder addDevice(Sp.ListUserDevicesReply.PBDevice value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceIsMutable();
device_.add(value);
return this;
}
public Builder addDevice(
int index, Sp.ListUserDevicesReply.PBDevice value) {
if (value == null) {
throw new NullPointerException();
}
ensureDeviceIsMutable();
device_.add(index, value);
return this;
}
public Builder addDevice(
Sp.ListUserDevicesReply.PBDevice.Builder bdForValue) {
ensureDeviceIsMutable();
device_.add(bdForValue.build());
return this;
}
public Builder addDevice(
int index, Sp.ListUserDevicesReply.PBDevice.Builder bdForValue) {
ensureDeviceIsMutable();
device_.add(index, bdForValue.build());
return this;
}
public Builder addAllDevice(
Iterable<? extends Sp.ListUserDevicesReply.PBDevice> values) {
ensureDeviceIsMutable();
AbstractMessageLite.Builder.addAll(
values, device_);
return this;
}
public Builder clearDevice() {
device_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeDevice(int index) {
ensureDeviceIsMutable();
device_.remove(index);
return this;
}
}
static {
defaultInstance = new ListUserDevicesReply(true);
defaultInstance.initFields();
}
}
public interface ListOrganizationSharedFoldersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasMaxResults();
int getMaxResults();
boolean hasOffset();
int getOffset();
boolean hasSearchString();
String getSearchString();
ByteString
getSearchStringBytes();
}
public static final class ListOrganizationSharedFoldersCall extends
GeneratedMessageLite implements
ListOrganizationSharedFoldersCallOrBuilder {
private ListOrganizationSharedFoldersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListOrganizationSharedFoldersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListOrganizationSharedFoldersCall defaultInstance;
public static ListOrganizationSharedFoldersCall getDefaultInstance() {
return defaultInstance;
}
public ListOrganizationSharedFoldersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListOrganizationSharedFoldersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
maxResults_ = input.readUInt32();
break;
}
case 16: {
b0_ |= 0x00000002;
offset_ = input.readUInt32();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
searchString_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListOrganizationSharedFoldersCall> PARSER =
new AbstractParser<ListOrganizationSharedFoldersCall>() {
public ListOrganizationSharedFoldersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListOrganizationSharedFoldersCall(input, er);
}
};
@Override
public Parser<ListOrganizationSharedFoldersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int MAX_RESULTS_FIELD_NUMBER = 1;
private int maxResults_;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public static final int OFFSET_FIELD_NUMBER = 2;
private int offset_;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public static final int SEARCH_STRING_FIELD_NUMBER = 3;
private Object searchString_;
public boolean hasSearchString() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchString() {
Object ref = searchString_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
maxResults_ = 0;
offset_ = 0;
searchString_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasMaxResults()) {
mii = 0;
return false;
}
if (!hasOffset()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt32(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getSearchStringBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt32Size(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getSearchStringBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationSharedFoldersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationSharedFoldersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationSharedFoldersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationSharedFoldersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationSharedFoldersCall, Builder>
implements
Sp.ListOrganizationSharedFoldersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
maxResults_ = 0;
b0_ = (b0_ & ~0x00000001);
offset_ = 0;
b0_ = (b0_ & ~0x00000002);
searchString_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationSharedFoldersCall getDefaultInstanceForType() {
return Sp.ListOrganizationSharedFoldersCall.getDefaultInstance();
}
public Sp.ListOrganizationSharedFoldersCall build() {
Sp.ListOrganizationSharedFoldersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationSharedFoldersCall buildPartial() {
Sp.ListOrganizationSharedFoldersCall result = new Sp.ListOrganizationSharedFoldersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.maxResults_ = maxResults_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.offset_ = offset_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.searchString_ = searchString_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationSharedFoldersCall other) {
if (other == Sp.ListOrganizationSharedFoldersCall.getDefaultInstance()) return this;
if (other.hasMaxResults()) {
setMaxResults(other.getMaxResults());
}
if (other.hasOffset()) {
setOffset(other.getOffset());
}
if (other.hasSearchString()) {
b0_ |= 0x00000004;
searchString_ = other.searchString_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasMaxResults()) {
return false;
}
if (!hasOffset()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationSharedFoldersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationSharedFoldersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int maxResults_ ;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public Builder setMaxResults(int value) {
b0_ |= 0x00000001;
maxResults_ = value;
return this;
}
public Builder clearMaxResults() {
b0_ = (b0_ & ~0x00000001);
maxResults_ = 0;
return this;
}
private int offset_ ;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public Builder setOffset(int value) {
b0_ |= 0x00000002;
offset_ = value;
return this;
}
public Builder clearOffset() {
b0_ = (b0_ & ~0x00000002);
offset_ = 0;
return this;
}
private Object searchString_ = "";
public boolean hasSearchString() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchString() {
Object ref = searchString_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSearchString(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchString_ = value;
return this;
}
public Builder clearSearchString() {
b0_ = (b0_ & ~0x00000004);
searchString_ = getDefaultInstance().getSearchString();
return this;
}
public Builder setSearchStringBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchString_ = value;
return this;
}
}
static {
defaultInstance = new ListOrganizationSharedFoldersCall(true);
defaultInstance.initFields();
}
}
public interface ListOrganizationSharedFoldersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBSharedFolder> 
getSharedFolderList();
Sp.PBSharedFolder getSharedFolder(int index);
int getSharedFolderCount();
boolean hasTotalCount();
int getTotalCount();
}
public static final class ListOrganizationSharedFoldersReply extends
GeneratedMessageLite implements
ListOrganizationSharedFoldersReplyOrBuilder {
private ListOrganizationSharedFoldersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListOrganizationSharedFoldersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListOrganizationSharedFoldersReply defaultInstance;
public static ListOrganizationSharedFoldersReply getDefaultInstance() {
return defaultInstance;
}
public ListOrganizationSharedFoldersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListOrganizationSharedFoldersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = new ArrayList<Sp.PBSharedFolder>();
mutable_b0_ |= 0x00000001;
}
sharedFolder_.add(input.readMessage(Sp.PBSharedFolder.PARSER, er));
break;
}
case 16: {
b0_ |= 0x00000001;
totalCount_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = Collections.unmodifiableList(sharedFolder_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListOrganizationSharedFoldersReply> PARSER =
new AbstractParser<ListOrganizationSharedFoldersReply>() {
public ListOrganizationSharedFoldersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListOrganizationSharedFoldersReply(input, er);
}
};
@Override
public Parser<ListOrganizationSharedFoldersReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_FOLDER_FIELD_NUMBER = 1;
private List<Sp.PBSharedFolder> sharedFolder_;
public List<Sp.PBSharedFolder> getSharedFolderList() {
return sharedFolder_;
}
public List<? extends Sp.PBSharedFolderOrBuilder> 
getSharedFolderOrBuilderList() {
return sharedFolder_;
}
public int getSharedFolderCount() {
return sharedFolder_.size();
}
public Sp.PBSharedFolder getSharedFolder(int index) {
return sharedFolder_.get(index);
}
public Sp.PBSharedFolderOrBuilder getSharedFolderOrBuilder(
int index) {
return sharedFolder_.get(index);
}
public static final int TOTAL_COUNT_FIELD_NUMBER = 2;
private int totalCount_;
public boolean hasTotalCount() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getTotalCount() {
return totalCount_;
}
private void initFields() {
sharedFolder_ = Collections.emptyList();
totalCount_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasTotalCount()) {
mii = 0;
return false;
}
for (int i = 0; i < getSharedFolderCount(); i++) {
if (!getSharedFolder(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < sharedFolder_.size(); i++) {
output.writeMessage(1, sharedFolder_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(2, totalCount_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < sharedFolder_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, sharedFolder_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(2, totalCount_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListOrganizationSharedFoldersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListOrganizationSharedFoldersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListOrganizationSharedFoldersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListOrganizationSharedFoldersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListOrganizationSharedFoldersReply, Builder>
implements
Sp.ListOrganizationSharedFoldersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedFolder_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
totalCount_ = 0;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListOrganizationSharedFoldersReply getDefaultInstanceForType() {
return Sp.ListOrganizationSharedFoldersReply.getDefaultInstance();
}
public Sp.ListOrganizationSharedFoldersReply build() {
Sp.ListOrganizationSharedFoldersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListOrganizationSharedFoldersReply buildPartial() {
Sp.ListOrganizationSharedFoldersReply result = new Sp.ListOrganizationSharedFoldersReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = Collections.unmodifiableList(sharedFolder_);
b0_ = (b0_ & ~0x00000001);
}
result.sharedFolder_ = sharedFolder_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000001;
}
result.totalCount_ = totalCount_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListOrganizationSharedFoldersReply other) {
if (other == Sp.ListOrganizationSharedFoldersReply.getDefaultInstance()) return this;
if (!other.sharedFolder_.isEmpty()) {
if (sharedFolder_.isEmpty()) {
sharedFolder_ = other.sharedFolder_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureSharedFolderIsMutable();
sharedFolder_.addAll(other.sharedFolder_);
}
}
if (other.hasTotalCount()) {
setTotalCount(other.getTotalCount());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasTotalCount()) {
return false;
}
for (int i = 0; i < getSharedFolderCount(); i++) {
if (!getSharedFolder(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListOrganizationSharedFoldersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListOrganizationSharedFoldersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBSharedFolder> sharedFolder_ =
Collections.emptyList();
private void ensureSharedFolderIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = new ArrayList<Sp.PBSharedFolder>(sharedFolder_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBSharedFolder> getSharedFolderList() {
return Collections.unmodifiableList(sharedFolder_);
}
public int getSharedFolderCount() {
return sharedFolder_.size();
}
public Sp.PBSharedFolder getSharedFolder(int index) {
return sharedFolder_.get(index);
}
public Builder setSharedFolder(
int index, Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.set(index, value);
return this;
}
public Builder setSharedFolder(
int index, Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.set(index, bdForValue.build());
return this;
}
public Builder addSharedFolder(Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.add(value);
return this;
}
public Builder addSharedFolder(
int index, Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.add(index, value);
return this;
}
public Builder addSharedFolder(
Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.add(bdForValue.build());
return this;
}
public Builder addSharedFolder(
int index, Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.add(index, bdForValue.build());
return this;
}
public Builder addAllSharedFolder(
Iterable<? extends Sp.PBSharedFolder> values) {
ensureSharedFolderIsMutable();
AbstractMessageLite.Builder.addAll(
values, sharedFolder_);
return this;
}
public Builder clearSharedFolder() {
sharedFolder_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeSharedFolder(int index) {
ensureSharedFolderIsMutable();
sharedFolder_.remove(index);
return this;
}
private int totalCount_ ;
public boolean hasTotalCount() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getTotalCount() {
return totalCount_;
}
public Builder setTotalCount(int value) {
b0_ |= 0x00000002;
totalCount_ = value;
return this;
}
public Builder clearTotalCount() {
b0_ = (b0_ & ~0x00000002);
totalCount_ = 0;
return this;
}
}
static {
defaultInstance = new ListOrganizationSharedFoldersReply(true);
defaultInstance.initFields();
}
}
public interface ListUserJoinedSharedFoldersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasMaxResults();
int getMaxResults();
boolean hasOffset();
int getOffset();
boolean hasSearchString();
String getSearchString();
ByteString
getSearchStringBytes();
}
public static final class ListUserJoinedSharedFoldersCall extends
GeneratedMessageLite implements
ListUserJoinedSharedFoldersCallOrBuilder {
private ListUserJoinedSharedFoldersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUserJoinedSharedFoldersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUserJoinedSharedFoldersCall defaultInstance;
public static ListUserJoinedSharedFoldersCall getDefaultInstance() {
return defaultInstance;
}
public ListUserJoinedSharedFoldersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUserJoinedSharedFoldersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
maxResults_ = input.readUInt32();
break;
}
case 24: {
b0_ |= 0x00000004;
offset_ = input.readUInt32();
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
searchString_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUserJoinedSharedFoldersCall> PARSER =
new AbstractParser<ListUserJoinedSharedFoldersCall>() {
public ListUserJoinedSharedFoldersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUserJoinedSharedFoldersCall(input, er);
}
};
@Override
public Parser<ListUserJoinedSharedFoldersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int MAX_RESULTS_FIELD_NUMBER = 2;
private int maxResults_;
public boolean hasMaxResults() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getMaxResults() {
return maxResults_;
}
public static final int OFFSET_FIELD_NUMBER = 3;
private int offset_;
public boolean hasOffset() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public int getOffset() {
return offset_;
}
public static final int SEARCH_STRING_FIELD_NUMBER = 4;
private Object searchString_;
public boolean hasSearchString() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getSearchString() {
Object ref = searchString_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userId_ = "";
maxResults_ = 0;
offset_ = 0;
searchString_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
if (!hasMaxResults()) {
mii = 0;
return false;
}
if (!hasOffset()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt32(2, maxResults_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeUInt32(3, offset_);
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, getSearchStringBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt32Size(2, maxResults_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeUInt32Size(3, offset_);
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, getSearchStringBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUserJoinedSharedFoldersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUserJoinedSharedFoldersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserJoinedSharedFoldersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUserJoinedSharedFoldersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUserJoinedSharedFoldersCall, Builder>
implements
Sp.ListUserJoinedSharedFoldersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
maxResults_ = 0;
b0_ = (b0_ & ~0x00000002);
offset_ = 0;
b0_ = (b0_ & ~0x00000004);
searchString_ = "";
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUserJoinedSharedFoldersCall getDefaultInstanceForType() {
return Sp.ListUserJoinedSharedFoldersCall.getDefaultInstance();
}
public Sp.ListUserJoinedSharedFoldersCall build() {
Sp.ListUserJoinedSharedFoldersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUserJoinedSharedFoldersCall buildPartial() {
Sp.ListUserJoinedSharedFoldersCall result = new Sp.ListUserJoinedSharedFoldersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.maxResults_ = maxResults_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.offset_ = offset_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.searchString_ = searchString_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListUserJoinedSharedFoldersCall other) {
if (other == Sp.ListUserJoinedSharedFoldersCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasMaxResults()) {
setMaxResults(other.getMaxResults());
}
if (other.hasOffset()) {
setOffset(other.getOffset());
}
if (other.hasSearchString()) {
b0_ |= 0x00000008;
searchString_ = other.searchString_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
if (!hasMaxResults()) {
return false;
}
if (!hasOffset()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUserJoinedSharedFoldersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUserJoinedSharedFoldersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private int maxResults_ ;
public boolean hasMaxResults() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getMaxResults() {
return maxResults_;
}
public Builder setMaxResults(int value) {
b0_ |= 0x00000002;
maxResults_ = value;
return this;
}
public Builder clearMaxResults() {
b0_ = (b0_ & ~0x00000002);
maxResults_ = 0;
return this;
}
private int offset_ ;
public boolean hasOffset() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public int getOffset() {
return offset_;
}
public Builder setOffset(int value) {
b0_ |= 0x00000004;
offset_ = value;
return this;
}
public Builder clearOffset() {
b0_ = (b0_ & ~0x00000004);
offset_ = 0;
return this;
}
private Object searchString_ = "";
public boolean hasSearchString() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getSearchString() {
Object ref = searchString_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchString_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSearchStringBytes() {
Object ref = searchString_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchString_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSearchString(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
searchString_ = value;
return this;
}
public Builder clearSearchString() {
b0_ = (b0_ & ~0x00000008);
searchString_ = getDefaultInstance().getSearchString();
return this;
}
public Builder setSearchStringBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
searchString_ = value;
return this;
}
}
static {
defaultInstance = new ListUserJoinedSharedFoldersCall(true);
defaultInstance.initFields();
}
}
public interface PBSharedFolderOrBuilder extends
MessageLiteOrBuilder {
boolean hasStoreId();
ByteString getStoreId();
boolean hasName();
String getName();
ByteString
getNameBytes();
boolean hasOwnedByTeam();
boolean getOwnedByTeam();
List<Sp.PBSharedFolder.PBUserPermissionsAndState> 
getUserPermissionsAndStateList();
Sp.PBSharedFolder.PBUserPermissionsAndState getUserPermissionsAndState(int index);
int getUserPermissionsAndStateCount();
List<Sp.PBSharedFolder.PBGroupPermissions> 
getGroupPermissionsList();
Sp.PBSharedFolder.PBGroupPermissions getGroupPermissions(int index);
int getGroupPermissionsCount();
boolean hasRequestedUsersPermissionsAndState();
Sp.PBSharedFolder.PBUserPermissionsAndState getRequestedUsersPermissionsAndState();
}
public static final class PBSharedFolder extends
GeneratedMessageLite implements
PBSharedFolderOrBuilder {
private PBSharedFolder(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBSharedFolder(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBSharedFolder defaultInstance;
public static PBSharedFolder getDefaultInstance() {
return defaultInstance;
}
public PBSharedFolder getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBSharedFolder(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
storeId_ = input.readBytes();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
name_ = bs;
break;
}
case 24: {
b0_ |= 0x00000004;
ownedByTeam_ = input.readBool();
break;
}
case 34: {
if (!((mutable_b0_ & 0x00000008) == 0x00000008)) {
userPermissionsAndState_ = new ArrayList<Sp.PBSharedFolder.PBUserPermissionsAndState>();
mutable_b0_ |= 0x00000008;
}
userPermissionsAndState_.add(input.readMessage(Sp.PBSharedFolder.PBUserPermissionsAndState.PARSER, er));
break;
}
case 42: {
if (!((mutable_b0_ & 0x00000010) == 0x00000010)) {
groupPermissions_ = new ArrayList<Sp.PBSharedFolder.PBGroupPermissions>();
mutable_b0_ |= 0x00000010;
}
groupPermissions_.add(input.readMessage(Sp.PBSharedFolder.PBGroupPermissions.PARSER, er));
break;
}
case 50: {
Sp.PBSharedFolder.PBUserPermissionsAndState.Builder subBuilder = null;
if (((b0_ & 0x00000008) == 0x00000008)) {
subBuilder = requestedUsersPermissionsAndState_.toBuilder();
}
requestedUsersPermissionsAndState_ = input.readMessage(Sp.PBSharedFolder.PBUserPermissionsAndState.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(requestedUsersPermissionsAndState_);
requestedUsersPermissionsAndState_ = subBuilder.buildPartial();
}
b0_ |= 0x00000008;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000008) == 0x00000008)) {
userPermissionsAndState_ = Collections.unmodifiableList(userPermissionsAndState_);
}
if (((mutable_b0_ & 0x00000010) == 0x00000010)) {
groupPermissions_ = Collections.unmodifiableList(groupPermissions_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBSharedFolder> PARSER =
new AbstractParser<PBSharedFolder>() {
public PBSharedFolder parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBSharedFolder(input, er);
}
};
@Override
public Parser<PBSharedFolder> getParserForType() {
return PARSER;
}
public interface PBUserPermissionsAndStateOrBuilder extends
MessageLiteOrBuilder {
boolean hasUser();
Sp.PBUser getUser();
boolean hasPermissions();
Common.PBPermissions getPermissions();
boolean hasState();
Sp.PBSharedFolderState getState();
}
public static final class PBUserPermissionsAndState extends
GeneratedMessageLite implements
PBUserPermissionsAndStateOrBuilder {
private PBUserPermissionsAndState(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBUserPermissionsAndState(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBUserPermissionsAndState defaultInstance;
public static PBUserPermissionsAndState getDefaultInstance() {
return defaultInstance;
}
public PBUserPermissionsAndState getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBUserPermissionsAndState(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBUser.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = user_.toBuilder();
}
user_ = input.readMessage(Sp.PBUser.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(user_);
user_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 18: {
Common.PBPermissions.Builder subBuilder = null;
if (((b0_ & 0x00000002) == 0x00000002)) {
subBuilder = permissions_.toBuilder();
}
permissions_ = input.readMessage(Common.PBPermissions.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(permissions_);
permissions_ = subBuilder.buildPartial();
}
b0_ |= 0x00000002;
break;
}
case 24: {
int rawValue = input.readEnum();
Sp.PBSharedFolderState value = Sp.PBSharedFolderState.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000004;
state_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBUserPermissionsAndState> PARSER =
new AbstractParser<PBUserPermissionsAndState>() {
public PBUserPermissionsAndState parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBUserPermissionsAndState(input, er);
}
};
@Override
public Parser<PBUserPermissionsAndState> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_FIELD_NUMBER = 1;
private Sp.PBUser user_;
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public static final int PERMISSIONS_FIELD_NUMBER = 2;
private Common.PBPermissions permissions_;
public boolean hasPermissions() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
public static final int STATE_FIELD_NUMBER = 3;
private Sp.PBSharedFolderState state_;
public boolean hasState() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Sp.PBSharedFolderState getState() {
return state_;
}
private void initFields() {
user_ = Sp.PBUser.getDefaultInstance();
permissions_ = Common.PBPermissions.getDefaultInstance();
state_ = Sp.PBSharedFolderState.PENDING;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUser()) {
mii = 0;
return false;
}
if (!hasPermissions()) {
mii = 0;
return false;
}
if (!hasState()) {
mii = 0;
return false;
}
if (!getUser().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeMessage(2, permissions_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeEnum(3, state_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeMessageSize(2, permissions_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeEnumSize(3, state_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder.PBUserPermissionsAndState parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBSharedFolder.PBUserPermissionsAndState prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBSharedFolder.PBUserPermissionsAndState, Builder>
implements
Sp.PBSharedFolder.PBUserPermissionsAndStateOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000002);
state_ = Sp.PBSharedFolderState.PENDING;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBSharedFolder.PBUserPermissionsAndState getDefaultInstanceForType() {
return Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance();
}
public Sp.PBSharedFolder.PBUserPermissionsAndState build() {
Sp.PBSharedFolder.PBUserPermissionsAndState result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBSharedFolder.PBUserPermissionsAndState buildPartial() {
Sp.PBSharedFolder.PBUserPermissionsAndState result = new Sp.PBSharedFolder.PBUserPermissionsAndState(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.user_ = user_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.permissions_ = permissions_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.state_ = state_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBSharedFolder.PBUserPermissionsAndState other) {
if (other == Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance()) return this;
if (other.hasUser()) {
mergeUser(other.getUser());
}
if (other.hasPermissions()) {
mergePermissions(other.getPermissions());
}
if (other.hasState()) {
setState(other.getState());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUser()) {
return false;
}
if (!hasPermissions()) {
return false;
}
if (!hasState()) {
return false;
}
if (!getUser().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBSharedFolder.PBUserPermissionsAndState pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBSharedFolder.PBUserPermissionsAndState) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBUser user_ = Sp.PBUser.getDefaultInstance();
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public Builder setUser(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
user_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setUser(
Sp.PBUser.Builder bdForValue) {
user_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeUser(Sp.PBUser value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
user_ != Sp.PBUser.getDefaultInstance()) {
user_ =
Sp.PBUser.newBuilder(user_).mergeFrom(value).buildPartial();
} else {
user_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearUser() {
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private Common.PBPermissions permissions_ = Common.PBPermissions.getDefaultInstance();
public boolean hasPermissions() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
public Builder setPermissions(Common.PBPermissions value) {
if (value == null) {
throw new NullPointerException();
}
permissions_ = value;
b0_ |= 0x00000002;
return this;
}
public Builder setPermissions(
Common.PBPermissions.Builder bdForValue) {
permissions_ = bdForValue.build();
b0_ |= 0x00000002;
return this;
}
public Builder mergePermissions(Common.PBPermissions value) {
if (((b0_ & 0x00000002) == 0x00000002) &&
permissions_ != Common.PBPermissions.getDefaultInstance()) {
permissions_ =
Common.PBPermissions.newBuilder(permissions_).mergeFrom(value).buildPartial();
} else {
permissions_ = value;
}
b0_ |= 0x00000002;
return this;
}
public Builder clearPermissions() {
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000002);
return this;
}
private Sp.PBSharedFolderState state_ = Sp.PBSharedFolderState.PENDING;
public boolean hasState() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Sp.PBSharedFolderState getState() {
return state_;
}
public Builder setState(Sp.PBSharedFolderState value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
state_ = value;
return this;
}
public Builder clearState() {
b0_ = (b0_ & ~0x00000004);
state_ = Sp.PBSharedFolderState.PENDING;
return this;
}
}
static {
defaultInstance = new PBUserPermissionsAndState(true);
defaultInstance.initFields();
}
}
public interface PBGroupPermissionsOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroup();
Sp.PBGroup getGroup();
boolean hasPermissions();
Common.PBPermissions getPermissions();
}
public static final class PBGroupPermissions extends
GeneratedMessageLite implements
PBGroupPermissionsOrBuilder {
private PBGroupPermissions(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBGroupPermissions(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBGroupPermissions defaultInstance;
public static PBGroupPermissions getDefaultInstance() {
return defaultInstance;
}
public PBGroupPermissions getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBGroupPermissions(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBGroup.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = group_.toBuilder();
}
group_ = input.readMessage(Sp.PBGroup.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(group_);
group_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 18: {
Common.PBPermissions.Builder subBuilder = null;
if (((b0_ & 0x00000002) == 0x00000002)) {
subBuilder = permissions_.toBuilder();
}
permissions_ = input.readMessage(Common.PBPermissions.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(permissions_);
permissions_ = subBuilder.buildPartial();
}
b0_ |= 0x00000002;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBGroupPermissions> PARSER =
new AbstractParser<PBGroupPermissions>() {
public PBGroupPermissions parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBGroupPermissions(input, er);
}
};
@Override
public Parser<PBGroupPermissions> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_FIELD_NUMBER = 1;
private Sp.PBGroup group_;
public boolean hasGroup() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBGroup getGroup() {
return group_;
}
public static final int PERMISSIONS_FIELD_NUMBER = 2;
private Common.PBPermissions permissions_;
public boolean hasPermissions() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
private void initFields() {
group_ = Sp.PBGroup.getDefaultInstance();
permissions_ = Common.PBPermissions.getDefaultInstance();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroup()) {
mii = 0;
return false;
}
if (!hasPermissions()) {
mii = 0;
return false;
}
if (!getGroup().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, group_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeMessage(2, permissions_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, group_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeMessageSize(2, permissions_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder.PBGroupPermissions parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBSharedFolder.PBGroupPermissions prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBSharedFolder.PBGroupPermissions, Builder>
implements
Sp.PBSharedFolder.PBGroupPermissionsOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
group_ = Sp.PBGroup.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBSharedFolder.PBGroupPermissions getDefaultInstanceForType() {
return Sp.PBSharedFolder.PBGroupPermissions.getDefaultInstance();
}
public Sp.PBSharedFolder.PBGroupPermissions build() {
Sp.PBSharedFolder.PBGroupPermissions result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBSharedFolder.PBGroupPermissions buildPartial() {
Sp.PBSharedFolder.PBGroupPermissions result = new Sp.PBSharedFolder.PBGroupPermissions(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.group_ = group_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.permissions_ = permissions_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBSharedFolder.PBGroupPermissions other) {
if (other == Sp.PBSharedFolder.PBGroupPermissions.getDefaultInstance()) return this;
if (other.hasGroup()) {
mergeGroup(other.getGroup());
}
if (other.hasPermissions()) {
mergePermissions(other.getPermissions());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroup()) {
return false;
}
if (!hasPermissions()) {
return false;
}
if (!getGroup().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBSharedFolder.PBGroupPermissions pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBSharedFolder.PBGroupPermissions) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBGroup group_ = Sp.PBGroup.getDefaultInstance();
public boolean hasGroup() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBGroup getGroup() {
return group_;
}
public Builder setGroup(Sp.PBGroup value) {
if (value == null) {
throw new NullPointerException();
}
group_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setGroup(
Sp.PBGroup.Builder bdForValue) {
group_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeGroup(Sp.PBGroup value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
group_ != Sp.PBGroup.getDefaultInstance()) {
group_ =
Sp.PBGroup.newBuilder(group_).mergeFrom(value).buildPartial();
} else {
group_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearGroup() {
group_ = Sp.PBGroup.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private Common.PBPermissions permissions_ = Common.PBPermissions.getDefaultInstance();
public boolean hasPermissions() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Common.PBPermissions getPermissions() {
return permissions_;
}
public Builder setPermissions(Common.PBPermissions value) {
if (value == null) {
throw new NullPointerException();
}
permissions_ = value;
b0_ |= 0x00000002;
return this;
}
public Builder setPermissions(
Common.PBPermissions.Builder bdForValue) {
permissions_ = bdForValue.build();
b0_ |= 0x00000002;
return this;
}
public Builder mergePermissions(Common.PBPermissions value) {
if (((b0_ & 0x00000002) == 0x00000002) &&
permissions_ != Common.PBPermissions.getDefaultInstance()) {
permissions_ =
Common.PBPermissions.newBuilder(permissions_).mergeFrom(value).buildPartial();
} else {
permissions_ = value;
}
b0_ |= 0x00000002;
return this;
}
public Builder clearPermissions() {
permissions_ = Common.PBPermissions.getDefaultInstance();
b0_ = (b0_ & ~0x00000002);
return this;
}
}
static {
defaultInstance = new PBGroupPermissions(true);
defaultInstance.initFields();
}
}
private int b0_;
public static final int STORE_ID_FIELD_NUMBER = 1;
private ByteString storeId_;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public static final int NAME_FIELD_NUMBER = 2;
private Object name_;
public boolean hasName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getName() {
Object ref = name_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int OWNED_BY_TEAM_FIELD_NUMBER = 3;
private boolean ownedByTeam_;
public boolean hasOwnedByTeam() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getOwnedByTeam() {
return ownedByTeam_;
}
public static final int USER_PERMISSIONS_AND_STATE_FIELD_NUMBER = 4;
private List<Sp.PBSharedFolder.PBUserPermissionsAndState> userPermissionsAndState_;
public List<Sp.PBSharedFolder.PBUserPermissionsAndState> getUserPermissionsAndStateList() {
return userPermissionsAndState_;
}
public List<? extends Sp.PBSharedFolder.PBUserPermissionsAndStateOrBuilder> 
getUserPermissionsAndStateOrBuilderList() {
return userPermissionsAndState_;
}
public int getUserPermissionsAndStateCount() {
return userPermissionsAndState_.size();
}
public Sp.PBSharedFolder.PBUserPermissionsAndState getUserPermissionsAndState(int index) {
return userPermissionsAndState_.get(index);
}
public Sp.PBSharedFolder.PBUserPermissionsAndStateOrBuilder getUserPermissionsAndStateOrBuilder(
int index) {
return userPermissionsAndState_.get(index);
}
public static final int GROUP_PERMISSIONS_FIELD_NUMBER = 5;
private List<Sp.PBSharedFolder.PBGroupPermissions> groupPermissions_;
public List<Sp.PBSharedFolder.PBGroupPermissions> getGroupPermissionsList() {
return groupPermissions_;
}
public List<? extends Sp.PBSharedFolder.PBGroupPermissionsOrBuilder> 
getGroupPermissionsOrBuilderList() {
return groupPermissions_;
}
public int getGroupPermissionsCount() {
return groupPermissions_.size();
}
public Sp.PBSharedFolder.PBGroupPermissions getGroupPermissions(int index) {
return groupPermissions_.get(index);
}
public Sp.PBSharedFolder.PBGroupPermissionsOrBuilder getGroupPermissionsOrBuilder(
int index) {
return groupPermissions_.get(index);
}
public static final int REQUESTED_USERS_PERMISSIONS_AND_STATE_FIELD_NUMBER = 6;
private Sp.PBSharedFolder.PBUserPermissionsAndState requestedUsersPermissionsAndState_;
public boolean hasRequestedUsersPermissionsAndState() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public Sp.PBSharedFolder.PBUserPermissionsAndState getRequestedUsersPermissionsAndState() {
return requestedUsersPermissionsAndState_;
}
private void initFields() {
storeId_ = ByteString.EMPTY;
name_ = "";
ownedByTeam_ = false;
userPermissionsAndState_ = Collections.emptyList();
groupPermissions_ = Collections.emptyList();
requestedUsersPermissionsAndState_ = Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasStoreId()) {
mii = 0;
return false;
}
if (!hasName()) {
mii = 0;
return false;
}
if (!hasOwnedByTeam()) {
mii = 0;
return false;
}
for (int i = 0; i < getUserPermissionsAndStateCount(); i++) {
if (!getUserPermissionsAndState(i).isInitialized()) {
mii = 0;
return false;
}
}
for (int i = 0; i < getGroupPermissionsCount(); i++) {
if (!getGroupPermissions(i).isInitialized()) {
mii = 0;
return false;
}
}
if (hasRequestedUsersPermissionsAndState()) {
if (!getRequestedUsersPermissionsAndState().isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBool(3, ownedByTeam_);
}
for (int i = 0; i < userPermissionsAndState_.size(); i++) {
output.writeMessage(4, userPermissionsAndState_.get(i));
}
for (int i = 0; i < groupPermissions_.size(); i++) {
output.writeMessage(5, groupPermissions_.get(i));
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeMessage(6, requestedUsersPermissionsAndState_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, storeId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBoolSize(3, ownedByTeam_);
}
for (int i = 0; i < userPermissionsAndState_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(4, userPermissionsAndState_.get(i));
}
for (int i = 0; i < groupPermissions_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(5, groupPermissions_.get(i));
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeMessageSize(6, requestedUsersPermissionsAndState_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBSharedFolder parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBSharedFolder parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBSharedFolder parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBSharedFolder parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBSharedFolder parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBSharedFolder parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBSharedFolder parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBSharedFolder prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBSharedFolder, Builder>
implements
Sp.PBSharedFolderOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
name_ = "";
b0_ = (b0_ & ~0x00000002);
ownedByTeam_ = false;
b0_ = (b0_ & ~0x00000004);
userPermissionsAndState_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000008);
groupPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000010);
requestedUsersPermissionsAndState_ = Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance();
b0_ = (b0_ & ~0x00000020);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBSharedFolder getDefaultInstanceForType() {
return Sp.PBSharedFolder.getDefaultInstance();
}
public Sp.PBSharedFolder build() {
Sp.PBSharedFolder result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBSharedFolder buildPartial() {
Sp.PBSharedFolder result = new Sp.PBSharedFolder(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.storeId_ = storeId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.name_ = name_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.ownedByTeam_ = ownedByTeam_;
if (((b0_ & 0x00000008) == 0x00000008)) {
userPermissionsAndState_ = Collections.unmodifiableList(userPermissionsAndState_);
b0_ = (b0_ & ~0x00000008);
}
result.userPermissionsAndState_ = userPermissionsAndState_;
if (((b0_ & 0x00000010) == 0x00000010)) {
groupPermissions_ = Collections.unmodifiableList(groupPermissions_);
b0_ = (b0_ & ~0x00000010);
}
result.groupPermissions_ = groupPermissions_;
if (((from_b0_ & 0x00000020) == 0x00000020)) {
to_b0_ |= 0x00000008;
}
result.requestedUsersPermissionsAndState_ = requestedUsersPermissionsAndState_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBSharedFolder other) {
if (other == Sp.PBSharedFolder.getDefaultInstance()) return this;
if (other.hasStoreId()) {
setStoreId(other.getStoreId());
}
if (other.hasName()) {
b0_ |= 0x00000002;
name_ = other.name_;
}
if (other.hasOwnedByTeam()) {
setOwnedByTeam(other.getOwnedByTeam());
}
if (!other.userPermissionsAndState_.isEmpty()) {
if (userPermissionsAndState_.isEmpty()) {
userPermissionsAndState_ = other.userPermissionsAndState_;
b0_ = (b0_ & ~0x00000008);
} else {
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.addAll(other.userPermissionsAndState_);
}
}
if (!other.groupPermissions_.isEmpty()) {
if (groupPermissions_.isEmpty()) {
groupPermissions_ = other.groupPermissions_;
b0_ = (b0_ & ~0x00000010);
} else {
ensureGroupPermissionsIsMutable();
groupPermissions_.addAll(other.groupPermissions_);
}
}
if (other.hasRequestedUsersPermissionsAndState()) {
mergeRequestedUsersPermissionsAndState(other.getRequestedUsersPermissionsAndState());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasStoreId()) {
return false;
}
if (!hasName()) {
return false;
}
if (!hasOwnedByTeam()) {
return false;
}
for (int i = 0; i < getUserPermissionsAndStateCount(); i++) {
if (!getUserPermissionsAndState(i).isInitialized()) {
return false;
}
}
for (int i = 0; i < getGroupPermissionsCount(); i++) {
if (!getGroupPermissions(i).isInitialized()) {
return false;
}
}
if (hasRequestedUsersPermissionsAndState()) {
if (!getRequestedUsersPermissionsAndState().isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBSharedFolder pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBSharedFolder) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString storeId_ = ByteString.EMPTY;
public boolean hasStoreId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getStoreId() {
return storeId_;
}
public Builder setStoreId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
storeId_ = value;
return this;
}
public Builder clearStoreId() {
b0_ = (b0_ & ~0x00000001);
storeId_ = getDefaultInstance().getStoreId();
return this;
}
private Object name_ = "";
public boolean hasName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getName() {
Object ref = name_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
name_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getNameBytes() {
Object ref = name_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
name_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
name_ = value;
return this;
}
public Builder clearName() {
b0_ = (b0_ & ~0x00000002);
name_ = getDefaultInstance().getName();
return this;
}
public Builder setNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
name_ = value;
return this;
}
private boolean ownedByTeam_ ;
public boolean hasOwnedByTeam() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getOwnedByTeam() {
return ownedByTeam_;
}
public Builder setOwnedByTeam(boolean value) {
b0_ |= 0x00000004;
ownedByTeam_ = value;
return this;
}
public Builder clearOwnedByTeam() {
b0_ = (b0_ & ~0x00000004);
ownedByTeam_ = false;
return this;
}
private List<Sp.PBSharedFolder.PBUserPermissionsAndState> userPermissionsAndState_ =
Collections.emptyList();
private void ensureUserPermissionsAndStateIsMutable() {
if (!((b0_ & 0x00000008) == 0x00000008)) {
userPermissionsAndState_ = new ArrayList<Sp.PBSharedFolder.PBUserPermissionsAndState>(userPermissionsAndState_);
b0_ |= 0x00000008;
}
}
public List<Sp.PBSharedFolder.PBUserPermissionsAndState> getUserPermissionsAndStateList() {
return Collections.unmodifiableList(userPermissionsAndState_);
}
public int getUserPermissionsAndStateCount() {
return userPermissionsAndState_.size();
}
public Sp.PBSharedFolder.PBUserPermissionsAndState getUserPermissionsAndState(int index) {
return userPermissionsAndState_.get(index);
}
public Builder setUserPermissionsAndState(
int index, Sp.PBSharedFolder.PBUserPermissionsAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.set(index, value);
return this;
}
public Builder setUserPermissionsAndState(
int index, Sp.PBSharedFolder.PBUserPermissionsAndState.Builder bdForValue) {
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.set(index, bdForValue.build());
return this;
}
public Builder addUserPermissionsAndState(Sp.PBSharedFolder.PBUserPermissionsAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.add(value);
return this;
}
public Builder addUserPermissionsAndState(
int index, Sp.PBSharedFolder.PBUserPermissionsAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.add(index, value);
return this;
}
public Builder addUserPermissionsAndState(
Sp.PBSharedFolder.PBUserPermissionsAndState.Builder bdForValue) {
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.add(bdForValue.build());
return this;
}
public Builder addUserPermissionsAndState(
int index, Sp.PBSharedFolder.PBUserPermissionsAndState.Builder bdForValue) {
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.add(index, bdForValue.build());
return this;
}
public Builder addAllUserPermissionsAndState(
Iterable<? extends Sp.PBSharedFolder.PBUserPermissionsAndState> values) {
ensureUserPermissionsAndStateIsMutable();
AbstractMessageLite.Builder.addAll(
values, userPermissionsAndState_);
return this;
}
public Builder clearUserPermissionsAndState() {
userPermissionsAndState_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder removeUserPermissionsAndState(int index) {
ensureUserPermissionsAndStateIsMutable();
userPermissionsAndState_.remove(index);
return this;
}
private List<Sp.PBSharedFolder.PBGroupPermissions> groupPermissions_ =
Collections.emptyList();
private void ensureGroupPermissionsIsMutable() {
if (!((b0_ & 0x00000010) == 0x00000010)) {
groupPermissions_ = new ArrayList<Sp.PBSharedFolder.PBGroupPermissions>(groupPermissions_);
b0_ |= 0x00000010;
}
}
public List<Sp.PBSharedFolder.PBGroupPermissions> getGroupPermissionsList() {
return Collections.unmodifiableList(groupPermissions_);
}
public int getGroupPermissionsCount() {
return groupPermissions_.size();
}
public Sp.PBSharedFolder.PBGroupPermissions getGroupPermissions(int index) {
return groupPermissions_.get(index);
}
public Builder setGroupPermissions(
int index, Sp.PBSharedFolder.PBGroupPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupPermissionsIsMutable();
groupPermissions_.set(index, value);
return this;
}
public Builder setGroupPermissions(
int index, Sp.PBSharedFolder.PBGroupPermissions.Builder bdForValue) {
ensureGroupPermissionsIsMutable();
groupPermissions_.set(index, bdForValue.build());
return this;
}
public Builder addGroupPermissions(Sp.PBSharedFolder.PBGroupPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupPermissionsIsMutable();
groupPermissions_.add(value);
return this;
}
public Builder addGroupPermissions(
int index, Sp.PBSharedFolder.PBGroupPermissions value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupPermissionsIsMutable();
groupPermissions_.add(index, value);
return this;
}
public Builder addGroupPermissions(
Sp.PBSharedFolder.PBGroupPermissions.Builder bdForValue) {
ensureGroupPermissionsIsMutable();
groupPermissions_.add(bdForValue.build());
return this;
}
public Builder addGroupPermissions(
int index, Sp.PBSharedFolder.PBGroupPermissions.Builder bdForValue) {
ensureGroupPermissionsIsMutable();
groupPermissions_.add(index, bdForValue.build());
return this;
}
public Builder addAllGroupPermissions(
Iterable<? extends Sp.PBSharedFolder.PBGroupPermissions> values) {
ensureGroupPermissionsIsMutable();
AbstractMessageLite.Builder.addAll(
values, groupPermissions_);
return this;
}
public Builder clearGroupPermissions() {
groupPermissions_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000010);
return this;
}
public Builder removeGroupPermissions(int index) {
ensureGroupPermissionsIsMutable();
groupPermissions_.remove(index);
return this;
}
private Sp.PBSharedFolder.PBUserPermissionsAndState requestedUsersPermissionsAndState_ = Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance();
public boolean hasRequestedUsersPermissionsAndState() {
return ((b0_ & 0x00000020) == 0x00000020);
}
public Sp.PBSharedFolder.PBUserPermissionsAndState getRequestedUsersPermissionsAndState() {
return requestedUsersPermissionsAndState_;
}
public Builder setRequestedUsersPermissionsAndState(Sp.PBSharedFolder.PBUserPermissionsAndState value) {
if (value == null) {
throw new NullPointerException();
}
requestedUsersPermissionsAndState_ = value;
b0_ |= 0x00000020;
return this;
}
public Builder setRequestedUsersPermissionsAndState(
Sp.PBSharedFolder.PBUserPermissionsAndState.Builder bdForValue) {
requestedUsersPermissionsAndState_ = bdForValue.build();
b0_ |= 0x00000020;
return this;
}
public Builder mergeRequestedUsersPermissionsAndState(Sp.PBSharedFolder.PBUserPermissionsAndState value) {
if (((b0_ & 0x00000020) == 0x00000020) &&
requestedUsersPermissionsAndState_ != Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance()) {
requestedUsersPermissionsAndState_ =
Sp.PBSharedFolder.PBUserPermissionsAndState.newBuilder(requestedUsersPermissionsAndState_).mergeFrom(value).buildPartial();
} else {
requestedUsersPermissionsAndState_ = value;
}
b0_ |= 0x00000020;
return this;
}
public Builder clearRequestedUsersPermissionsAndState() {
requestedUsersPermissionsAndState_ = Sp.PBSharedFolder.PBUserPermissionsAndState.getDefaultInstance();
b0_ = (b0_ & ~0x00000020);
return this;
}
}
static {
defaultInstance = new PBSharedFolder(true);
defaultInstance.initFields();
}
}
public interface GetOrganizationInvitationsReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.GetOrganizationInvitationsReply.OrganizationInvitation> 
getOrganizationInvitationsList();
Sp.GetOrganizationInvitationsReply.OrganizationInvitation getOrganizationInvitations(int index);
int getOrganizationInvitationsCount();
}
public static final class GetOrganizationInvitationsReply extends
GeneratedMessageLite implements
GetOrganizationInvitationsReplyOrBuilder {
private GetOrganizationInvitationsReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetOrganizationInvitationsReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetOrganizationInvitationsReply defaultInstance;
public static GetOrganizationInvitationsReply getDefaultInstance() {
return defaultInstance;
}
public GetOrganizationInvitationsReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetOrganizationInvitationsReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 18: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
organizationInvitations_ = new ArrayList<Sp.GetOrganizationInvitationsReply.OrganizationInvitation>();
mutable_b0_ |= 0x00000001;
}
organizationInvitations_.add(input.readMessage(Sp.GetOrganizationInvitationsReply.OrganizationInvitation.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
organizationInvitations_ = Collections.unmodifiableList(organizationInvitations_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetOrganizationInvitationsReply> PARSER =
new AbstractParser<GetOrganizationInvitationsReply>() {
public GetOrganizationInvitationsReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetOrganizationInvitationsReply(input, er);
}
};
@Override
public Parser<GetOrganizationInvitationsReply> getParserForType() {
return PARSER;
}
public interface OrganizationInvitationOrBuilder extends
MessageLiteOrBuilder {
boolean hasInviter();
String getInviter();
ByteString
getInviterBytes();
boolean hasOrganizationName();
String getOrganizationName();
ByteString
getOrganizationNameBytes();
boolean hasOrganizationId();
int getOrganizationId();
}
public static final class OrganizationInvitation extends
GeneratedMessageLite implements
OrganizationInvitationOrBuilder {
private OrganizationInvitation(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private OrganizationInvitation(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final OrganizationInvitation defaultInstance;
public static OrganizationInvitation getDefaultInstance() {
return defaultInstance;
}
public OrganizationInvitation getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private OrganizationInvitation(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
inviter_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
organizationName_ = bs;
break;
}
case 24: {
b0_ |= 0x00000004;
organizationId_ = input.readInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<OrganizationInvitation> PARSER =
new AbstractParser<OrganizationInvitation>() {
public OrganizationInvitation parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new OrganizationInvitation(input, er);
}
};
@Override
public Parser<OrganizationInvitation> getParserForType() {
return PARSER;
}
private int b0_;
public static final int INVITER_FIELD_NUMBER = 1;
private Object inviter_;
public boolean hasInviter() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getInviter() {
Object ref = inviter_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
inviter_ = s;
}
return s;
}
}
public ByteString
getInviterBytes() {
Object ref = inviter_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
inviter_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ORGANIZATION_NAME_FIELD_NUMBER = 2;
private Object organizationName_;
public boolean hasOrganizationName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationName() {
Object ref = organizationName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationName_ = s;
}
return s;
}
}
public ByteString
getOrganizationNameBytes() {
Object ref = organizationName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ORGANIZATION_ID_FIELD_NUMBER = 3;
private int organizationId_;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public int getOrganizationId() {
return organizationId_;
}
private void initFields() {
inviter_ = "";
organizationName_ = "";
organizationId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasInviter()) {
mii = 0;
return false;
}
if (!hasOrganizationName()) {
mii = 0;
return false;
}
if (!hasOrganizationId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getInviterBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getOrganizationNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeInt32(3, organizationId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getInviterBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getOrganizationNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeInt32Size(3, organizationId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationInvitationsReply.OrganizationInvitation parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetOrganizationInvitationsReply.OrganizationInvitation prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetOrganizationInvitationsReply.OrganizationInvitation, Builder>
implements
Sp.GetOrganizationInvitationsReply.OrganizationInvitationOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
inviter_ = "";
b0_ = (b0_ & ~0x00000001);
organizationName_ = "";
b0_ = (b0_ & ~0x00000002);
organizationId_ = 0;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitation getDefaultInstanceForType() {
return Sp.GetOrganizationInvitationsReply.OrganizationInvitation.getDefaultInstance();
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitation build() {
Sp.GetOrganizationInvitationsReply.OrganizationInvitation result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitation buildPartial() {
Sp.GetOrganizationInvitationsReply.OrganizationInvitation result = new Sp.GetOrganizationInvitationsReply.OrganizationInvitation(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.inviter_ = inviter_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.organizationName_ = organizationName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.organizationId_ = organizationId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetOrganizationInvitationsReply.OrganizationInvitation other) {
if (other == Sp.GetOrganizationInvitationsReply.OrganizationInvitation.getDefaultInstance()) return this;
if (other.hasInviter()) {
b0_ |= 0x00000001;
inviter_ = other.inviter_;
}
if (other.hasOrganizationName()) {
b0_ |= 0x00000002;
organizationName_ = other.organizationName_;
}
if (other.hasOrganizationId()) {
setOrganizationId(other.getOrganizationId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasInviter()) {
return false;
}
if (!hasOrganizationName()) {
return false;
}
if (!hasOrganizationId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetOrganizationInvitationsReply.OrganizationInvitation pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetOrganizationInvitationsReply.OrganizationInvitation) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object inviter_ = "";
public boolean hasInviter() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getInviter() {
Object ref = inviter_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
inviter_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getInviterBytes() {
Object ref = inviter_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
inviter_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setInviter(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
inviter_ = value;
return this;
}
public Builder clearInviter() {
b0_ = (b0_ & ~0x00000001);
inviter_ = getDefaultInstance().getInviter();
return this;
}
public Builder setInviterBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
inviter_ = value;
return this;
}
private Object organizationName_ = "";
public boolean hasOrganizationName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationName() {
Object ref = organizationName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrganizationNameBytes() {
Object ref = organizationName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrganizationName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationName_ = value;
return this;
}
public Builder clearOrganizationName() {
b0_ = (b0_ & ~0x00000002);
organizationName_ = getDefaultInstance().getOrganizationName();
return this;
}
public Builder setOrganizationNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationName_ = value;
return this;
}
private int organizationId_ ;
public boolean hasOrganizationId() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public int getOrganizationId() {
return organizationId_;
}
public Builder setOrganizationId(int value) {
b0_ |= 0x00000004;
organizationId_ = value;
return this;
}
public Builder clearOrganizationId() {
b0_ = (b0_ & ~0x00000004);
organizationId_ = 0;
return this;
}
}
static {
defaultInstance = new OrganizationInvitation(true);
defaultInstance.initFields();
}
}
public static final int ORGANIZATION_INVITATIONS_FIELD_NUMBER = 2;
private List<Sp.GetOrganizationInvitationsReply.OrganizationInvitation> organizationInvitations_;
public List<Sp.GetOrganizationInvitationsReply.OrganizationInvitation> getOrganizationInvitationsList() {
return organizationInvitations_;
}
public List<? extends Sp.GetOrganizationInvitationsReply.OrganizationInvitationOrBuilder> 
getOrganizationInvitationsOrBuilderList() {
return organizationInvitations_;
}
public int getOrganizationInvitationsCount() {
return organizationInvitations_.size();
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitation getOrganizationInvitations(int index) {
return organizationInvitations_.get(index);
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitationOrBuilder getOrganizationInvitationsOrBuilder(
int index) {
return organizationInvitations_.get(index);
}
private void initFields() {
organizationInvitations_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getOrganizationInvitationsCount(); i++) {
if (!getOrganizationInvitations(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < organizationInvitations_.size(); i++) {
output.writeMessage(2, organizationInvitations_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < organizationInvitations_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(2, organizationInvitations_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetOrganizationInvitationsReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetOrganizationInvitationsReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrganizationInvitationsReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetOrganizationInvitationsReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetOrganizationInvitationsReply, Builder>
implements
Sp.GetOrganizationInvitationsReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
organizationInvitations_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetOrganizationInvitationsReply getDefaultInstanceForType() {
return Sp.GetOrganizationInvitationsReply.getDefaultInstance();
}
public Sp.GetOrganizationInvitationsReply build() {
Sp.GetOrganizationInvitationsReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetOrganizationInvitationsReply buildPartial() {
Sp.GetOrganizationInvitationsReply result = new Sp.GetOrganizationInvitationsReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
organizationInvitations_ = Collections.unmodifiableList(organizationInvitations_);
b0_ = (b0_ & ~0x00000001);
}
result.organizationInvitations_ = organizationInvitations_;
return result;
}
public Builder mergeFrom(Sp.GetOrganizationInvitationsReply other) {
if (other == Sp.GetOrganizationInvitationsReply.getDefaultInstance()) return this;
if (!other.organizationInvitations_.isEmpty()) {
if (organizationInvitations_.isEmpty()) {
organizationInvitations_ = other.organizationInvitations_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.addAll(other.organizationInvitations_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getOrganizationInvitationsCount(); i++) {
if (!getOrganizationInvitations(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetOrganizationInvitationsReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetOrganizationInvitationsReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.GetOrganizationInvitationsReply.OrganizationInvitation> organizationInvitations_ =
Collections.emptyList();
private void ensureOrganizationInvitationsIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
organizationInvitations_ = new ArrayList<Sp.GetOrganizationInvitationsReply.OrganizationInvitation>(organizationInvitations_);
b0_ |= 0x00000001;
}
}
public List<Sp.GetOrganizationInvitationsReply.OrganizationInvitation> getOrganizationInvitationsList() {
return Collections.unmodifiableList(organizationInvitations_);
}
public int getOrganizationInvitationsCount() {
return organizationInvitations_.size();
}
public Sp.GetOrganizationInvitationsReply.OrganizationInvitation getOrganizationInvitations(int index) {
return organizationInvitations_.get(index);
}
public Builder setOrganizationInvitations(
int index, Sp.GetOrganizationInvitationsReply.OrganizationInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.set(index, value);
return this;
}
public Builder setOrganizationInvitations(
int index, Sp.GetOrganizationInvitationsReply.OrganizationInvitation.Builder bdForValue) {
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.set(index, bdForValue.build());
return this;
}
public Builder addOrganizationInvitations(Sp.GetOrganizationInvitationsReply.OrganizationInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.add(value);
return this;
}
public Builder addOrganizationInvitations(
int index, Sp.GetOrganizationInvitationsReply.OrganizationInvitation value) {
if (value == null) {
throw new NullPointerException();
}
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.add(index, value);
return this;
}
public Builder addOrganizationInvitations(
Sp.GetOrganizationInvitationsReply.OrganizationInvitation.Builder bdForValue) {
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.add(bdForValue.build());
return this;
}
public Builder addOrganizationInvitations(
int index, Sp.GetOrganizationInvitationsReply.OrganizationInvitation.Builder bdForValue) {
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.add(index, bdForValue.build());
return this;
}
public Builder addAllOrganizationInvitations(
Iterable<? extends Sp.GetOrganizationInvitationsReply.OrganizationInvitation> values) {
ensureOrganizationInvitationsIsMutable();
AbstractMessageLite.Builder.addAll(
values, organizationInvitations_);
return this;
}
public Builder clearOrganizationInvitations() {
organizationInvitations_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeOrganizationInvitations(int index) {
ensureOrganizationInvitationsIsMutable();
organizationInvitations_.remove(index);
return this;
}
}
static {
defaultInstance = new GetOrganizationInvitationsReply(true);
defaultInstance.initFields();
}
}
public interface GetOrgPreferencesReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrganizationName();
String getOrganizationName();
ByteString
getOrganizationNameBytes();
boolean hasOrganizationContactPhone();
String getOrganizationContactPhone();
ByteString
getOrganizationContactPhoneBytes();
boolean hasLevel();
Sp.PBTwoFactorEnforcementLevel getLevel();
boolean hasLicenseSeatsUsed();
int getLicenseSeatsUsed();
boolean hasExternalUserCount();
int getExternalUserCount();
}
public static final class GetOrgPreferencesReply extends
GeneratedMessageLite implements
GetOrgPreferencesReplyOrBuilder {
private GetOrgPreferencesReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetOrgPreferencesReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetOrgPreferencesReply defaultInstance;
public static GetOrgPreferencesReply getDefaultInstance() {
return defaultInstance;
}
public GetOrgPreferencesReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetOrgPreferencesReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
organizationName_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
organizationContactPhone_ = bs;
break;
}
case 24: {
int rawValue = input.readEnum();
Sp.PBTwoFactorEnforcementLevel value = Sp.PBTwoFactorEnforcementLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000004;
level_ = value;
}
break;
}
case 32: {
b0_ |= 0x00000008;
licenseSeatsUsed_ = input.readInt32();
break;
}
case 40: {
b0_ |= 0x00000010;
externalUserCount_ = input.readInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetOrgPreferencesReply> PARSER =
new AbstractParser<GetOrgPreferencesReply>() {
public GetOrgPreferencesReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetOrgPreferencesReply(input, er);
}
};
@Override
public Parser<GetOrgPreferencesReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORGANIZATION_NAME_FIELD_NUMBER = 1;
private Object organizationName_;
public boolean hasOrganizationName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrganizationName() {
Object ref = organizationName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationName_ = s;
}
return s;
}
}
public ByteString
getOrganizationNameBytes() {
Object ref = organizationName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ORGANIZATION_CONTACT_PHONE_FIELD_NUMBER = 2;
private Object organizationContactPhone_;
public boolean hasOrganizationContactPhone() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationContactPhone() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationContactPhone_ = s;
}
return s;
}
}
public ByteString
getOrganizationContactPhoneBytes() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationContactPhone_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LEVEL_FIELD_NUMBER = 3;
private Sp.PBTwoFactorEnforcementLevel level_;
public boolean hasLevel() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
public static final int LICENSE_SEATS_USED_FIELD_NUMBER = 4;
private int licenseSeatsUsed_;
public boolean hasLicenseSeatsUsed() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public int getLicenseSeatsUsed() {
return licenseSeatsUsed_;
}
public static final int EXTERNAL_USER_COUNT_FIELD_NUMBER = 5;
private int externalUserCount_;
public boolean hasExternalUserCount() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public int getExternalUserCount() {
return externalUserCount_;
}
private void initFields() {
organizationName_ = "";
organizationContactPhone_ = "";
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
licenseSeatsUsed_ = 0;
externalUserCount_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasOrganizationName()) {
mii = 0;
return false;
}
if (!hasOrganizationContactPhone()) {
mii = 0;
return false;
}
if (!hasLevel()) {
mii = 0;
return false;
}
if (!hasLicenseSeatsUsed()) {
mii = 0;
return false;
}
if (!hasExternalUserCount()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getOrganizationNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getOrganizationContactPhoneBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeEnum(3, level_.getNumber());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeInt32(4, licenseSeatsUsed_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeInt32(5, externalUserCount_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getOrganizationNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getOrganizationContactPhoneBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeEnumSize(3, level_.getNumber());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeInt32Size(4, licenseSeatsUsed_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeInt32Size(5, externalUserCount_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetOrgPreferencesReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrgPreferencesReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrgPreferencesReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetOrgPreferencesReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetOrgPreferencesReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrgPreferencesReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetOrgPreferencesReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetOrgPreferencesReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetOrgPreferencesReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetOrgPreferencesReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetOrgPreferencesReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetOrgPreferencesReply, Builder>
implements
Sp.GetOrgPreferencesReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
organizationName_ = "";
b0_ = (b0_ & ~0x00000001);
organizationContactPhone_ = "";
b0_ = (b0_ & ~0x00000002);
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
b0_ = (b0_ & ~0x00000004);
licenseSeatsUsed_ = 0;
b0_ = (b0_ & ~0x00000008);
externalUserCount_ = 0;
b0_ = (b0_ & ~0x00000010);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetOrgPreferencesReply getDefaultInstanceForType() {
return Sp.GetOrgPreferencesReply.getDefaultInstance();
}
public Sp.GetOrgPreferencesReply build() {
Sp.GetOrgPreferencesReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetOrgPreferencesReply buildPartial() {
Sp.GetOrgPreferencesReply result = new Sp.GetOrgPreferencesReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.organizationName_ = organizationName_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.organizationContactPhone_ = organizationContactPhone_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.level_ = level_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.licenseSeatsUsed_ = licenseSeatsUsed_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.externalUserCount_ = externalUserCount_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetOrgPreferencesReply other) {
if (other == Sp.GetOrgPreferencesReply.getDefaultInstance()) return this;
if (other.hasOrganizationName()) {
b0_ |= 0x00000001;
organizationName_ = other.organizationName_;
}
if (other.hasOrganizationContactPhone()) {
b0_ |= 0x00000002;
organizationContactPhone_ = other.organizationContactPhone_;
}
if (other.hasLevel()) {
setLevel(other.getLevel());
}
if (other.hasLicenseSeatsUsed()) {
setLicenseSeatsUsed(other.getLicenseSeatsUsed());
}
if (other.hasExternalUserCount()) {
setExternalUserCount(other.getExternalUserCount());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasOrganizationName()) {
return false;
}
if (!hasOrganizationContactPhone()) {
return false;
}
if (!hasLevel()) {
return false;
}
if (!hasLicenseSeatsUsed()) {
return false;
}
if (!hasExternalUserCount()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetOrgPreferencesReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetOrgPreferencesReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object organizationName_ = "";
public boolean hasOrganizationName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrganizationName() {
Object ref = organizationName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrganizationNameBytes() {
Object ref = organizationName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrganizationName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
organizationName_ = value;
return this;
}
public Builder clearOrganizationName() {
b0_ = (b0_ & ~0x00000001);
organizationName_ = getDefaultInstance().getOrganizationName();
return this;
}
public Builder setOrganizationNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
organizationName_ = value;
return this;
}
private Object organizationContactPhone_ = "";
public boolean hasOrganizationContactPhone() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationContactPhone() {
Object ref = organizationContactPhone_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationContactPhone_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrganizationContactPhoneBytes() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationContactPhone_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrganizationContactPhone(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationContactPhone_ = value;
return this;
}
public Builder clearOrganizationContactPhone() {
b0_ = (b0_ & ~0x00000002);
organizationContactPhone_ = getDefaultInstance().getOrganizationContactPhone();
return this;
}
public Builder setOrganizationContactPhoneBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationContactPhone_ = value;
return this;
}
private Sp.PBTwoFactorEnforcementLevel level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
public boolean hasLevel() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
public Builder setLevel(Sp.PBTwoFactorEnforcementLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
level_ = value;
return this;
}
public Builder clearLevel() {
b0_ = (b0_ & ~0x00000004);
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
return this;
}
private int licenseSeatsUsed_ ;
public boolean hasLicenseSeatsUsed() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public int getLicenseSeatsUsed() {
return licenseSeatsUsed_;
}
public Builder setLicenseSeatsUsed(int value) {
b0_ |= 0x00000008;
licenseSeatsUsed_ = value;
return this;
}
public Builder clearLicenseSeatsUsed() {
b0_ = (b0_ & ~0x00000008);
licenseSeatsUsed_ = 0;
return this;
}
private int externalUserCount_ ;
public boolean hasExternalUserCount() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public int getExternalUserCount() {
return externalUserCount_;
}
public Builder setExternalUserCount(int value) {
b0_ |= 0x00000010;
externalUserCount_ = value;
return this;
}
public Builder clearExternalUserCount() {
b0_ = (b0_ & ~0x00000010);
externalUserCount_ = 0;
return this;
}
}
static {
defaultInstance = new GetOrgPreferencesReply(true);
defaultInstance.initFields();
}
}
public interface SetOrgPreferencesCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasOrgName();
String getOrgName();
ByteString
getOrgNameBytes();
boolean hasOrganizationContactPhone();
String getOrganizationContactPhone();
ByteString
getOrganizationContactPhoneBytes();
}
public static final class SetOrgPreferencesCall extends
GeneratedMessageLite implements
SetOrgPreferencesCallOrBuilder {
private SetOrgPreferencesCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetOrgPreferencesCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetOrgPreferencesCall defaultInstance;
public static SetOrgPreferencesCall getDefaultInstance() {
return defaultInstance;
}
public SetOrgPreferencesCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetOrgPreferencesCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
orgName_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
organizationContactPhone_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetOrgPreferencesCall> PARSER =
new AbstractParser<SetOrgPreferencesCall>() {
public SetOrgPreferencesCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetOrgPreferencesCall(input, er);
}
};
@Override
public Parser<SetOrgPreferencesCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ORG_NAME_FIELD_NUMBER = 1;
private Object orgName_;
public boolean hasOrgName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgName() {
Object ref = orgName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgName_ = s;
}
return s;
}
}
public ByteString
getOrgNameBytes() {
Object ref = orgName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ORGANIZATION_CONTACT_PHONE_FIELD_NUMBER = 2;
private Object organizationContactPhone_;
public boolean hasOrganizationContactPhone() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationContactPhone() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationContactPhone_ = s;
}
return s;
}
}
public ByteString
getOrganizationContactPhoneBytes() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationContactPhone_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
orgName_ = "";
organizationContactPhone_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getOrgNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getOrganizationContactPhoneBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getOrgNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getOrganizationContactPhoneBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetOrgPreferencesCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetOrgPreferencesCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetOrgPreferencesCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetOrgPreferencesCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetOrgPreferencesCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetOrgPreferencesCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetOrgPreferencesCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetOrgPreferencesCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetOrgPreferencesCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetOrgPreferencesCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetOrgPreferencesCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetOrgPreferencesCall, Builder>
implements
Sp.SetOrgPreferencesCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
orgName_ = "";
b0_ = (b0_ & ~0x00000001);
organizationContactPhone_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetOrgPreferencesCall getDefaultInstanceForType() {
return Sp.SetOrgPreferencesCall.getDefaultInstance();
}
public Sp.SetOrgPreferencesCall build() {
Sp.SetOrgPreferencesCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetOrgPreferencesCall buildPartial() {
Sp.SetOrgPreferencesCall result = new Sp.SetOrgPreferencesCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.orgName_ = orgName_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.organizationContactPhone_ = organizationContactPhone_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetOrgPreferencesCall other) {
if (other == Sp.SetOrgPreferencesCall.getDefaultInstance()) return this;
if (other.hasOrgName()) {
b0_ |= 0x00000001;
orgName_ = other.orgName_;
}
if (other.hasOrganizationContactPhone()) {
b0_ |= 0x00000002;
organizationContactPhone_ = other.organizationContactPhone_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetOrgPreferencesCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetOrgPreferencesCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object orgName_ = "";
public boolean hasOrgName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getOrgName() {
Object ref = orgName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrgNameBytes() {
Object ref = orgName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrgName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgName_ = value;
return this;
}
public Builder clearOrgName() {
b0_ = (b0_ & ~0x00000001);
orgName_ = getDefaultInstance().getOrgName();
return this;
}
public Builder setOrgNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
orgName_ = value;
return this;
}
private Object organizationContactPhone_ = "";
public boolean hasOrganizationContactPhone() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrganizationContactPhone() {
Object ref = organizationContactPhone_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
organizationContactPhone_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrganizationContactPhoneBytes() {
Object ref = organizationContactPhone_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
organizationContactPhone_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrganizationContactPhone(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationContactPhone_ = value;
return this;
}
public Builder clearOrganizationContactPhone() {
b0_ = (b0_ & ~0x00000002);
organizationContactPhone_ = getDefaultInstance().getOrganizationContactPhone();
return this;
}
public Builder setOrganizationContactPhoneBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
organizationContactPhone_ = value;
return this;
}
}
static {
defaultInstance = new SetOrgPreferencesCall(true);
defaultInstance.initFields();
}
}
public interface SetUnsubscribeEmailCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUnsubscribeToken();
String getUnsubscribeToken();
ByteString
getUnsubscribeTokenBytes();
}
public static final class SetUnsubscribeEmailCall extends
GeneratedMessageLite implements
SetUnsubscribeEmailCallOrBuilder {
private SetUnsubscribeEmailCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUnsubscribeEmailCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUnsubscribeEmailCall defaultInstance;
public static SetUnsubscribeEmailCall getDefaultInstance() {
return defaultInstance;
}
public SetUnsubscribeEmailCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUnsubscribeEmailCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
unsubscribeToken_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUnsubscribeEmailCall> PARSER =
new AbstractParser<SetUnsubscribeEmailCall>() {
public SetUnsubscribeEmailCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUnsubscribeEmailCall(input, er);
}
};
@Override
public Parser<SetUnsubscribeEmailCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int UNSUBSCRIBE_TOKEN_FIELD_NUMBER = 1;
private Object unsubscribeToken_;
public boolean hasUnsubscribeToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUnsubscribeToken() {
Object ref = unsubscribeToken_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
unsubscribeToken_ = s;
}
return s;
}
}
public ByteString
getUnsubscribeTokenBytes() {
Object ref = unsubscribeToken_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
unsubscribeToken_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
unsubscribeToken_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUnsubscribeToken()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUnsubscribeTokenBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUnsubscribeTokenBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUnsubscribeEmailCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUnsubscribeEmailCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUnsubscribeEmailCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUnsubscribeEmailCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUnsubscribeEmailCall, Builder>
implements
Sp.SetUnsubscribeEmailCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
unsubscribeToken_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUnsubscribeEmailCall getDefaultInstanceForType() {
return Sp.SetUnsubscribeEmailCall.getDefaultInstance();
}
public Sp.SetUnsubscribeEmailCall build() {
Sp.SetUnsubscribeEmailCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUnsubscribeEmailCall buildPartial() {
Sp.SetUnsubscribeEmailCall result = new Sp.SetUnsubscribeEmailCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.unsubscribeToken_ = unsubscribeToken_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUnsubscribeEmailCall other) {
if (other == Sp.SetUnsubscribeEmailCall.getDefaultInstance()) return this;
if (other.hasUnsubscribeToken()) {
b0_ |= 0x00000001;
unsubscribeToken_ = other.unsubscribeToken_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUnsubscribeToken()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUnsubscribeEmailCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUnsubscribeEmailCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object unsubscribeToken_ = "";
public boolean hasUnsubscribeToken() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUnsubscribeToken() {
Object ref = unsubscribeToken_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
unsubscribeToken_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUnsubscribeTokenBytes() {
Object ref = unsubscribeToken_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
unsubscribeToken_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUnsubscribeToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
unsubscribeToken_ = value;
return this;
}
public Builder clearUnsubscribeToken() {
b0_ = (b0_ & ~0x00000001);
unsubscribeToken_ = getDefaultInstance().getUnsubscribeToken();
return this;
}
public Builder setUnsubscribeTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
unsubscribeToken_ = value;
return this;
}
}
static {
defaultInstance = new SetUnsubscribeEmailCall(true);
defaultInstance.initFields();
}
}
public interface GetUnsubscribeEmailReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasEmailId();
String getEmailId();
ByteString
getEmailIdBytes();
}
public static final class GetUnsubscribeEmailReply extends
GeneratedMessageLite implements
GetUnsubscribeEmailReplyOrBuilder {
private GetUnsubscribeEmailReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUnsubscribeEmailReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUnsubscribeEmailReply defaultInstance;
public static GetUnsubscribeEmailReply getDefaultInstance() {
return defaultInstance;
}
public GetUnsubscribeEmailReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUnsubscribeEmailReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
emailId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUnsubscribeEmailReply> PARSER =
new AbstractParser<GetUnsubscribeEmailReply>() {
public GetUnsubscribeEmailReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUnsubscribeEmailReply(input, er);
}
};
@Override
public Parser<GetUnsubscribeEmailReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int EMAIL_ID_FIELD_NUMBER = 1;
private Object emailId_;
public boolean hasEmailId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailId() {
Object ref = emailId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailId_ = s;
}
return s;
}
}
public ByteString
getEmailIdBytes() {
Object ref = emailId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
emailId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEmailId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getEmailIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getEmailIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUnsubscribeEmailReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUnsubscribeEmailReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUnsubscribeEmailReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUnsubscribeEmailReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUnsubscribeEmailReply, Builder>
implements
Sp.GetUnsubscribeEmailReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
emailId_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUnsubscribeEmailReply getDefaultInstanceForType() {
return Sp.GetUnsubscribeEmailReply.getDefaultInstance();
}
public Sp.GetUnsubscribeEmailReply build() {
Sp.GetUnsubscribeEmailReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUnsubscribeEmailReply buildPartial() {
Sp.GetUnsubscribeEmailReply result = new Sp.GetUnsubscribeEmailReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.emailId_ = emailId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUnsubscribeEmailReply other) {
if (other == Sp.GetUnsubscribeEmailReply.getDefaultInstance()) return this;
if (other.hasEmailId()) {
b0_ |= 0x00000001;
emailId_ = other.emailId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEmailId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUnsubscribeEmailReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUnsubscribeEmailReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object emailId_ = "";
public boolean hasEmailId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getEmailId() {
Object ref = emailId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
emailId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getEmailIdBytes() {
Object ref = emailId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
emailId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setEmailId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailId_ = value;
return this;
}
public Builder clearEmailId() {
b0_ = (b0_ & ~0x00000001);
emailId_ = getDefaultInstance().getEmailId();
return this;
}
public Builder setEmailIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
emailId_ = value;
return this;
}
}
static {
defaultInstance = new GetUnsubscribeEmailReply(true);
defaultInstance.initFields();
}
}
public interface PBFullNameOrBuilder extends
MessageLiteOrBuilder {
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
}
public static final class PBFullName extends
GeneratedMessageLite implements
PBFullNameOrBuilder {
private PBFullName(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBFullName(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBFullName defaultInstance;
public static PBFullName getDefaultInstance() {
return defaultInstance;
}
public PBFullName getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBFullName(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
firstName_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
lastName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBFullName> PARSER =
new AbstractParser<PBFullName>() {
public PBFullName parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBFullName(input, er);
}
};
@Override
public Parser<PBFullName> getParserForType() {
return PARSER;
}
private int b0_;
public static final int FIRST_NAME_FIELD_NUMBER = 1;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LAST_NAME_FIELD_NUMBER = 2;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
firstName_ = "";
lastName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasFirstName()) {
mii = 0;
return false;
}
if (!hasLastName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getFirstNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getLastNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getFirstNameBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getLastNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBFullName parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBFullName parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBFullName parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBFullName parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBFullName parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBFullName parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBFullName parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBFullName parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBFullName parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBFullName parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBFullName prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBFullName, Builder>
implements
Sp.PBFullNameOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
firstName_ = "";
b0_ = (b0_ & ~0x00000001);
lastName_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBFullName getDefaultInstanceForType() {
return Sp.PBFullName.getDefaultInstance();
}
public Sp.PBFullName build() {
Sp.PBFullName result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBFullName buildPartial() {
Sp.PBFullName result = new Sp.PBFullName(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.lastName_ = lastName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBFullName other) {
if (other == Sp.PBFullName.getDefaultInstance()) return this;
if (other.hasFirstName()) {
b0_ |= 0x00000001;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000002;
lastName_ = other.lastName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasFirstName()) {
return false;
}
if (!hasLastName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBFullName pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBFullName) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000001);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000002);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
lastName_ = value;
return this;
}
}
static {
defaultInstance = new PBFullName(true);
defaultInstance.initFields();
}
}
public interface GetCommandQueueHeadCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
}
public static final class GetCommandQueueHeadCall extends
GeneratedMessageLite implements
GetCommandQueueHeadCallOrBuilder {
private GetCommandQueueHeadCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetCommandQueueHeadCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetCommandQueueHeadCall defaultInstance;
public static GetCommandQueueHeadCall getDefaultInstance() {
return defaultInstance;
}
public GetCommandQueueHeadCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetCommandQueueHeadCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetCommandQueueHeadCall> PARSER =
new AbstractParser<GetCommandQueueHeadCall>() {
public GetCommandQueueHeadCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetCommandQueueHeadCall(input, er);
}
};
@Override
public Parser<GetCommandQueueHeadCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetCommandQueueHeadCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetCommandQueueHeadCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetCommandQueueHeadCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetCommandQueueHeadCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetCommandQueueHeadCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetCommandQueueHeadCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetCommandQueueHeadCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetCommandQueueHeadCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetCommandQueueHeadCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetCommandQueueHeadCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetCommandQueueHeadCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetCommandQueueHeadCall, Builder>
implements
Sp.GetCommandQueueHeadCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetCommandQueueHeadCall getDefaultInstanceForType() {
return Sp.GetCommandQueueHeadCall.getDefaultInstance();
}
public Sp.GetCommandQueueHeadCall build() {
Sp.GetCommandQueueHeadCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetCommandQueueHeadCall buildPartial() {
Sp.GetCommandQueueHeadCall result = new Sp.GetCommandQueueHeadCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetCommandQueueHeadCall other) {
if (other == Sp.GetCommandQueueHeadCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetCommandQueueHeadCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetCommandQueueHeadCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
}
static {
defaultInstance = new GetCommandQueueHeadCall(true);
defaultInstance.initFields();
}
}
public interface GetCommandQueueHeadReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasCommand();
Cmd.Command getCommand();
boolean hasQueueSize();
long getQueueSize();
}
public static final class GetCommandQueueHeadReply extends
GeneratedMessageLite implements
GetCommandQueueHeadReplyOrBuilder {
private GetCommandQueueHeadReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetCommandQueueHeadReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetCommandQueueHeadReply defaultInstance;
public static GetCommandQueueHeadReply getDefaultInstance() {
return defaultInstance;
}
public GetCommandQueueHeadReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetCommandQueueHeadReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Cmd.Command.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = command_.toBuilder();
}
command_ = input.readMessage(Cmd.Command.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(command_);
command_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 16: {
b0_ |= 0x00000002;
queueSize_ = input.readInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetCommandQueueHeadReply> PARSER =
new AbstractParser<GetCommandQueueHeadReply>() {
public GetCommandQueueHeadReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetCommandQueueHeadReply(input, er);
}
};
@Override
public Parser<GetCommandQueueHeadReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int COMMAND_FIELD_NUMBER = 1;
private Cmd.Command command_;
public boolean hasCommand() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Cmd.Command getCommand() {
return command_;
}
public static final int QUEUE_SIZE_FIELD_NUMBER = 2;
private long queueSize_;
public boolean hasQueueSize() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getQueueSize() {
return queueSize_;
}
private void initFields() {
command_ = Cmd.Command.getDefaultInstance();
queueSize_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasQueueSize()) {
mii = 0;
return false;
}
if (hasCommand()) {
if (!getCommand().isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, command_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeInt64(2, queueSize_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, command_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeInt64Size(2, queueSize_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetCommandQueueHeadReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetCommandQueueHeadReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetCommandQueueHeadReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetCommandQueueHeadReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetCommandQueueHeadReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetCommandQueueHeadReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetCommandQueueHeadReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetCommandQueueHeadReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetCommandQueueHeadReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetCommandQueueHeadReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetCommandQueueHeadReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetCommandQueueHeadReply, Builder>
implements
Sp.GetCommandQueueHeadReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
command_ = Cmd.Command.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
queueSize_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetCommandQueueHeadReply getDefaultInstanceForType() {
return Sp.GetCommandQueueHeadReply.getDefaultInstance();
}
public Sp.GetCommandQueueHeadReply build() {
Sp.GetCommandQueueHeadReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetCommandQueueHeadReply buildPartial() {
Sp.GetCommandQueueHeadReply result = new Sp.GetCommandQueueHeadReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.command_ = command_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.queueSize_ = queueSize_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetCommandQueueHeadReply other) {
if (other == Sp.GetCommandQueueHeadReply.getDefaultInstance()) return this;
if (other.hasCommand()) {
mergeCommand(other.getCommand());
}
if (other.hasQueueSize()) {
setQueueSize(other.getQueueSize());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasQueueSize()) {
return false;
}
if (hasCommand()) {
if (!getCommand().isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetCommandQueueHeadReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetCommandQueueHeadReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Cmd.Command command_ = Cmd.Command.getDefaultInstance();
public boolean hasCommand() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Cmd.Command getCommand() {
return command_;
}
public Builder setCommand(Cmd.Command value) {
if (value == null) {
throw new NullPointerException();
}
command_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setCommand(
Cmd.Command.Builder bdForValue) {
command_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeCommand(Cmd.Command value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
command_ != Cmd.Command.getDefaultInstance()) {
command_ =
Cmd.Command.newBuilder(command_).mergeFrom(value).buildPartial();
} else {
command_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearCommand() {
command_ = Cmd.Command.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private long queueSize_ ;
public boolean hasQueueSize() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getQueueSize() {
return queueSize_;
}
public Builder setQueueSize(long value) {
b0_ |= 0x00000002;
queueSize_ = value;
return this;
}
public Builder clearQueueSize() {
b0_ = (b0_ & ~0x00000002);
queueSize_ = 0L;
return this;
}
}
static {
defaultInstance = new GetCommandQueueHeadReply(true);
defaultInstance.initFields();
}
}
public interface AckCommandQueueHeadCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasEpoch();
long getEpoch();
boolean hasError();
boolean getError();
}
public static final class AckCommandQueueHeadCall extends
GeneratedMessageLite implements
AckCommandQueueHeadCallOrBuilder {
private AckCommandQueueHeadCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AckCommandQueueHeadCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AckCommandQueueHeadCall defaultInstance;
public static AckCommandQueueHeadCall getDefaultInstance() {
return defaultInstance;
}
public AckCommandQueueHeadCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AckCommandQueueHeadCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 16: {
b0_ |= 0x00000002;
epoch_ = input.readUInt64();
break;
}
case 24: {
b0_ |= 0x00000004;
error_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AckCommandQueueHeadCall> PARSER =
new AbstractParser<AckCommandQueueHeadCall>() {
public AckCommandQueueHeadCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AckCommandQueueHeadCall(input, er);
}
};
@Override
public Parser<AckCommandQueueHeadCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int EPOCH_FIELD_NUMBER = 2;
private long epoch_;
public boolean hasEpoch() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getEpoch() {
return epoch_;
}
public static final int ERROR_FIELD_NUMBER = 3;
private boolean error_;
public boolean hasError() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getError() {
return error_;
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
epoch_ = 0L;
error_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasEpoch()) {
mii = 0;
return false;
}
if (!hasError()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt64(2, epoch_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBool(3, error_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt64Size(2, epoch_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBoolSize(3, error_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AckCommandQueueHeadCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AckCommandQueueHeadCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AckCommandQueueHeadCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AckCommandQueueHeadCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AckCommandQueueHeadCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AckCommandQueueHeadCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AckCommandQueueHeadCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AckCommandQueueHeadCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AckCommandQueueHeadCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AckCommandQueueHeadCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AckCommandQueueHeadCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AckCommandQueueHeadCall, Builder>
implements
Sp.AckCommandQueueHeadCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
epoch_ = 0L;
b0_ = (b0_ & ~0x00000002);
error_ = false;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AckCommandQueueHeadCall getDefaultInstanceForType() {
return Sp.AckCommandQueueHeadCall.getDefaultInstance();
}
public Sp.AckCommandQueueHeadCall build() {
Sp.AckCommandQueueHeadCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AckCommandQueueHeadCall buildPartial() {
Sp.AckCommandQueueHeadCall result = new Sp.AckCommandQueueHeadCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.epoch_ = epoch_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.error_ = error_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AckCommandQueueHeadCall other) {
if (other == Sp.AckCommandQueueHeadCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasEpoch()) {
setEpoch(other.getEpoch());
}
if (other.hasError()) {
setError(other.getError());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasEpoch()) {
return false;
}
if (!hasError()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AckCommandQueueHeadCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AckCommandQueueHeadCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private long epoch_ ;
public boolean hasEpoch() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getEpoch() {
return epoch_;
}
public Builder setEpoch(long value) {
b0_ |= 0x00000002;
epoch_ = value;
return this;
}
public Builder clearEpoch() {
b0_ = (b0_ & ~0x00000002);
epoch_ = 0L;
return this;
}
private boolean error_ ;
public boolean hasError() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getError() {
return error_;
}
public Builder setError(boolean value) {
b0_ |= 0x00000004;
error_ = value;
return this;
}
public Builder clearError() {
b0_ = (b0_ & ~0x00000004);
error_ = false;
return this;
}
}
static {
defaultInstance = new AckCommandQueueHeadCall(true);
defaultInstance.initFields();
}
}
public interface AckCommandQueueHeadReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasCommand();
Cmd.Command getCommand();
boolean hasQueueSize();
long getQueueSize();
}
public static final class AckCommandQueueHeadReply extends
GeneratedMessageLite implements
AckCommandQueueHeadReplyOrBuilder {
private AckCommandQueueHeadReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AckCommandQueueHeadReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AckCommandQueueHeadReply defaultInstance;
public static AckCommandQueueHeadReply getDefaultInstance() {
return defaultInstance;
}
public AckCommandQueueHeadReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AckCommandQueueHeadReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Cmd.Command.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = command_.toBuilder();
}
command_ = input.readMessage(Cmd.Command.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(command_);
command_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 16: {
b0_ |= 0x00000002;
queueSize_ = input.readInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AckCommandQueueHeadReply> PARSER =
new AbstractParser<AckCommandQueueHeadReply>() {
public AckCommandQueueHeadReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AckCommandQueueHeadReply(input, er);
}
};
@Override
public Parser<AckCommandQueueHeadReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int COMMAND_FIELD_NUMBER = 1;
private Cmd.Command command_;
public boolean hasCommand() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Cmd.Command getCommand() {
return command_;
}
public static final int QUEUE_SIZE_FIELD_NUMBER = 2;
private long queueSize_;
public boolean hasQueueSize() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getQueueSize() {
return queueSize_;
}
private void initFields() {
command_ = Cmd.Command.getDefaultInstance();
queueSize_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasQueueSize()) {
mii = 0;
return false;
}
if (hasCommand()) {
if (!getCommand().isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, command_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeInt64(2, queueSize_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, command_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeInt64Size(2, queueSize_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AckCommandQueueHeadReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AckCommandQueueHeadReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AckCommandQueueHeadReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AckCommandQueueHeadReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AckCommandQueueHeadReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AckCommandQueueHeadReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AckCommandQueueHeadReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AckCommandQueueHeadReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AckCommandQueueHeadReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AckCommandQueueHeadReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AckCommandQueueHeadReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AckCommandQueueHeadReply, Builder>
implements
Sp.AckCommandQueueHeadReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
command_ = Cmd.Command.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
queueSize_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AckCommandQueueHeadReply getDefaultInstanceForType() {
return Sp.AckCommandQueueHeadReply.getDefaultInstance();
}
public Sp.AckCommandQueueHeadReply build() {
Sp.AckCommandQueueHeadReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AckCommandQueueHeadReply buildPartial() {
Sp.AckCommandQueueHeadReply result = new Sp.AckCommandQueueHeadReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.command_ = command_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.queueSize_ = queueSize_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AckCommandQueueHeadReply other) {
if (other == Sp.AckCommandQueueHeadReply.getDefaultInstance()) return this;
if (other.hasCommand()) {
mergeCommand(other.getCommand());
}
if (other.hasQueueSize()) {
setQueueSize(other.getQueueSize());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasQueueSize()) {
return false;
}
if (hasCommand()) {
if (!getCommand().isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AckCommandQueueHeadReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AckCommandQueueHeadReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Cmd.Command command_ = Cmd.Command.getDefaultInstance();
public boolean hasCommand() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Cmd.Command getCommand() {
return command_;
}
public Builder setCommand(Cmd.Command value) {
if (value == null) {
throw new NullPointerException();
}
command_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setCommand(
Cmd.Command.Builder bdForValue) {
command_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeCommand(Cmd.Command value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
command_ != Cmd.Command.getDefaultInstance()) {
command_ =
Cmd.Command.newBuilder(command_).mergeFrom(value).buildPartial();
} else {
command_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearCommand() {
command_ = Cmd.Command.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private long queueSize_ ;
public boolean hasQueueSize() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getQueueSize() {
return queueSize_;
}
public Builder setQueueSize(long value) {
b0_ |= 0x00000002;
queueSize_ = value;
return this;
}
public Builder clearQueueSize() {
b0_ = (b0_ & ~0x00000002);
queueSize_ = 0L;
return this;
}
}
static {
defaultInstance = new AckCommandQueueHeadReply(true);
defaultInstance.initFields();
}
}
public interface RecertifyDeviceCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDeviceId();
ByteString getDeviceId();
boolean hasCsr();
ByteString getCsr();
}
public static final class RecertifyDeviceCall extends
GeneratedMessageLite implements
RecertifyDeviceCallOrBuilder {
private RecertifyDeviceCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RecertifyDeviceCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RecertifyDeviceCall defaultInstance;
public static RecertifyDeviceCall getDefaultInstance() {
return defaultInstance;
}
public RecertifyDeviceCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RecertifyDeviceCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
deviceId_ = input.readBytes();
break;
}
case 18: {
b0_ |= 0x00000002;
csr_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RecertifyDeviceCall> PARSER =
new AbstractParser<RecertifyDeviceCall>() {
public RecertifyDeviceCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RecertifyDeviceCall(input, er);
}
};
@Override
public Parser<RecertifyDeviceCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEVICE_ID_FIELD_NUMBER = 1;
private ByteString deviceId_;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public static final int CSR_FIELD_NUMBER = 2;
private ByteString csr_;
public boolean hasCsr() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCsr() {
return csr_;
}
private void initFields() {
deviceId_ = ByteString.EMPTY;
csr_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDeviceId()) {
mii = 0;
return false;
}
if (!hasCsr()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, csr_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, deviceId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, csr_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RecertifyDeviceCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RecertifyDeviceCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RecertifyDeviceCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RecertifyDeviceCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RecertifyDeviceCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RecertifyDeviceCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RecertifyDeviceCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RecertifyDeviceCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RecertifyDeviceCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RecertifyDeviceCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RecertifyDeviceCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RecertifyDeviceCall, Builder>
implements
Sp.RecertifyDeviceCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
deviceId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
csr_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RecertifyDeviceCall getDefaultInstanceForType() {
return Sp.RecertifyDeviceCall.getDefaultInstance();
}
public Sp.RecertifyDeviceCall build() {
Sp.RecertifyDeviceCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RecertifyDeviceCall buildPartial() {
Sp.RecertifyDeviceCall result = new Sp.RecertifyDeviceCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.deviceId_ = deviceId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.csr_ = csr_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RecertifyDeviceCall other) {
if (other == Sp.RecertifyDeviceCall.getDefaultInstance()) return this;
if (other.hasDeviceId()) {
setDeviceId(other.getDeviceId());
}
if (other.hasCsr()) {
setCsr(other.getCsr());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDeviceId()) {
return false;
}
if (!hasCsr()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RecertifyDeviceCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RecertifyDeviceCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString deviceId_ = ByteString.EMPTY;
public boolean hasDeviceId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getDeviceId() {
return deviceId_;
}
public Builder setDeviceId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
deviceId_ = value;
return this;
}
public Builder clearDeviceId() {
b0_ = (b0_ & ~0x00000001);
deviceId_ = getDefaultInstance().getDeviceId();
return this;
}
private ByteString csr_ = ByteString.EMPTY;
public boolean hasCsr() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCsr() {
return csr_;
}
public Builder setCsr(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
csr_ = value;
return this;
}
public Builder clearCsr() {
b0_ = (b0_ & ~0x00000002);
csr_ = getDefaultInstance().getCsr();
return this;
}
}
static {
defaultInstance = new RecertifyDeviceCall(true);
defaultInstance.initFields();
}
}
public interface RecertifyDeviceReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasCert();
String getCert();
ByteString
getCertBytes();
}
public static final class RecertifyDeviceReply extends
GeneratedMessageLite implements
RecertifyDeviceReplyOrBuilder {
private RecertifyDeviceReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RecertifyDeviceReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RecertifyDeviceReply defaultInstance;
public static RecertifyDeviceReply getDefaultInstance() {
return defaultInstance;
}
public RecertifyDeviceReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RecertifyDeviceReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
cert_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RecertifyDeviceReply> PARSER =
new AbstractParser<RecertifyDeviceReply>() {
public RecertifyDeviceReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RecertifyDeviceReply(input, er);
}
};
@Override
public Parser<RecertifyDeviceReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CERT_FIELD_NUMBER = 1;
private Object cert_;
public boolean hasCert() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCert() {
Object ref = cert_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
cert_ = s;
}
return s;
}
}
public ByteString
getCertBytes() {
Object ref = cert_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
cert_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
cert_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCert()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getCertBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getCertBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RecertifyDeviceReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RecertifyDeviceReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RecertifyDeviceReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RecertifyDeviceReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RecertifyDeviceReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RecertifyDeviceReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RecertifyDeviceReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RecertifyDeviceReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RecertifyDeviceReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RecertifyDeviceReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RecertifyDeviceReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RecertifyDeviceReply, Builder>
implements
Sp.RecertifyDeviceReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
cert_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RecertifyDeviceReply getDefaultInstanceForType() {
return Sp.RecertifyDeviceReply.getDefaultInstance();
}
public Sp.RecertifyDeviceReply build() {
Sp.RecertifyDeviceReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RecertifyDeviceReply buildPartial() {
Sp.RecertifyDeviceReply result = new Sp.RecertifyDeviceReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.cert_ = cert_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RecertifyDeviceReply other) {
if (other == Sp.RecertifyDeviceReply.getDefaultInstance()) return this;
if (other.hasCert()) {
b0_ |= 0x00000001;
cert_ = other.cert_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCert()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RecertifyDeviceReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RecertifyDeviceReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object cert_ = "";
public boolean hasCert() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCert() {
Object ref = cert_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
cert_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCertBytes() {
Object ref = cert_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
cert_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCert(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
cert_ = value;
return this;
}
public Builder clearCert() {
b0_ = (b0_ & ~0x00000001);
cert_ = getDefaultInstance().getCert();
return this;
}
public Builder setCertBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
cert_ = value;
return this;
}
}
static {
defaultInstance = new RecertifyDeviceReply(true);
defaultInstance.initFields();
}
}
public interface SignInDeviceCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasDid();
ByteString getDid();
}
public static final class SignInDeviceCall extends
GeneratedMessageLite implements
SignInDeviceCallOrBuilder {
private SignInDeviceCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SignInDeviceCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SignInDeviceCall defaultInstance;
public static SignInDeviceCall getDefaultInstance() {
return defaultInstance;
}
public SignInDeviceCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SignInDeviceCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
did_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SignInDeviceCall> PARSER =
new AbstractParser<SignInDeviceCall>() {
public SignInDeviceCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SignInDeviceCall(input, er);
}
};
@Override
public Parser<SignInDeviceCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DID_FIELD_NUMBER = 2;
private ByteString did_;
public boolean hasDid() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getDid() {
return did_;
}
private void initFields() {
userId_ = "";
did_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
if (!hasDid()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, did_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, did_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SignInDeviceCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInDeviceCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInDeviceCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInDeviceCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInDeviceCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInDeviceCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SignInDeviceCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SignInDeviceCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SignInDeviceCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInDeviceCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SignInDeviceCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SignInDeviceCall, Builder>
implements
Sp.SignInDeviceCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
did_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SignInDeviceCall getDefaultInstanceForType() {
return Sp.SignInDeviceCall.getDefaultInstance();
}
public Sp.SignInDeviceCall build() {
Sp.SignInDeviceCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SignInDeviceCall buildPartial() {
Sp.SignInDeviceCall result = new Sp.SignInDeviceCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.did_ = did_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SignInDeviceCall other) {
if (other == Sp.SignInDeviceCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasDid()) {
setDid(other.getDid());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
if (!hasDid()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SignInDeviceCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SignInDeviceCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private ByteString did_ = ByteString.EMPTY;
public boolean hasDid() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getDid() {
return did_;
}
public Builder setDid(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
did_ = value;
return this;
}
public Builder clearDid() {
b0_ = (b0_ & ~0x00000002);
did_ = getDefaultInstance().getDid();
return this;
}
}
static {
defaultInstance = new SignInDeviceCall(true);
defaultInstance.initFields();
}
}
public interface SignInUserCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasCredential();
ByteString getCredential();
}
public static final class SignInUserCall extends
GeneratedMessageLite implements
SignInUserCallOrBuilder {
private SignInUserCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SignInUserCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SignInUserCall defaultInstance;
public static SignInUserCall getDefaultInstance() {
return defaultInstance;
}
public SignInUserCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SignInUserCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
credential_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SignInUserCall> PARSER =
new AbstractParser<SignInUserCall>() {
public SignInUserCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SignInUserCall(input, er);
}
};
@Override
public Parser<SignInUserCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int CREDENTIAL_FIELD_NUMBER = 2;
private ByteString credential_;
public boolean hasCredential() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCredential() {
return credential_;
}
private void initFields() {
userId_ = "";
credential_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
if (!hasCredential()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, credential_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, credential_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SignInUserCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInUserCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInUserCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInUserCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInUserCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInUserCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SignInUserCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SignInUserCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SignInUserCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInUserCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SignInUserCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SignInUserCall, Builder>
implements
Sp.SignInUserCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
credential_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SignInUserCall getDefaultInstanceForType() {
return Sp.SignInUserCall.getDefaultInstance();
}
public Sp.SignInUserCall build() {
Sp.SignInUserCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SignInUserCall buildPartial() {
Sp.SignInUserCall result = new Sp.SignInUserCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.credential_ = credential_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SignInUserCall other) {
if (other == Sp.SignInUserCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasCredential()) {
setCredential(other.getCredential());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
if (!hasCredential()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SignInUserCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SignInUserCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private ByteString credential_ = ByteString.EMPTY;
public boolean hasCredential() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getCredential() {
return credential_;
}
public Builder setCredential(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
credential_ = value;
return this;
}
public Builder clearCredential() {
b0_ = (b0_ & ~0x00000002);
credential_ = getDefaultInstance().getCredential();
return this;
}
}
static {
defaultInstance = new SignInUserCall(true);
defaultInstance.initFields();
}
}
public interface SignInUserReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasNeedSecondFactor();
boolean getNeedSecondFactor();
boolean hasNeedSecondFactorSetup();
boolean getNeedSecondFactorSetup();
}
public static final class SignInUserReply extends
GeneratedMessageLite implements
SignInUserReplyOrBuilder {
private SignInUserReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SignInUserReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SignInUserReply defaultInstance;
public static SignInUserReply getDefaultInstance() {
return defaultInstance;
}
public SignInUserReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SignInUserReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
needSecondFactor_ = input.readBool();
break;
}
case 16: {
b0_ |= 0x00000002;
needSecondFactorSetup_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SignInUserReply> PARSER =
new AbstractParser<SignInUserReply>() {
public SignInUserReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SignInUserReply(input, er);
}
};
@Override
public Parser<SignInUserReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int NEED_SECOND_FACTOR_FIELD_NUMBER = 1;
private boolean needSecondFactor_;
public boolean hasNeedSecondFactor() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getNeedSecondFactor() {
return needSecondFactor_;
}
public static final int NEED_SECOND_FACTOR_SETUP_FIELD_NUMBER = 2;
private boolean needSecondFactorSetup_;
public boolean hasNeedSecondFactorSetup() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getNeedSecondFactorSetup() {
return needSecondFactorSetup_;
}
private void initFields() {
needSecondFactor_ = false;
needSecondFactorSetup_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBool(1, needSecondFactor_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, needSecondFactorSetup_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBoolSize(1, needSecondFactor_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, needSecondFactorSetup_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SignInUserReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInUserReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInUserReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SignInUserReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SignInUserReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInUserReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SignInUserReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SignInUserReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SignInUserReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SignInUserReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SignInUserReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SignInUserReply, Builder>
implements
Sp.SignInUserReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
needSecondFactor_ = false;
b0_ = (b0_ & ~0x00000001);
needSecondFactorSetup_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SignInUserReply getDefaultInstanceForType() {
return Sp.SignInUserReply.getDefaultInstance();
}
public Sp.SignInUserReply build() {
Sp.SignInUserReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SignInUserReply buildPartial() {
Sp.SignInUserReply result = new Sp.SignInUserReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.needSecondFactor_ = needSecondFactor_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.needSecondFactorSetup_ = needSecondFactorSetup_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SignInUserReply other) {
if (other == Sp.SignInUserReply.getDefaultInstance()) return this;
if (other.hasNeedSecondFactor()) {
setNeedSecondFactor(other.getNeedSecondFactor());
}
if (other.hasNeedSecondFactorSetup()) {
setNeedSecondFactorSetup(other.getNeedSecondFactorSetup());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SignInUserReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SignInUserReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private boolean needSecondFactor_ ;
public boolean hasNeedSecondFactor() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getNeedSecondFactor() {
return needSecondFactor_;
}
public Builder setNeedSecondFactor(boolean value) {
b0_ |= 0x00000001;
needSecondFactor_ = value;
return this;
}
public Builder clearNeedSecondFactor() {
b0_ = (b0_ & ~0x00000001);
needSecondFactor_ = false;
return this;
}
private boolean needSecondFactorSetup_ ;
public boolean hasNeedSecondFactorSetup() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getNeedSecondFactorSetup() {
return needSecondFactorSetup_;
}
public Builder setNeedSecondFactorSetup(boolean value) {
b0_ |= 0x00000002;
needSecondFactorSetup_ = value;
return this;
}
public Builder clearNeedSecondFactorSetup() {
b0_ = (b0_ & ~0x00000002);
needSecondFactorSetup_ = false;
return this;
}
}
static {
defaultInstance = new SignInUserReply(true);
defaultInstance.initFields();
}
}
public interface ExtAuthSessionNoncesOrBuilder extends
MessageLiteOrBuilder {
boolean hasSessionNonce();
String getSessionNonce();
ByteString
getSessionNonceBytes();
boolean hasDelegateNonce();
String getDelegateNonce();
ByteString
getDelegateNonceBytes();
}
public static final class ExtAuthSessionNonces extends
GeneratedMessageLite implements
ExtAuthSessionNoncesOrBuilder {
private ExtAuthSessionNonces(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ExtAuthSessionNonces(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ExtAuthSessionNonces defaultInstance;
public static ExtAuthSessionNonces getDefaultInstance() {
return defaultInstance;
}
public ExtAuthSessionNonces getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ExtAuthSessionNonces(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
sessionNonce_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
delegateNonce_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ExtAuthSessionNonces> PARSER =
new AbstractParser<ExtAuthSessionNonces>() {
public ExtAuthSessionNonces parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ExtAuthSessionNonces(input, er);
}
};
@Override
public Parser<ExtAuthSessionNonces> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SESSIONNONCE_FIELD_NUMBER = 1;
private Object sessionNonce_;
public boolean hasSessionNonce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSessionNonce() {
Object ref = sessionNonce_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
sessionNonce_ = s;
}
return s;
}
}
public ByteString
getSessionNonceBytes() {
Object ref = sessionNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
sessionNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DELEGATENONCE_FIELD_NUMBER = 2;
private Object delegateNonce_;
public boolean hasDelegateNonce() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDelegateNonce() {
Object ref = delegateNonce_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
delegateNonce_ = s;
}
return s;
}
}
public ByteString
getDelegateNonceBytes() {
Object ref = delegateNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
delegateNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
sessionNonce_ = "";
delegateNonce_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSessionNonce()) {
mii = 0;
return false;
}
if (!hasDelegateNonce()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getSessionNonceBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getDelegateNonceBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getSessionNonceBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getDelegateNonceBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ExtAuthSessionNonces parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionNonces parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionNonces parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionNonces parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionNonces parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionNonces parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ExtAuthSessionNonces parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ExtAuthSessionNonces parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ExtAuthSessionNonces parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionNonces parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ExtAuthSessionNonces prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ExtAuthSessionNonces, Builder>
implements
Sp.ExtAuthSessionNoncesOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sessionNonce_ = "";
b0_ = (b0_ & ~0x00000001);
delegateNonce_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ExtAuthSessionNonces getDefaultInstanceForType() {
return Sp.ExtAuthSessionNonces.getDefaultInstance();
}
public Sp.ExtAuthSessionNonces build() {
Sp.ExtAuthSessionNonces result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ExtAuthSessionNonces buildPartial() {
Sp.ExtAuthSessionNonces result = new Sp.ExtAuthSessionNonces(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sessionNonce_ = sessionNonce_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.delegateNonce_ = delegateNonce_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ExtAuthSessionNonces other) {
if (other == Sp.ExtAuthSessionNonces.getDefaultInstance()) return this;
if (other.hasSessionNonce()) {
b0_ |= 0x00000001;
sessionNonce_ = other.sessionNonce_;
}
if (other.hasDelegateNonce()) {
b0_ |= 0x00000002;
delegateNonce_ = other.delegateNonce_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSessionNonce()) {
return false;
}
if (!hasDelegateNonce()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ExtAuthSessionNonces pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ExtAuthSessionNonces) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object sessionNonce_ = "";
public boolean hasSessionNonce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSessionNonce() {
Object ref = sessionNonce_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
sessionNonce_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSessionNonceBytes() {
Object ref = sessionNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
sessionNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSessionNonce(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sessionNonce_ = value;
return this;
}
public Builder clearSessionNonce() {
b0_ = (b0_ & ~0x00000001);
sessionNonce_ = getDefaultInstance().getSessionNonce();
return this;
}
public Builder setSessionNonceBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sessionNonce_ = value;
return this;
}
private Object delegateNonce_ = "";
public boolean hasDelegateNonce() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDelegateNonce() {
Object ref = delegateNonce_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
delegateNonce_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDelegateNonceBytes() {
Object ref = delegateNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
delegateNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDelegateNonce(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
delegateNonce_ = value;
return this;
}
public Builder clearDelegateNonce() {
b0_ = (b0_ & ~0x00000002);
delegateNonce_ = getDefaultInstance().getDelegateNonce();
return this;
}
public Builder setDelegateNonceBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
delegateNonce_ = value;
return this;
}
}
static {
defaultInstance = new ExtAuthSessionNonces(true);
defaultInstance.initFields();
}
}
public interface ExtAuthSessionQueryOrBuilder extends
MessageLiteOrBuilder {
boolean hasSessionNonce();
String getSessionNonce();
ByteString
getSessionNonceBytes();
}
public static final class ExtAuthSessionQuery extends
GeneratedMessageLite implements
ExtAuthSessionQueryOrBuilder {
private ExtAuthSessionQuery(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ExtAuthSessionQuery(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ExtAuthSessionQuery defaultInstance;
public static ExtAuthSessionQuery getDefaultInstance() {
return defaultInstance;
}
public ExtAuthSessionQuery getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ExtAuthSessionQuery(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
sessionNonce_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ExtAuthSessionQuery> PARSER =
new AbstractParser<ExtAuthSessionQuery>() {
public ExtAuthSessionQuery parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ExtAuthSessionQuery(input, er);
}
};
@Override
public Parser<ExtAuthSessionQuery> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SESSIONNONCE_FIELD_NUMBER = 1;
private Object sessionNonce_;
public boolean hasSessionNonce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSessionNonce() {
Object ref = sessionNonce_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
sessionNonce_ = s;
}
return s;
}
}
public ByteString
getSessionNonceBytes() {
Object ref = sessionNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
sessionNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
sessionNonce_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSessionNonce()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getSessionNonceBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getSessionNonceBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ExtAuthSessionQuery parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionQuery parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionQuery parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionQuery parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionQuery parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionQuery parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ExtAuthSessionQuery parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ExtAuthSessionQuery parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ExtAuthSessionQuery parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionQuery parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ExtAuthSessionQuery prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ExtAuthSessionQuery, Builder>
implements
Sp.ExtAuthSessionQueryOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sessionNonce_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ExtAuthSessionQuery getDefaultInstanceForType() {
return Sp.ExtAuthSessionQuery.getDefaultInstance();
}
public Sp.ExtAuthSessionQuery build() {
Sp.ExtAuthSessionQuery result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ExtAuthSessionQuery buildPartial() {
Sp.ExtAuthSessionQuery result = new Sp.ExtAuthSessionQuery(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sessionNonce_ = sessionNonce_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ExtAuthSessionQuery other) {
if (other == Sp.ExtAuthSessionQuery.getDefaultInstance()) return this;
if (other.hasSessionNonce()) {
b0_ |= 0x00000001;
sessionNonce_ = other.sessionNonce_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSessionNonce()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ExtAuthSessionQuery pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ExtAuthSessionQuery) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object sessionNonce_ = "";
public boolean hasSessionNonce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSessionNonce() {
Object ref = sessionNonce_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
sessionNonce_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSessionNonceBytes() {
Object ref = sessionNonce_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
sessionNonce_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSessionNonce(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sessionNonce_ = value;
return this;
}
public Builder clearSessionNonce() {
b0_ = (b0_ & ~0x00000001);
sessionNonce_ = getDefaultInstance().getSessionNonce();
return this;
}
public Builder setSessionNonceBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sessionNonce_ = value;
return this;
}
}
static {
defaultInstance = new ExtAuthSessionQuery(true);
defaultInstance.initFields();
}
}
public interface ExtAuthSessionAttributesOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasFirstName();
String getFirstName();
ByteString
getFirstNameBytes();
boolean hasLastName();
String getLastName();
ByteString
getLastNameBytes();
boolean hasNeedSecondFactor();
boolean getNeedSecondFactor();
boolean hasNeedSecondFactorSetup();
boolean getNeedSecondFactorSetup();
}
public static final class ExtAuthSessionAttributes extends
GeneratedMessageLite implements
ExtAuthSessionAttributesOrBuilder {
private ExtAuthSessionAttributes(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ExtAuthSessionAttributes(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ExtAuthSessionAttributes defaultInstance;
public static ExtAuthSessionAttributes getDefaultInstance() {
return defaultInstance;
}
public ExtAuthSessionAttributes getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ExtAuthSessionAttributes(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
firstName_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
lastName_ = bs;
break;
}
case 32: {
b0_ |= 0x00000008;
needSecondFactor_ = input.readBool();
break;
}
case 40: {
b0_ |= 0x00000010;
needSecondFactorSetup_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ExtAuthSessionAttributes> PARSER =
new AbstractParser<ExtAuthSessionAttributes>() {
public ExtAuthSessionAttributes parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ExtAuthSessionAttributes(input, er);
}
};
@Override
public Parser<ExtAuthSessionAttributes> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USERID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int FIRSTNAME_FIELD_NUMBER = 2;
private Object firstName_;
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int LASTNAME_FIELD_NUMBER = 3;
private Object lastName_;
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int NEED_SECOND_FACTOR_FIELD_NUMBER = 4;
private boolean needSecondFactor_;
public boolean hasNeedSecondFactor() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getNeedSecondFactor() {
return needSecondFactor_;
}
public static final int NEED_SECOND_FACTOR_SETUP_FIELD_NUMBER = 5;
private boolean needSecondFactorSetup_;
public boolean hasNeedSecondFactorSetup() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getNeedSecondFactorSetup() {
return needSecondFactorSetup_;
}
private void initFields() {
userId_ = "";
firstName_ = "";
lastName_ = "";
needSecondFactor_ = false;
needSecondFactorSetup_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBool(4, needSecondFactor_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeBool(5, needSecondFactorSetup_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getFirstNameBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getLastNameBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBoolSize(4, needSecondFactor_);
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeBoolSize(5, needSecondFactorSetup_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ExtAuthSessionAttributes parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionAttributes parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionAttributes parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ExtAuthSessionAttributes parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ExtAuthSessionAttributes parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionAttributes parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ExtAuthSessionAttributes parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ExtAuthSessionAttributes parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ExtAuthSessionAttributes parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ExtAuthSessionAttributes parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ExtAuthSessionAttributes prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ExtAuthSessionAttributes, Builder>
implements
Sp.ExtAuthSessionAttributesOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
firstName_ = "";
b0_ = (b0_ & ~0x00000002);
lastName_ = "";
b0_ = (b0_ & ~0x00000004);
needSecondFactor_ = false;
b0_ = (b0_ & ~0x00000008);
needSecondFactorSetup_ = false;
b0_ = (b0_ & ~0x00000010);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ExtAuthSessionAttributes getDefaultInstanceForType() {
return Sp.ExtAuthSessionAttributes.getDefaultInstance();
}
public Sp.ExtAuthSessionAttributes build() {
Sp.ExtAuthSessionAttributes result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ExtAuthSessionAttributes buildPartial() {
Sp.ExtAuthSessionAttributes result = new Sp.ExtAuthSessionAttributes(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.firstName_ = firstName_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.lastName_ = lastName_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.needSecondFactor_ = needSecondFactor_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.needSecondFactorSetup_ = needSecondFactorSetup_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ExtAuthSessionAttributes other) {
if (other == Sp.ExtAuthSessionAttributes.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasFirstName()) {
b0_ |= 0x00000002;
firstName_ = other.firstName_;
}
if (other.hasLastName()) {
b0_ |= 0x00000004;
lastName_ = other.lastName_;
}
if (other.hasNeedSecondFactor()) {
setNeedSecondFactor(other.getNeedSecondFactor());
}
if (other.hasNeedSecondFactorSetup()) {
setNeedSecondFactorSetup(other.getNeedSecondFactorSetup());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ExtAuthSessionAttributes pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ExtAuthSessionAttributes) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private Object firstName_ = "";
public boolean hasFirstName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getFirstName() {
Object ref = firstName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
firstName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getFirstNameBytes() {
Object ref = firstName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
firstName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setFirstName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
public Builder clearFirstName() {
b0_ = (b0_ & ~0x00000002);
firstName_ = getDefaultInstance().getFirstName();
return this;
}
public Builder setFirstNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
firstName_ = value;
return this;
}
private Object lastName_ = "";
public boolean hasLastName() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getLastName() {
Object ref = lastName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
lastName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getLastNameBytes() {
Object ref = lastName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
lastName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setLastName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
public Builder clearLastName() {
b0_ = (b0_ & ~0x00000004);
lastName_ = getDefaultInstance().getLastName();
return this;
}
public Builder setLastNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
lastName_ = value;
return this;
}
private boolean needSecondFactor_ ;
public boolean hasNeedSecondFactor() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public boolean getNeedSecondFactor() {
return needSecondFactor_;
}
public Builder setNeedSecondFactor(boolean value) {
b0_ |= 0x00000008;
needSecondFactor_ = value;
return this;
}
public Builder clearNeedSecondFactor() {
b0_ = (b0_ & ~0x00000008);
needSecondFactor_ = false;
return this;
}
private boolean needSecondFactorSetup_ ;
public boolean hasNeedSecondFactorSetup() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public boolean getNeedSecondFactorSetup() {
return needSecondFactorSetup_;
}
public Builder setNeedSecondFactorSetup(boolean value) {
b0_ |= 0x00000010;
needSecondFactorSetup_ = value;
return this;
}
public Builder clearNeedSecondFactorSetup() {
b0_ = (b0_ & ~0x00000010);
needSecondFactorSetup_ = false;
return this;
}
}
static {
defaultInstance = new ExtAuthSessionAttributes(true);
defaultInstance.initFields();
}
}
public interface MobileAccessCodeOrBuilder extends
MessageLiteOrBuilder {
boolean hasAccessCode();
String getAccessCode();
ByteString
getAccessCodeBytes();
}
public static final class MobileAccessCode extends
GeneratedMessageLite implements
MobileAccessCodeOrBuilder {
private MobileAccessCode(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private MobileAccessCode(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final MobileAccessCode defaultInstance;
public static MobileAccessCode getDefaultInstance() {
return defaultInstance;
}
public MobileAccessCode getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private MobileAccessCode(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
accessCode_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<MobileAccessCode> PARSER =
new AbstractParser<MobileAccessCode>() {
public MobileAccessCode parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new MobileAccessCode(input, er);
}
};
@Override
public Parser<MobileAccessCode> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ACCESSCODE_FIELD_NUMBER = 1;
private Object accessCode_;
public boolean hasAccessCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getAccessCode() {
Object ref = accessCode_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
accessCode_ = s;
}
return s;
}
}
public ByteString
getAccessCodeBytes() {
Object ref = accessCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
accessCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
accessCode_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getAccessCodeBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getAccessCodeBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.MobileAccessCode parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.MobileAccessCode parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.MobileAccessCode parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.MobileAccessCode parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.MobileAccessCode parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.MobileAccessCode parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.MobileAccessCode parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.MobileAccessCode parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.MobileAccessCode parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.MobileAccessCode parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.MobileAccessCode prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.MobileAccessCode, Builder>
implements
Sp.MobileAccessCodeOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
accessCode_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.MobileAccessCode getDefaultInstanceForType() {
return Sp.MobileAccessCode.getDefaultInstance();
}
public Sp.MobileAccessCode build() {
Sp.MobileAccessCode result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.MobileAccessCode buildPartial() {
Sp.MobileAccessCode result = new Sp.MobileAccessCode(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.accessCode_ = accessCode_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.MobileAccessCode other) {
if (other == Sp.MobileAccessCode.getDefaultInstance()) return this;
if (other.hasAccessCode()) {
b0_ |= 0x00000001;
accessCode_ = other.accessCode_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.MobileAccessCode pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.MobileAccessCode) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object accessCode_ = "";
public boolean hasAccessCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getAccessCode() {
Object ref = accessCode_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
accessCode_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getAccessCodeBytes() {
Object ref = accessCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
accessCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setAccessCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
accessCode_ = value;
return this;
}
public Builder clearAccessCode() {
b0_ = (b0_ & ~0x00000001);
accessCode_ = getDefaultInstance().getAccessCode();
return this;
}
public Builder setAccessCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
accessCode_ = value;
return this;
}
}
static {
defaultInstance = new MobileAccessCode(true);
defaultInstance.initFields();
}
}
public interface AuthorizeAPIClientCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasAccessCode();
String getAccessCode();
ByteString
getAccessCodeBytes();
boolean hasDeviceName();
String getDeviceName();
ByteString
getDeviceNameBytes();
}
public static final class AuthorizeAPIClientCall extends
GeneratedMessageLite implements
AuthorizeAPIClientCallOrBuilder {
private AuthorizeAPIClientCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AuthorizeAPIClientCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AuthorizeAPIClientCall defaultInstance;
public static AuthorizeAPIClientCall getDefaultInstance() {
return defaultInstance;
}
public AuthorizeAPIClientCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AuthorizeAPIClientCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
accessCode_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
deviceName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AuthorizeAPIClientCall> PARSER =
new AbstractParser<AuthorizeAPIClientCall>() {
public AuthorizeAPIClientCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AuthorizeAPIClientCall(input, er);
}
};
@Override
public Parser<AuthorizeAPIClientCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ACCESSCODE_FIELD_NUMBER = 1;
private Object accessCode_;
public boolean hasAccessCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getAccessCode() {
Object ref = accessCode_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
accessCode_ = s;
}
return s;
}
}
public ByteString
getAccessCodeBytes() {
Object ref = accessCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
accessCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DEVICENAME_FIELD_NUMBER = 2;
private Object deviceName_;
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
accessCode_ = "";
deviceName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getAccessCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getDeviceNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getAccessCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getDeviceNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AuthorizeAPIClientCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AuthorizeAPIClientCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AuthorizeAPIClientCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AuthorizeAPIClientCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AuthorizeAPIClientCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AuthorizeAPIClientCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AuthorizeAPIClientCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AuthorizeAPIClientCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AuthorizeAPIClientCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AuthorizeAPIClientCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AuthorizeAPIClientCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AuthorizeAPIClientCall, Builder>
implements
Sp.AuthorizeAPIClientCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
accessCode_ = "";
b0_ = (b0_ & ~0x00000001);
deviceName_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AuthorizeAPIClientCall getDefaultInstanceForType() {
return Sp.AuthorizeAPIClientCall.getDefaultInstance();
}
public Sp.AuthorizeAPIClientCall build() {
Sp.AuthorizeAPIClientCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AuthorizeAPIClientCall buildPartial() {
Sp.AuthorizeAPIClientCall result = new Sp.AuthorizeAPIClientCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.accessCode_ = accessCode_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.deviceName_ = deviceName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AuthorizeAPIClientCall other) {
if (other == Sp.AuthorizeAPIClientCall.getDefaultInstance()) return this;
if (other.hasAccessCode()) {
b0_ |= 0x00000001;
accessCode_ = other.accessCode_;
}
if (other.hasDeviceName()) {
b0_ |= 0x00000002;
deviceName_ = other.deviceName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AuthorizeAPIClientCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AuthorizeAPIClientCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object accessCode_ = "";
public boolean hasAccessCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getAccessCode() {
Object ref = accessCode_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
accessCode_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getAccessCodeBytes() {
Object ref = accessCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
accessCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setAccessCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
accessCode_ = value;
return this;
}
public Builder clearAccessCode() {
b0_ = (b0_ & ~0x00000001);
accessCode_ = getDefaultInstance().getAccessCode();
return this;
}
public Builder setAccessCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
accessCode_ = value;
return this;
}
private Object deviceName_ = "";
public boolean hasDeviceName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getDeviceName() {
Object ref = deviceName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
deviceName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDeviceNameBytes() {
Object ref = deviceName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
deviceName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDeviceName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
public Builder clearDeviceName() {
b0_ = (b0_ & ~0x00000002);
deviceName_ = getDefaultInstance().getDeviceName();
return this;
}
public Builder setDeviceNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
deviceName_ = value;
return this;
}
}
static {
defaultInstance = new AuthorizeAPIClientCall(true);
defaultInstance.initFields();
}
}
public interface AuthorizeAPIClientReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasOrgId();
String getOrgId();
ByteString
getOrgIdBytes();
boolean hasIsOrgAdmin();
boolean getIsOrgAdmin();
}
public static final class AuthorizeAPIClientReply extends
GeneratedMessageLite implements
AuthorizeAPIClientReplyOrBuilder {
private AuthorizeAPIClientReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AuthorizeAPIClientReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AuthorizeAPIClientReply defaultInstance;
public static AuthorizeAPIClientReply getDefaultInstance() {
return defaultInstance;
}
public AuthorizeAPIClientReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AuthorizeAPIClientReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
orgId_ = bs;
break;
}
case 24: {
b0_ |= 0x00000004;
isOrgAdmin_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AuthorizeAPIClientReply> PARSER =
new AbstractParser<AuthorizeAPIClientReply>() {
public AuthorizeAPIClientReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AuthorizeAPIClientReply(input, er);
}
};
@Override
public Parser<AuthorizeAPIClientReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USERID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ORGID_FIELD_NUMBER = 2;
private Object orgId_;
public boolean hasOrgId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrgId() {
Object ref = orgId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ISORGADMIN_FIELD_NUMBER = 3;
private boolean isOrgAdmin_;
public boolean hasIsOrgAdmin() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getIsOrgAdmin() {
return isOrgAdmin_;
}
private void initFields() {
userId_ = "";
orgId_ = "";
isOrgAdmin_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getOrgIdBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBool(3, isOrgAdmin_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getOrgIdBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBoolSize(3, isOrgAdmin_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AuthorizeAPIClientReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AuthorizeAPIClientReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AuthorizeAPIClientReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AuthorizeAPIClientReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AuthorizeAPIClientReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AuthorizeAPIClientReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AuthorizeAPIClientReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AuthorizeAPIClientReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AuthorizeAPIClientReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AuthorizeAPIClientReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AuthorizeAPIClientReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AuthorizeAPIClientReply, Builder>
implements
Sp.AuthorizeAPIClientReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
orgId_ = "";
b0_ = (b0_ & ~0x00000002);
isOrgAdmin_ = false;
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AuthorizeAPIClientReply getDefaultInstanceForType() {
return Sp.AuthorizeAPIClientReply.getDefaultInstance();
}
public Sp.AuthorizeAPIClientReply build() {
Sp.AuthorizeAPIClientReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AuthorizeAPIClientReply buildPartial() {
Sp.AuthorizeAPIClientReply result = new Sp.AuthorizeAPIClientReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.orgId_ = orgId_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.isOrgAdmin_ = isOrgAdmin_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AuthorizeAPIClientReply other) {
if (other == Sp.AuthorizeAPIClientReply.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasOrgId()) {
b0_ |= 0x00000002;
orgId_ = other.orgId_;
}
if (other.hasIsOrgAdmin()) {
setIsOrgAdmin(other.getIsOrgAdmin());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AuthorizeAPIClientReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AuthorizeAPIClientReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private Object orgId_ = "";
public boolean hasOrgId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getOrgId() {
Object ref = orgId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
orgId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getOrgIdBytes() {
Object ref = orgId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
orgId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setOrgId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
orgId_ = value;
return this;
}
public Builder clearOrgId() {
b0_ = (b0_ & ~0x00000002);
orgId_ = getDefaultInstance().getOrgId();
return this;
}
public Builder setOrgIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
orgId_ = value;
return this;
}
private boolean isOrgAdmin_ ;
public boolean hasIsOrgAdmin() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public boolean getIsOrgAdmin() {
return isOrgAdmin_;
}
public Builder setIsOrgAdmin(boolean value) {
b0_ |= 0x00000004;
isOrgAdmin_ = value;
return this;
}
public Builder clearIsOrgAdmin() {
b0_ = (b0_ & ~0x00000004);
isOrgAdmin_ = false;
return this;
}
}
static {
defaultInstance = new AuthorizeAPIClientReply(true);
defaultInstance.initFields();
}
}
public interface ListSharedFoldersCallOrBuilder extends
MessageLiteOrBuilder {
List<ByteString> getStoreIdList();
int getStoreIdCount();
ByteString getStoreId(int index);
}
public static final class ListSharedFoldersCall extends
GeneratedMessageLite implements
ListSharedFoldersCallOrBuilder {
private ListSharedFoldersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListSharedFoldersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListSharedFoldersCall defaultInstance;
public static ListSharedFoldersCall getDefaultInstance() {
return defaultInstance;
}
public ListSharedFoldersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListSharedFoldersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
storeId_ = new ArrayList<ByteString>();
mutable_b0_ |= 0x00000001;
}
storeId_.add(input.readBytes());
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
storeId_ = Collections.unmodifiableList(storeId_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListSharedFoldersCall> PARSER =
new AbstractParser<ListSharedFoldersCall>() {
public ListSharedFoldersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListSharedFoldersCall(input, er);
}
};
@Override
public Parser<ListSharedFoldersCall> getParserForType() {
return PARSER;
}
public static final int STORE_ID_FIELD_NUMBER = 1;
private List<ByteString> storeId_;
public List<ByteString>
getStoreIdList() {
return storeId_;
}
public int getStoreIdCount() {
return storeId_.size();
}
public ByteString getStoreId(int index) {
return storeId_.get(index);
}
private void initFields() {
storeId_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < storeId_.size(); i++) {
output.writeBytes(1, storeId_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
{
int dataSize = 0;
for (int i = 0; i < storeId_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(storeId_.get(i));
}
size += dataSize;
size += 1 * getStoreIdList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListSharedFoldersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListSharedFoldersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListSharedFoldersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListSharedFoldersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListSharedFoldersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListSharedFoldersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListSharedFoldersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListSharedFoldersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListSharedFoldersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListSharedFoldersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListSharedFoldersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListSharedFoldersCall, Builder>
implements
Sp.ListSharedFoldersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
storeId_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListSharedFoldersCall getDefaultInstanceForType() {
return Sp.ListSharedFoldersCall.getDefaultInstance();
}
public Sp.ListSharedFoldersCall build() {
Sp.ListSharedFoldersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListSharedFoldersCall buildPartial() {
Sp.ListSharedFoldersCall result = new Sp.ListSharedFoldersCall(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
storeId_ = Collections.unmodifiableList(storeId_);
b0_ = (b0_ & ~0x00000001);
}
result.storeId_ = storeId_;
return result;
}
public Builder mergeFrom(Sp.ListSharedFoldersCall other) {
if (other == Sp.ListSharedFoldersCall.getDefaultInstance()) return this;
if (!other.storeId_.isEmpty()) {
if (storeId_.isEmpty()) {
storeId_ = other.storeId_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureStoreIdIsMutable();
storeId_.addAll(other.storeId_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListSharedFoldersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListSharedFoldersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<ByteString> storeId_ = Collections.emptyList();
private void ensureStoreIdIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
storeId_ = new ArrayList<ByteString>(storeId_);
b0_ |= 0x00000001;
}
}
public List<ByteString>
getStoreIdList() {
return Collections.unmodifiableList(storeId_);
}
public int getStoreIdCount() {
return storeId_.size();
}
public ByteString getStoreId(int index) {
return storeId_.get(index);
}
public Builder setStoreId(
int index, ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIdIsMutable();
storeId_.set(index, value);
return this;
}
public Builder addStoreId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIdIsMutable();
storeId_.add(value);
return this;
}
public Builder addAllStoreId(
Iterable<? extends ByteString> values) {
ensureStoreIdIsMutable();
AbstractMessageLite.Builder.addAll(
values, storeId_);
return this;
}
public Builder clearStoreId() {
storeId_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
}
static {
defaultInstance = new ListSharedFoldersCall(true);
defaultInstance.initFields();
}
}
public interface ListSharedFoldersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBSharedFolder> 
getSharedFolderList();
Sp.PBSharedFolder getSharedFolder(int index);
int getSharedFolderCount();
boolean hasTotalCount();
int getTotalCount();
}
public static final class ListSharedFoldersReply extends
GeneratedMessageLite implements
ListSharedFoldersReplyOrBuilder {
private ListSharedFoldersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListSharedFoldersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListSharedFoldersReply defaultInstance;
public static ListSharedFoldersReply getDefaultInstance() {
return defaultInstance;
}
public ListSharedFoldersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListSharedFoldersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = new ArrayList<Sp.PBSharedFolder>();
mutable_b0_ |= 0x00000001;
}
sharedFolder_.add(input.readMessage(Sp.PBSharedFolder.PARSER, er));
break;
}
case 16: {
b0_ |= 0x00000001;
totalCount_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = Collections.unmodifiableList(sharedFolder_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListSharedFoldersReply> PARSER =
new AbstractParser<ListSharedFoldersReply>() {
public ListSharedFoldersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListSharedFoldersReply(input, er);
}
};
@Override
public Parser<ListSharedFoldersReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_FOLDER_FIELD_NUMBER = 1;
private List<Sp.PBSharedFolder> sharedFolder_;
public List<Sp.PBSharedFolder> getSharedFolderList() {
return sharedFolder_;
}
public List<? extends Sp.PBSharedFolderOrBuilder> 
getSharedFolderOrBuilderList() {
return sharedFolder_;
}
public int getSharedFolderCount() {
return sharedFolder_.size();
}
public Sp.PBSharedFolder getSharedFolder(int index) {
return sharedFolder_.get(index);
}
public Sp.PBSharedFolderOrBuilder getSharedFolderOrBuilder(
int index) {
return sharedFolder_.get(index);
}
public static final int TOTAL_COUNT_FIELD_NUMBER = 2;
private int totalCount_;
public boolean hasTotalCount() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getTotalCount() {
return totalCount_;
}
private void initFields() {
sharedFolder_ = Collections.emptyList();
totalCount_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getSharedFolderCount(); i++) {
if (!getSharedFolder(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < sharedFolder_.size(); i++) {
output.writeMessage(1, sharedFolder_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(2, totalCount_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < sharedFolder_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, sharedFolder_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(2, totalCount_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListSharedFoldersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListSharedFoldersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListSharedFoldersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListSharedFoldersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListSharedFoldersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListSharedFoldersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListSharedFoldersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListSharedFoldersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListSharedFoldersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListSharedFoldersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListSharedFoldersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListSharedFoldersReply, Builder>
implements
Sp.ListSharedFoldersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedFolder_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
totalCount_ = 0;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListSharedFoldersReply getDefaultInstanceForType() {
return Sp.ListSharedFoldersReply.getDefaultInstance();
}
public Sp.ListSharedFoldersReply build() {
Sp.ListSharedFoldersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListSharedFoldersReply buildPartial() {
Sp.ListSharedFoldersReply result = new Sp.ListSharedFoldersReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = Collections.unmodifiableList(sharedFolder_);
b0_ = (b0_ & ~0x00000001);
}
result.sharedFolder_ = sharedFolder_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000001;
}
result.totalCount_ = totalCount_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListSharedFoldersReply other) {
if (other == Sp.ListSharedFoldersReply.getDefaultInstance()) return this;
if (!other.sharedFolder_.isEmpty()) {
if (sharedFolder_.isEmpty()) {
sharedFolder_ = other.sharedFolder_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureSharedFolderIsMutable();
sharedFolder_.addAll(other.sharedFolder_);
}
}
if (other.hasTotalCount()) {
setTotalCount(other.getTotalCount());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getSharedFolderCount(); i++) {
if (!getSharedFolder(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListSharedFoldersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListSharedFoldersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBSharedFolder> sharedFolder_ =
Collections.emptyList();
private void ensureSharedFolderIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
sharedFolder_ = new ArrayList<Sp.PBSharedFolder>(sharedFolder_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBSharedFolder> getSharedFolderList() {
return Collections.unmodifiableList(sharedFolder_);
}
public int getSharedFolderCount() {
return sharedFolder_.size();
}
public Sp.PBSharedFolder getSharedFolder(int index) {
return sharedFolder_.get(index);
}
public Builder setSharedFolder(
int index, Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.set(index, value);
return this;
}
public Builder setSharedFolder(
int index, Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.set(index, bdForValue.build());
return this;
}
public Builder addSharedFolder(Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.add(value);
return this;
}
public Builder addSharedFolder(
int index, Sp.PBSharedFolder value) {
if (value == null) {
throw new NullPointerException();
}
ensureSharedFolderIsMutable();
sharedFolder_.add(index, value);
return this;
}
public Builder addSharedFolder(
Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.add(bdForValue.build());
return this;
}
public Builder addSharedFolder(
int index, Sp.PBSharedFolder.Builder bdForValue) {
ensureSharedFolderIsMutable();
sharedFolder_.add(index, bdForValue.build());
return this;
}
public Builder addAllSharedFolder(
Iterable<? extends Sp.PBSharedFolder> values) {
ensureSharedFolderIsMutable();
AbstractMessageLite.Builder.addAll(
values, sharedFolder_);
return this;
}
public Builder clearSharedFolder() {
sharedFolder_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeSharedFolder(int index) {
ensureSharedFolderIsMutable();
sharedFolder_.remove(index);
return this;
}
private int totalCount_ ;
public boolean hasTotalCount() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getTotalCount() {
return totalCount_;
}
public Builder setTotalCount(int value) {
b0_ |= 0x00000002;
totalCount_ = value;
return this;
}
public Builder clearTotalCount() {
b0_ = (b0_ & ~0x00000002);
totalCount_ = 0;
return this;
}
}
static {
defaultInstance = new ListSharedFoldersReply(true);
defaultInstance.initFields();
}
}
public interface DeactivateUserCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
boolean hasEraseDevices();
boolean getEraseDevices();
}
public static final class DeactivateUserCall extends
GeneratedMessageLite implements
DeactivateUserCallOrBuilder {
private DeactivateUserCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DeactivateUserCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DeactivateUserCall defaultInstance;
public static DeactivateUserCall getDefaultInstance() {
return defaultInstance;
}
public DeactivateUserCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DeactivateUserCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
eraseDevices_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DeactivateUserCall> PARSER =
new AbstractParser<DeactivateUserCall>() {
public DeactivateUserCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DeactivateUserCall(input, er);
}
};
@Override
public Parser<DeactivateUserCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int ERASE_DEVICES_FIELD_NUMBER = 2;
private boolean eraseDevices_;
public boolean hasEraseDevices() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getEraseDevices() {
return eraseDevices_;
}
private void initFields() {
userId_ = "";
eraseDevices_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
if (!hasEraseDevices()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, eraseDevices_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, eraseDevices_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DeactivateUserCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeactivateUserCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeactivateUserCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeactivateUserCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeactivateUserCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeactivateUserCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DeactivateUserCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DeactivateUserCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DeactivateUserCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeactivateUserCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DeactivateUserCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DeactivateUserCall, Builder>
implements
Sp.DeactivateUserCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
eraseDevices_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DeactivateUserCall getDefaultInstanceForType() {
return Sp.DeactivateUserCall.getDefaultInstance();
}
public Sp.DeactivateUserCall build() {
Sp.DeactivateUserCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DeactivateUserCall buildPartial() {
Sp.DeactivateUserCall result = new Sp.DeactivateUserCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.eraseDevices_ = eraseDevices_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DeactivateUserCall other) {
if (other == Sp.DeactivateUserCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
if (other.hasEraseDevices()) {
setEraseDevices(other.getEraseDevices());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
if (!hasEraseDevices()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DeactivateUserCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DeactivateUserCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
private boolean eraseDevices_ ;
public boolean hasEraseDevices() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getEraseDevices() {
return eraseDevices_;
}
public Builder setEraseDevices(boolean value) {
b0_ |= 0x00000002;
eraseDevices_ = value;
return this;
}
public Builder clearEraseDevices() {
b0_ = (b0_ & ~0x00000002);
eraseDevices_ = false;
return this;
}
}
static {
defaultInstance = new DeactivateUserCall(true);
defaultInstance.initFields();
}
}
public interface AddUserToWhitelistCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserEmail();
String getUserEmail();
ByteString
getUserEmailBytes();
}
public static final class AddUserToWhitelistCall extends
GeneratedMessageLite implements
AddUserToWhitelistCallOrBuilder {
private AddUserToWhitelistCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AddUserToWhitelistCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AddUserToWhitelistCall defaultInstance;
public static AddUserToWhitelistCall getDefaultInstance() {
return defaultInstance;
}
public AddUserToWhitelistCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AddUserToWhitelistCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userEmail_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AddUserToWhitelistCall> PARSER =
new AbstractParser<AddUserToWhitelistCall>() {
public AddUserToWhitelistCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AddUserToWhitelistCall(input, er);
}
};
@Override
public Parser<AddUserToWhitelistCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_EMAIL_FIELD_NUMBER = 1;
private Object userEmail_;
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userEmail_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserEmail()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserEmailBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserEmailBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AddUserToWhitelistCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AddUserToWhitelistCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AddUserToWhitelistCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AddUserToWhitelistCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AddUserToWhitelistCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AddUserToWhitelistCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AddUserToWhitelistCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AddUserToWhitelistCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AddUserToWhitelistCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AddUserToWhitelistCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AddUserToWhitelistCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AddUserToWhitelistCall, Builder>
implements
Sp.AddUserToWhitelistCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userEmail_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AddUserToWhitelistCall getDefaultInstanceForType() {
return Sp.AddUserToWhitelistCall.getDefaultInstance();
}
public Sp.AddUserToWhitelistCall build() {
Sp.AddUserToWhitelistCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AddUserToWhitelistCall buildPartial() {
Sp.AddUserToWhitelistCall result = new Sp.AddUserToWhitelistCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userEmail_ = userEmail_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AddUserToWhitelistCall other) {
if (other == Sp.AddUserToWhitelistCall.getDefaultInstance()) return this;
if (other.hasUserEmail()) {
b0_ |= 0x00000001;
userEmail_ = other.userEmail_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserEmail()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AddUserToWhitelistCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AddUserToWhitelistCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userEmail_ = "";
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
public Builder clearUserEmail() {
b0_ = (b0_ & ~0x00000001);
userEmail_ = getDefaultInstance().getUserEmail();
return this;
}
public Builder setUserEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
}
static {
defaultInstance = new AddUserToWhitelistCall(true);
defaultInstance.initFields();
}
}
public interface RemoveUserFromWhitelistCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserEmail();
String getUserEmail();
ByteString
getUserEmailBytes();
}
public static final class RemoveUserFromWhitelistCall extends
GeneratedMessageLite implements
RemoveUserFromWhitelistCallOrBuilder {
private RemoveUserFromWhitelistCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RemoveUserFromWhitelistCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RemoveUserFromWhitelistCall defaultInstance;
public static RemoveUserFromWhitelistCall getDefaultInstance() {
return defaultInstance;
}
public RemoveUserFromWhitelistCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RemoveUserFromWhitelistCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userEmail_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RemoveUserFromWhitelistCall> PARSER =
new AbstractParser<RemoveUserFromWhitelistCall>() {
public RemoveUserFromWhitelistCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RemoveUserFromWhitelistCall(input, er);
}
};
@Override
public Parser<RemoveUserFromWhitelistCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_EMAIL_FIELD_NUMBER = 1;
private Object userEmail_;
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userEmail_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserEmail()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserEmailBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserEmailBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RemoveUserFromWhitelistCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RemoveUserFromWhitelistCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUserFromWhitelistCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RemoveUserFromWhitelistCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RemoveUserFromWhitelistCall, Builder>
implements
Sp.RemoveUserFromWhitelistCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userEmail_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RemoveUserFromWhitelistCall getDefaultInstanceForType() {
return Sp.RemoveUserFromWhitelistCall.getDefaultInstance();
}
public Sp.RemoveUserFromWhitelistCall build() {
Sp.RemoveUserFromWhitelistCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RemoveUserFromWhitelistCall buildPartial() {
Sp.RemoveUserFromWhitelistCall result = new Sp.RemoveUserFromWhitelistCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userEmail_ = userEmail_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RemoveUserFromWhitelistCall other) {
if (other == Sp.RemoveUserFromWhitelistCall.getDefaultInstance()) return this;
if (other.hasUserEmail()) {
b0_ |= 0x00000001;
userEmail_ = other.userEmail_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserEmail()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RemoveUserFromWhitelistCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RemoveUserFromWhitelistCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userEmail_ = "";
public boolean hasUserEmail() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserEmail() {
Object ref = userEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserEmailBytes() {
Object ref = userEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
public Builder clearUserEmail() {
b0_ = (b0_ & ~0x00000001);
userEmail_ = getDefaultInstance().getUserEmail();
return this;
}
public Builder setUserEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userEmail_ = value;
return this;
}
}
static {
defaultInstance = new RemoveUserFromWhitelistCall(true);
defaultInstance.initFields();
}
}
public interface ListWhitelistedUsersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBUser> 
getUserList();
Sp.PBUser getUser(int index);
int getUserCount();
}
public static final class ListWhitelistedUsersReply extends
GeneratedMessageLite implements
ListWhitelistedUsersReplyOrBuilder {
private ListWhitelistedUsersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListWhitelistedUsersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListWhitelistedUsersReply defaultInstance;
public static ListWhitelistedUsersReply getDefaultInstance() {
return defaultInstance;
}
public ListWhitelistedUsersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListWhitelistedUsersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
user_ = new ArrayList<Sp.PBUser>();
mutable_b0_ |= 0x00000001;
}
user_.add(input.readMessage(Sp.PBUser.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
user_ = Collections.unmodifiableList(user_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListWhitelistedUsersReply> PARSER =
new AbstractParser<ListWhitelistedUsersReply>() {
public ListWhitelistedUsersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListWhitelistedUsersReply(input, er);
}
};
@Override
public Parser<ListWhitelistedUsersReply> getParserForType() {
return PARSER;
}
public static final int USER_FIELD_NUMBER = 1;
private List<Sp.PBUser> user_;
public List<Sp.PBUser> getUserList() {
return user_;
}
public List<? extends Sp.PBUserOrBuilder> 
getUserOrBuilderList() {
return user_;
}
public int getUserCount() {
return user_.size();
}
public Sp.PBUser getUser(int index) {
return user_.get(index);
}
public Sp.PBUserOrBuilder getUserOrBuilder(
int index) {
return user_.get(index);
}
private void initFields() {
user_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getUserCount(); i++) {
if (!getUser(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < user_.size(); i++) {
output.writeMessage(1, user_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < user_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, user_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListWhitelistedUsersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListWhitelistedUsersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListWhitelistedUsersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListWhitelistedUsersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListWhitelistedUsersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListWhitelistedUsersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListWhitelistedUsersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListWhitelistedUsersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListWhitelistedUsersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListWhitelistedUsersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListWhitelistedUsersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListWhitelistedUsersReply, Builder>
implements
Sp.ListWhitelistedUsersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
user_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListWhitelistedUsersReply getDefaultInstanceForType() {
return Sp.ListWhitelistedUsersReply.getDefaultInstance();
}
public Sp.ListWhitelistedUsersReply build() {
Sp.ListWhitelistedUsersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListWhitelistedUsersReply buildPartial() {
Sp.ListWhitelistedUsersReply result = new Sp.ListWhitelistedUsersReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
user_ = Collections.unmodifiableList(user_);
b0_ = (b0_ & ~0x00000001);
}
result.user_ = user_;
return result;
}
public Builder mergeFrom(Sp.ListWhitelistedUsersReply other) {
if (other == Sp.ListWhitelistedUsersReply.getDefaultInstance()) return this;
if (!other.user_.isEmpty()) {
if (user_.isEmpty()) {
user_ = other.user_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUserIsMutable();
user_.addAll(other.user_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getUserCount(); i++) {
if (!getUser(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListWhitelistedUsersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListWhitelistedUsersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBUser> user_ =
Collections.emptyList();
private void ensureUserIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
user_ = new ArrayList<Sp.PBUser>(user_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBUser> getUserList() {
return Collections.unmodifiableList(user_);
}
public int getUserCount() {
return user_.size();
}
public Sp.PBUser getUser(int index) {
return user_.get(index);
}
public Builder setUser(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIsMutable();
user_.set(index, value);
return this;
}
public Builder setUser(
int index, Sp.PBUser.Builder bdForValue) {
ensureUserIsMutable();
user_.set(index, bdForValue.build());
return this;
}
public Builder addUser(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIsMutable();
user_.add(value);
return this;
}
public Builder addUser(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserIsMutable();
user_.add(index, value);
return this;
}
public Builder addUser(
Sp.PBUser.Builder bdForValue) {
ensureUserIsMutable();
user_.add(bdForValue.build());
return this;
}
public Builder addUser(
int index, Sp.PBUser.Builder bdForValue) {
ensureUserIsMutable();
user_.add(index, bdForValue.build());
return this;
}
public Builder addAllUser(
Iterable<? extends Sp.PBUser> values) {
ensureUserIsMutable();
AbstractMessageLite.Builder.addAll(
values, user_);
return this;
}
public Builder clearUser() {
user_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeUser(int index) {
ensureUserIsMutable();
user_.remove(index);
return this;
}
}
static {
defaultInstance = new ListWhitelistedUsersReply(true);
defaultInstance.initFields();
}
}
public interface CheckQuotaCallOrBuilder extends
MessageLiteOrBuilder {
List<Sp.CheckQuotaCall.PBStoreUsage> 
getStoreList();
Sp.CheckQuotaCall.PBStoreUsage getStore(int index);
int getStoreCount();
}
public static final class CheckQuotaCall extends
GeneratedMessageLite implements
CheckQuotaCallOrBuilder {
private CheckQuotaCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CheckQuotaCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CheckQuotaCall defaultInstance;
public static CheckQuotaCall getDefaultInstance() {
return defaultInstance;
}
public CheckQuotaCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CheckQuotaCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
store_ = new ArrayList<Sp.CheckQuotaCall.PBStoreUsage>();
mutable_b0_ |= 0x00000001;
}
store_.add(input.readMessage(Sp.CheckQuotaCall.PBStoreUsage.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
store_ = Collections.unmodifiableList(store_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CheckQuotaCall> PARSER =
new AbstractParser<CheckQuotaCall>() {
public CheckQuotaCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CheckQuotaCall(input, er);
}
};
@Override
public Parser<CheckQuotaCall> getParserForType() {
return PARSER;
}
public interface PBStoreUsageOrBuilder extends
MessageLiteOrBuilder {
boolean hasSid();
ByteString getSid();
boolean hasBytesUsed();
long getBytesUsed();
}
public static final class PBStoreUsage extends
GeneratedMessageLite implements
PBStoreUsageOrBuilder {
private PBStoreUsage(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBStoreUsage(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBStoreUsage defaultInstance;
public static PBStoreUsage getDefaultInstance() {
return defaultInstance;
}
public PBStoreUsage getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBStoreUsage(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sid_ = input.readBytes();
break;
}
case 16: {
b0_ |= 0x00000002;
bytesUsed_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBStoreUsage> PARSER =
new AbstractParser<PBStoreUsage>() {
public PBStoreUsage parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBStoreUsage(input, er);
}
};
@Override
public Parser<PBStoreUsage> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SID_FIELD_NUMBER = 1;
private ByteString sid_;
public boolean hasSid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSid() {
return sid_;
}
public static final int BYTES_USED_FIELD_NUMBER = 2;
private long bytesUsed_;
public boolean hasBytesUsed() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getBytesUsed() {
return bytesUsed_;
}
private void initFields() {
sid_ = ByteString.EMPTY;
bytesUsed_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSid()) {
mii = 0;
return false;
}
if (!hasBytesUsed()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sid_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt64(2, bytesUsed_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sid_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt64Size(2, bytesUsed_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaCall.PBStoreUsage parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CheckQuotaCall.PBStoreUsage prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CheckQuotaCall.PBStoreUsage, Builder>
implements
Sp.CheckQuotaCall.PBStoreUsageOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sid_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
bytesUsed_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CheckQuotaCall.PBStoreUsage getDefaultInstanceForType() {
return Sp.CheckQuotaCall.PBStoreUsage.getDefaultInstance();
}
public Sp.CheckQuotaCall.PBStoreUsage build() {
Sp.CheckQuotaCall.PBStoreUsage result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CheckQuotaCall.PBStoreUsage buildPartial() {
Sp.CheckQuotaCall.PBStoreUsage result = new Sp.CheckQuotaCall.PBStoreUsage(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sid_ = sid_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.bytesUsed_ = bytesUsed_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CheckQuotaCall.PBStoreUsage other) {
if (other == Sp.CheckQuotaCall.PBStoreUsage.getDefaultInstance()) return this;
if (other.hasSid()) {
setSid(other.getSid());
}
if (other.hasBytesUsed()) {
setBytesUsed(other.getBytesUsed());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSid()) {
return false;
}
if (!hasBytesUsed()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CheckQuotaCall.PBStoreUsage pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CheckQuotaCall.PBStoreUsage) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sid_ = ByteString.EMPTY;
public boolean hasSid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSid() {
return sid_;
}
public Builder setSid(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sid_ = value;
return this;
}
public Builder clearSid() {
b0_ = (b0_ & ~0x00000001);
sid_ = getDefaultInstance().getSid();
return this;
}
private long bytesUsed_ ;
public boolean hasBytesUsed() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getBytesUsed() {
return bytesUsed_;
}
public Builder setBytesUsed(long value) {
b0_ |= 0x00000002;
bytesUsed_ = value;
return this;
}
public Builder clearBytesUsed() {
b0_ = (b0_ & ~0x00000002);
bytesUsed_ = 0L;
return this;
}
}
static {
defaultInstance = new PBStoreUsage(true);
defaultInstance.initFields();
}
}
public static final int STORE_FIELD_NUMBER = 1;
private List<Sp.CheckQuotaCall.PBStoreUsage> store_;
public List<Sp.CheckQuotaCall.PBStoreUsage> getStoreList() {
return store_;
}
public List<? extends Sp.CheckQuotaCall.PBStoreUsageOrBuilder> 
getStoreOrBuilderList() {
return store_;
}
public int getStoreCount() {
return store_.size();
}
public Sp.CheckQuotaCall.PBStoreUsage getStore(int index) {
return store_.get(index);
}
public Sp.CheckQuotaCall.PBStoreUsageOrBuilder getStoreOrBuilder(
int index) {
return store_.get(index);
}
private void initFields() {
store_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getStoreCount(); i++) {
if (!getStore(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < store_.size(); i++) {
output.writeMessage(1, store_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < store_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, store_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CheckQuotaCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CheckQuotaCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CheckQuotaCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CheckQuotaCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CheckQuotaCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CheckQuotaCall, Builder>
implements
Sp.CheckQuotaCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
store_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CheckQuotaCall getDefaultInstanceForType() {
return Sp.CheckQuotaCall.getDefaultInstance();
}
public Sp.CheckQuotaCall build() {
Sp.CheckQuotaCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CheckQuotaCall buildPartial() {
Sp.CheckQuotaCall result = new Sp.CheckQuotaCall(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
store_ = Collections.unmodifiableList(store_);
b0_ = (b0_ & ~0x00000001);
}
result.store_ = store_;
return result;
}
public Builder mergeFrom(Sp.CheckQuotaCall other) {
if (other == Sp.CheckQuotaCall.getDefaultInstance()) return this;
if (!other.store_.isEmpty()) {
if (store_.isEmpty()) {
store_ = other.store_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureStoreIsMutable();
store_.addAll(other.store_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getStoreCount(); i++) {
if (!getStore(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CheckQuotaCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CheckQuotaCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.CheckQuotaCall.PBStoreUsage> store_ =
Collections.emptyList();
private void ensureStoreIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
store_ = new ArrayList<Sp.CheckQuotaCall.PBStoreUsage>(store_);
b0_ |= 0x00000001;
}
}
public List<Sp.CheckQuotaCall.PBStoreUsage> getStoreList() {
return Collections.unmodifiableList(store_);
}
public int getStoreCount() {
return store_.size();
}
public Sp.CheckQuotaCall.PBStoreUsage getStore(int index) {
return store_.get(index);
}
public Builder setStore(
int index, Sp.CheckQuotaCall.PBStoreUsage value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.set(index, value);
return this;
}
public Builder setStore(
int index, Sp.CheckQuotaCall.PBStoreUsage.Builder bdForValue) {
ensureStoreIsMutable();
store_.set(index, bdForValue.build());
return this;
}
public Builder addStore(Sp.CheckQuotaCall.PBStoreUsage value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.add(value);
return this;
}
public Builder addStore(
int index, Sp.CheckQuotaCall.PBStoreUsage value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.add(index, value);
return this;
}
public Builder addStore(
Sp.CheckQuotaCall.PBStoreUsage.Builder bdForValue) {
ensureStoreIsMutable();
store_.add(bdForValue.build());
return this;
}
public Builder addStore(
int index, Sp.CheckQuotaCall.PBStoreUsage.Builder bdForValue) {
ensureStoreIsMutable();
store_.add(index, bdForValue.build());
return this;
}
public Builder addAllStore(
Iterable<? extends Sp.CheckQuotaCall.PBStoreUsage> values) {
ensureStoreIsMutable();
AbstractMessageLite.Builder.addAll(
values, store_);
return this;
}
public Builder clearStore() {
store_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeStore(int index) {
ensureStoreIsMutable();
store_.remove(index);
return this;
}
}
static {
defaultInstance = new CheckQuotaCall(true);
defaultInstance.initFields();
}
}
public interface CheckQuotaReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.CheckQuotaReply.PBStoreShouldCollect> 
getStoreList();
Sp.CheckQuotaReply.PBStoreShouldCollect getStore(int index);
int getStoreCount();
}
public static final class CheckQuotaReply extends
GeneratedMessageLite implements
CheckQuotaReplyOrBuilder {
private CheckQuotaReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CheckQuotaReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CheckQuotaReply defaultInstance;
public static CheckQuotaReply getDefaultInstance() {
return defaultInstance;
}
public CheckQuotaReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CheckQuotaReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
store_ = new ArrayList<Sp.CheckQuotaReply.PBStoreShouldCollect>();
mutable_b0_ |= 0x00000001;
}
store_.add(input.readMessage(Sp.CheckQuotaReply.PBStoreShouldCollect.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
store_ = Collections.unmodifiableList(store_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CheckQuotaReply> PARSER =
new AbstractParser<CheckQuotaReply>() {
public CheckQuotaReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CheckQuotaReply(input, er);
}
};
@Override
public Parser<CheckQuotaReply> getParserForType() {
return PARSER;
}
public interface PBStoreShouldCollectOrBuilder extends
MessageLiteOrBuilder {
boolean hasSid();
ByteString getSid();
boolean hasCollectContent();
boolean getCollectContent();
}
public static final class PBStoreShouldCollect extends
GeneratedMessageLite implements
PBStoreShouldCollectOrBuilder {
private PBStoreShouldCollect(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBStoreShouldCollect(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBStoreShouldCollect defaultInstance;
public static PBStoreShouldCollect getDefaultInstance() {
return defaultInstance;
}
public PBStoreShouldCollect getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBStoreShouldCollect(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sid_ = input.readBytes();
break;
}
case 16: {
b0_ |= 0x00000002;
collectContent_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBStoreShouldCollect> PARSER =
new AbstractParser<PBStoreShouldCollect>() {
public PBStoreShouldCollect parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBStoreShouldCollect(input, er);
}
};
@Override
public Parser<PBStoreShouldCollect> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SID_FIELD_NUMBER = 1;
private ByteString sid_;
public boolean hasSid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSid() {
return sid_;
}
public static final int COLLECT_CONTENT_FIELD_NUMBER = 2;
private boolean collectContent_;
public boolean hasCollectContent() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getCollectContent() {
return collectContent_;
}
private void initFields() {
sid_ = ByteString.EMPTY;
collectContent_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSid()) {
mii = 0;
return false;
}
if (!hasCollectContent()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sid_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, collectContent_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sid_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, collectContent_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaReply.PBStoreShouldCollect parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CheckQuotaReply.PBStoreShouldCollect prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CheckQuotaReply.PBStoreShouldCollect, Builder>
implements
Sp.CheckQuotaReply.PBStoreShouldCollectOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sid_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
collectContent_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CheckQuotaReply.PBStoreShouldCollect getDefaultInstanceForType() {
return Sp.CheckQuotaReply.PBStoreShouldCollect.getDefaultInstance();
}
public Sp.CheckQuotaReply.PBStoreShouldCollect build() {
Sp.CheckQuotaReply.PBStoreShouldCollect result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CheckQuotaReply.PBStoreShouldCollect buildPartial() {
Sp.CheckQuotaReply.PBStoreShouldCollect result = new Sp.CheckQuotaReply.PBStoreShouldCollect(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sid_ = sid_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.collectContent_ = collectContent_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CheckQuotaReply.PBStoreShouldCollect other) {
if (other == Sp.CheckQuotaReply.PBStoreShouldCollect.getDefaultInstance()) return this;
if (other.hasSid()) {
setSid(other.getSid());
}
if (other.hasCollectContent()) {
setCollectContent(other.getCollectContent());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSid()) {
return false;
}
if (!hasCollectContent()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CheckQuotaReply.PBStoreShouldCollect pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CheckQuotaReply.PBStoreShouldCollect) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sid_ = ByteString.EMPTY;
public boolean hasSid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSid() {
return sid_;
}
public Builder setSid(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sid_ = value;
return this;
}
public Builder clearSid() {
b0_ = (b0_ & ~0x00000001);
sid_ = getDefaultInstance().getSid();
return this;
}
private boolean collectContent_ ;
public boolean hasCollectContent() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getCollectContent() {
return collectContent_;
}
public Builder setCollectContent(boolean value) {
b0_ |= 0x00000002;
collectContent_ = value;
return this;
}
public Builder clearCollectContent() {
b0_ = (b0_ & ~0x00000002);
collectContent_ = false;
return this;
}
}
static {
defaultInstance = new PBStoreShouldCollect(true);
defaultInstance.initFields();
}
}
public static final int STORE_FIELD_NUMBER = 1;
private List<Sp.CheckQuotaReply.PBStoreShouldCollect> store_;
public List<Sp.CheckQuotaReply.PBStoreShouldCollect> getStoreList() {
return store_;
}
public List<? extends Sp.CheckQuotaReply.PBStoreShouldCollectOrBuilder> 
getStoreOrBuilderList() {
return store_;
}
public int getStoreCount() {
return store_.size();
}
public Sp.CheckQuotaReply.PBStoreShouldCollect getStore(int index) {
return store_.get(index);
}
public Sp.CheckQuotaReply.PBStoreShouldCollectOrBuilder getStoreOrBuilder(
int index) {
return store_.get(index);
}
private void initFields() {
store_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getStoreCount(); i++) {
if (!getStore(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < store_.size(); i++) {
output.writeMessage(1, store_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < store_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, store_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CheckQuotaReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CheckQuotaReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CheckQuotaReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CheckQuotaReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CheckQuotaReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CheckQuotaReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CheckQuotaReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CheckQuotaReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CheckQuotaReply, Builder>
implements
Sp.CheckQuotaReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
store_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CheckQuotaReply getDefaultInstanceForType() {
return Sp.CheckQuotaReply.getDefaultInstance();
}
public Sp.CheckQuotaReply build() {
Sp.CheckQuotaReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CheckQuotaReply buildPartial() {
Sp.CheckQuotaReply result = new Sp.CheckQuotaReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
store_ = Collections.unmodifiableList(store_);
b0_ = (b0_ & ~0x00000001);
}
result.store_ = store_;
return result;
}
public Builder mergeFrom(Sp.CheckQuotaReply other) {
if (other == Sp.CheckQuotaReply.getDefaultInstance()) return this;
if (!other.store_.isEmpty()) {
if (store_.isEmpty()) {
store_ = other.store_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureStoreIsMutable();
store_.addAll(other.store_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getStoreCount(); i++) {
if (!getStore(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CheckQuotaReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CheckQuotaReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.CheckQuotaReply.PBStoreShouldCollect> store_ =
Collections.emptyList();
private void ensureStoreIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
store_ = new ArrayList<Sp.CheckQuotaReply.PBStoreShouldCollect>(store_);
b0_ |= 0x00000001;
}
}
public List<Sp.CheckQuotaReply.PBStoreShouldCollect> getStoreList() {
return Collections.unmodifiableList(store_);
}
public int getStoreCount() {
return store_.size();
}
public Sp.CheckQuotaReply.PBStoreShouldCollect getStore(int index) {
return store_.get(index);
}
public Builder setStore(
int index, Sp.CheckQuotaReply.PBStoreShouldCollect value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.set(index, value);
return this;
}
public Builder setStore(
int index, Sp.CheckQuotaReply.PBStoreShouldCollect.Builder bdForValue) {
ensureStoreIsMutable();
store_.set(index, bdForValue.build());
return this;
}
public Builder addStore(Sp.CheckQuotaReply.PBStoreShouldCollect value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.add(value);
return this;
}
public Builder addStore(
int index, Sp.CheckQuotaReply.PBStoreShouldCollect value) {
if (value == null) {
throw new NullPointerException();
}
ensureStoreIsMutable();
store_.add(index, value);
return this;
}
public Builder addStore(
Sp.CheckQuotaReply.PBStoreShouldCollect.Builder bdForValue) {
ensureStoreIsMutable();
store_.add(bdForValue.build());
return this;
}
public Builder addStore(
int index, Sp.CheckQuotaReply.PBStoreShouldCollect.Builder bdForValue) {
ensureStoreIsMutable();
store_.add(index, bdForValue.build());
return this;
}
public Builder addAllStore(
Iterable<? extends Sp.CheckQuotaReply.PBStoreShouldCollect> values) {
ensureStoreIsMutable();
AbstractMessageLite.Builder.addAll(
values, store_);
return this;
}
public Builder clearStore() {
store_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeStore(int index) {
ensureStoreIsMutable();
store_.remove(index);
return this;
}
}
static {
defaultInstance = new CheckQuotaReply(true);
defaultInstance.initFields();
}
}
public interface GetQuotaReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasQuota();
long getQuota();
}
public static final class GetQuotaReply extends
GeneratedMessageLite implements
GetQuotaReplyOrBuilder {
private GetQuotaReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetQuotaReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetQuotaReply defaultInstance;
public static GetQuotaReply getDefaultInstance() {
return defaultInstance;
}
public GetQuotaReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetQuotaReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
quota_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetQuotaReply> PARSER =
new AbstractParser<GetQuotaReply>() {
public GetQuotaReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetQuotaReply(input, er);
}
};
@Override
public Parser<GetQuotaReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int QUOTA_FIELD_NUMBER = 1;
private long quota_;
public boolean hasQuota() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getQuota() {
return quota_;
}
private void initFields() {
quota_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt64(1, quota_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt64Size(1, quota_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetQuotaReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetQuotaReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetQuotaReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetQuotaReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetQuotaReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetQuotaReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetQuotaReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetQuotaReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetQuotaReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetQuotaReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetQuotaReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetQuotaReply, Builder>
implements
Sp.GetQuotaReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
quota_ = 0L;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetQuotaReply getDefaultInstanceForType() {
return Sp.GetQuotaReply.getDefaultInstance();
}
public Sp.GetQuotaReply build() {
Sp.GetQuotaReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetQuotaReply buildPartial() {
Sp.GetQuotaReply result = new Sp.GetQuotaReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.quota_ = quota_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetQuotaReply other) {
if (other == Sp.GetQuotaReply.getDefaultInstance()) return this;
if (other.hasQuota()) {
setQuota(other.getQuota());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetQuotaReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetQuotaReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private long quota_ ;
public boolean hasQuota() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getQuota() {
return quota_;
}
public Builder setQuota(long value) {
b0_ |= 0x00000001;
quota_ = value;
return this;
}
public Builder clearQuota() {
b0_ = (b0_ & ~0x00000001);
quota_ = 0L;
return this;
}
}
static {
defaultInstance = new GetQuotaReply(true);
defaultInstance.initFields();
}
}
public interface SetQuotaCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasQuota();
long getQuota();
}
public static final class SetQuotaCall extends
GeneratedMessageLite implements
SetQuotaCallOrBuilder {
private SetQuotaCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetQuotaCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetQuotaCall defaultInstance;
public static SetQuotaCall getDefaultInstance() {
return defaultInstance;
}
public SetQuotaCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetQuotaCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
quota_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetQuotaCall> PARSER =
new AbstractParser<SetQuotaCall>() {
public SetQuotaCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetQuotaCall(input, er);
}
};
@Override
public Parser<SetQuotaCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int QUOTA_FIELD_NUMBER = 1;
private long quota_;
public boolean hasQuota() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getQuota() {
return quota_;
}
private void initFields() {
quota_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasQuota()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt64(1, quota_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt64Size(1, quota_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetQuotaCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetQuotaCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetQuotaCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetQuotaCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetQuotaCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetQuotaCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetQuotaCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetQuotaCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetQuotaCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetQuotaCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetQuotaCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetQuotaCall, Builder>
implements
Sp.SetQuotaCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
quota_ = 0L;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetQuotaCall getDefaultInstanceForType() {
return Sp.SetQuotaCall.getDefaultInstance();
}
public Sp.SetQuotaCall build() {
Sp.SetQuotaCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetQuotaCall buildPartial() {
Sp.SetQuotaCall result = new Sp.SetQuotaCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.quota_ = quota_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetQuotaCall other) {
if (other == Sp.SetQuotaCall.getDefaultInstance()) return this;
if (other.hasQuota()) {
setQuota(other.getQuota());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasQuota()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetQuotaCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetQuotaCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private long quota_ ;
public boolean hasQuota() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public long getQuota() {
return quota_;
}
public Builder setQuota(long value) {
b0_ |= 0x00000001;
quota_ = value;
return this;
}
public Builder clearQuota() {
b0_ = (b0_ & ~0x00000001);
quota_ = 0L;
return this;
}
}
static {
defaultInstance = new SetQuotaCall(true);
defaultInstance.initFields();
}
}
public interface CreateUrlCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSoid();
String getSoid();
ByteString
getSoidBytes();
}
public static final class CreateUrlCall extends
GeneratedMessageLite implements
CreateUrlCallOrBuilder {
private CreateUrlCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CreateUrlCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CreateUrlCall defaultInstance;
public static CreateUrlCall getDefaultInstance() {
return defaultInstance;
}
public CreateUrlCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CreateUrlCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
soid_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CreateUrlCall> PARSER =
new AbstractParser<CreateUrlCall>() {
public CreateUrlCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CreateUrlCall(input, er);
}
};
@Override
public Parser<CreateUrlCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SOID_FIELD_NUMBER = 1;
private Object soid_;
public boolean hasSoid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSoid() {
Object ref = soid_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
soid_ = s;
}
return s;
}
}
public ByteString
getSoidBytes() {
Object ref = soid_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
soid_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
soid_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSoid()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getSoidBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getSoidBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CreateUrlCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateUrlCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateUrlCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateUrlCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateUrlCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateUrlCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CreateUrlCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CreateUrlCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CreateUrlCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateUrlCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CreateUrlCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CreateUrlCall, Builder>
implements
Sp.CreateUrlCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
soid_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CreateUrlCall getDefaultInstanceForType() {
return Sp.CreateUrlCall.getDefaultInstance();
}
public Sp.CreateUrlCall build() {
Sp.CreateUrlCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CreateUrlCall buildPartial() {
Sp.CreateUrlCall result = new Sp.CreateUrlCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.soid_ = soid_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CreateUrlCall other) {
if (other == Sp.CreateUrlCall.getDefaultInstance()) return this;
if (other.hasSoid()) {
b0_ |= 0x00000001;
soid_ = other.soid_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSoid()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CreateUrlCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CreateUrlCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object soid_ = "";
public boolean hasSoid() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getSoid() {
Object ref = soid_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
soid_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSoidBytes() {
Object ref = soid_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
soid_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSoid(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
soid_ = value;
return this;
}
public Builder clearSoid() {
b0_ = (b0_ & ~0x00000001);
soid_ = getDefaultInstance().getSoid();
return this;
}
public Builder setSoidBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
soid_ = value;
return this;
}
}
static {
defaultInstance = new CreateUrlCall(true);
defaultInstance.initFields();
}
}
public interface PBRestObjectUrlOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasSoid();
String getSoid();
ByteString
getSoidBytes();
boolean hasToken();
String getToken();
ByteString
getTokenBytes();
boolean hasCreatedBy();
String getCreatedBy();
ByteString
getCreatedByBytes();
boolean hasExpires();
long getExpires();
boolean hasHasPassword();
boolean getHasPassword();
boolean hasRequireLogin();
boolean getRequireLogin();
}
public static final class PBRestObjectUrl extends
GeneratedMessageLite implements
PBRestObjectUrlOrBuilder {
private PBRestObjectUrl(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBRestObjectUrl(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBRestObjectUrl defaultInstance;
public static PBRestObjectUrl getDefaultInstance() {
return defaultInstance;
}
public PBRestObjectUrl getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBRestObjectUrl(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
soid_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
token_ = bs;
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
createdBy_ = bs;
break;
}
case 40: {
b0_ |= 0x00000010;
expires_ = input.readUInt64();
break;
}
case 48: {
b0_ |= 0x00000020;
hasPassword_ = input.readBool();
break;
}
case 56: {
b0_ |= 0x00000040;
requireLogin_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBRestObjectUrl> PARSER =
new AbstractParser<PBRestObjectUrl>() {
public PBRestObjectUrl parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBRestObjectUrl(input, er);
}
};
@Override
public Parser<PBRestObjectUrl> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int SOID_FIELD_NUMBER = 2;
private Object soid_;
public boolean hasSoid() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSoid() {
Object ref = soid_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
soid_ = s;
}
return s;
}
}
public ByteString
getSoidBytes() {
Object ref = soid_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
soid_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int TOKEN_FIELD_NUMBER = 3;
private Object token_;
public boolean hasToken() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getToken() {
Object ref = token_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int CREATED_BY_FIELD_NUMBER = 4;
private Object createdBy_;
public boolean hasCreatedBy() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getCreatedBy() {
Object ref = createdBy_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
createdBy_ = s;
}
return s;
}
}
public ByteString
getCreatedByBytes() {
Object ref = createdBy_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
createdBy_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int EXPIRES_FIELD_NUMBER = 5;
private long expires_;
public boolean hasExpires() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public long getExpires() {
return expires_;
}
public static final int HAS_PASSWORD_FIELD_NUMBER = 6;
private boolean hasPassword_;
public boolean hasHasPassword() {
return ((b0_ & 0x00000020) == 0x00000020);
}
public boolean getHasPassword() {
return hasPassword_;
}
public static final int REQUIRE_LOGIN_FIELD_NUMBER = 7;
private boolean requireLogin_;
public boolean hasRequireLogin() {
return ((b0_ & 0x00000040) == 0x00000040);
}
public boolean getRequireLogin() {
return requireLogin_;
}
private void initFields() {
key_ = "";
soid_ = "";
token_ = "";
createdBy_ = "";
expires_ = 0L;
hasPassword_ = false;
requireLogin_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
if (!hasSoid()) {
mii = 0;
return false;
}
if (!hasToken()) {
mii = 0;
return false;
}
if (!hasCreatedBy()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getSoidBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getTokenBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, getCreatedByBytes());
}
if (((b0_ & 0x00000010) == 0x00000010)) {
output.writeUInt64(5, expires_);
}
if (((b0_ & 0x00000020) == 0x00000020)) {
output.writeBool(6, hasPassword_);
}
if (((b0_ & 0x00000040) == 0x00000040)) {
output.writeBool(7, requireLogin_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getSoidBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getTokenBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, getCreatedByBytes());
}
if (((b0_ & 0x00000010) == 0x00000010)) {
size += CodedOutputStream
.computeUInt64Size(5, expires_);
}
if (((b0_ & 0x00000020) == 0x00000020)) {
size += CodedOutputStream
.computeBoolSize(6, hasPassword_);
}
if (((b0_ & 0x00000040) == 0x00000040)) {
size += CodedOutputStream
.computeBoolSize(7, requireLogin_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.PBRestObjectUrl parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBRestObjectUrl parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBRestObjectUrl parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.PBRestObjectUrl parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.PBRestObjectUrl parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBRestObjectUrl parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.PBRestObjectUrl parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.PBRestObjectUrl parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.PBRestObjectUrl parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.PBRestObjectUrl parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.PBRestObjectUrl prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.PBRestObjectUrl, Builder>
implements
Sp.PBRestObjectUrlOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
soid_ = "";
b0_ = (b0_ & ~0x00000002);
token_ = "";
b0_ = (b0_ & ~0x00000004);
createdBy_ = "";
b0_ = (b0_ & ~0x00000008);
expires_ = 0L;
b0_ = (b0_ & ~0x00000010);
hasPassword_ = false;
b0_ = (b0_ & ~0x00000020);
requireLogin_ = false;
b0_ = (b0_ & ~0x00000040);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.PBRestObjectUrl getDefaultInstanceForType() {
return Sp.PBRestObjectUrl.getDefaultInstance();
}
public Sp.PBRestObjectUrl build() {
Sp.PBRestObjectUrl result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.PBRestObjectUrl buildPartial() {
Sp.PBRestObjectUrl result = new Sp.PBRestObjectUrl(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.soid_ = soid_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.token_ = token_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.createdBy_ = createdBy_;
if (((from_b0_ & 0x00000010) == 0x00000010)) {
to_b0_ |= 0x00000010;
}
result.expires_ = expires_;
if (((from_b0_ & 0x00000020) == 0x00000020)) {
to_b0_ |= 0x00000020;
}
result.hasPassword_ = hasPassword_;
if (((from_b0_ & 0x00000040) == 0x00000040)) {
to_b0_ |= 0x00000040;
}
result.requireLogin_ = requireLogin_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.PBRestObjectUrl other) {
if (other == Sp.PBRestObjectUrl.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasSoid()) {
b0_ |= 0x00000002;
soid_ = other.soid_;
}
if (other.hasToken()) {
b0_ |= 0x00000004;
token_ = other.token_;
}
if (other.hasCreatedBy()) {
b0_ |= 0x00000008;
createdBy_ = other.createdBy_;
}
if (other.hasExpires()) {
setExpires(other.getExpires());
}
if (other.hasHasPassword()) {
setHasPassword(other.getHasPassword());
}
if (other.hasRequireLogin()) {
setRequireLogin(other.getRequireLogin());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
if (!hasSoid()) {
return false;
}
if (!hasToken()) {
return false;
}
if (!hasCreatedBy()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.PBRestObjectUrl pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.PBRestObjectUrl) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private Object soid_ = "";
public boolean hasSoid() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getSoid() {
Object ref = soid_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
soid_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSoidBytes() {
Object ref = soid_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
soid_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSoid(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
soid_ = value;
return this;
}
public Builder clearSoid() {
b0_ = (b0_ & ~0x00000002);
soid_ = getDefaultInstance().getSoid();
return this;
}
public Builder setSoidBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
soid_ = value;
return this;
}
private Object token_ = "";
public boolean hasToken() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getToken() {
Object ref = token_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
token_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getTokenBytes() {
Object ref = token_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
token_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setToken(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
token_ = value;
return this;
}
public Builder clearToken() {
b0_ = (b0_ & ~0x00000004);
token_ = getDefaultInstance().getToken();
return this;
}
public Builder setTokenBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
token_ = value;
return this;
}
private Object createdBy_ = "";
public boolean hasCreatedBy() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getCreatedBy() {
Object ref = createdBy_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
createdBy_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCreatedByBytes() {
Object ref = createdBy_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
createdBy_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCreatedBy(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
createdBy_ = value;
return this;
}
public Builder clearCreatedBy() {
b0_ = (b0_ & ~0x00000008);
createdBy_ = getDefaultInstance().getCreatedBy();
return this;
}
public Builder setCreatedByBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
createdBy_ = value;
return this;
}
private long expires_ ;
public boolean hasExpires() {
return ((b0_ & 0x00000010) == 0x00000010);
}
public long getExpires() {
return expires_;
}
public Builder setExpires(long value) {
b0_ |= 0x00000010;
expires_ = value;
return this;
}
public Builder clearExpires() {
b0_ = (b0_ & ~0x00000010);
expires_ = 0L;
return this;
}
private boolean hasPassword_ ;
public boolean hasHasPassword() {
return ((b0_ & 0x00000020) == 0x00000020);
}
public boolean getHasPassword() {
return hasPassword_;
}
public Builder setHasPassword(boolean value) {
b0_ |= 0x00000020;
hasPassword_ = value;
return this;
}
public Builder clearHasPassword() {
b0_ = (b0_ & ~0x00000020);
hasPassword_ = false;
return this;
}
private boolean requireLogin_ ;
public boolean hasRequireLogin() {
return ((b0_ & 0x00000040) == 0x00000040);
}
public boolean getRequireLogin() {
return requireLogin_;
}
public Builder setRequireLogin(boolean value) {
b0_ |= 0x00000040;
requireLogin_ = value;
return this;
}
public Builder clearRequireLogin() {
b0_ = (b0_ & ~0x00000040);
requireLogin_ = false;
return this;
}
}
static {
defaultInstance = new PBRestObjectUrl(true);
defaultInstance.initFields();
}
}
public interface CreateUrlReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasUrlInfo();
Sp.PBRestObjectUrl getUrlInfo();
}
public static final class CreateUrlReply extends
GeneratedMessageLite implements
CreateUrlReplyOrBuilder {
private CreateUrlReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CreateUrlReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CreateUrlReply defaultInstance;
public static CreateUrlReply getDefaultInstance() {
return defaultInstance;
}
public CreateUrlReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CreateUrlReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBRestObjectUrl.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = urlInfo_.toBuilder();
}
urlInfo_ = input.readMessage(Sp.PBRestObjectUrl.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(urlInfo_);
urlInfo_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CreateUrlReply> PARSER =
new AbstractParser<CreateUrlReply>() {
public CreateUrlReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CreateUrlReply(input, er);
}
};
@Override
public Parser<CreateUrlReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int URL_INFO_FIELD_NUMBER = 1;
private Sp.PBRestObjectUrl urlInfo_;
public boolean hasUrlInfo() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBRestObjectUrl getUrlInfo() {
return urlInfo_;
}
private void initFields() {
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUrlInfo()) {
mii = 0;
return false;
}
if (!getUrlInfo().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, urlInfo_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, urlInfo_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CreateUrlReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateUrlReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateUrlReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateUrlReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateUrlReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateUrlReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CreateUrlReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CreateUrlReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CreateUrlReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateUrlReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CreateUrlReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CreateUrlReply, Builder>
implements
Sp.CreateUrlReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CreateUrlReply getDefaultInstanceForType() {
return Sp.CreateUrlReply.getDefaultInstance();
}
public Sp.CreateUrlReply build() {
Sp.CreateUrlReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CreateUrlReply buildPartial() {
Sp.CreateUrlReply result = new Sp.CreateUrlReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.urlInfo_ = urlInfo_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CreateUrlReply other) {
if (other == Sp.CreateUrlReply.getDefaultInstance()) return this;
if (other.hasUrlInfo()) {
mergeUrlInfo(other.getUrlInfo());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUrlInfo()) {
return false;
}
if (!getUrlInfo().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CreateUrlReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CreateUrlReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBRestObjectUrl urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
public boolean hasUrlInfo() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBRestObjectUrl getUrlInfo() {
return urlInfo_;
}
public Builder setUrlInfo(Sp.PBRestObjectUrl value) {
if (value == null) {
throw new NullPointerException();
}
urlInfo_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setUrlInfo(
Sp.PBRestObjectUrl.Builder bdForValue) {
urlInfo_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeUrlInfo(Sp.PBRestObjectUrl value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
urlInfo_ != Sp.PBRestObjectUrl.getDefaultInstance()) {
urlInfo_ =
Sp.PBRestObjectUrl.newBuilder(urlInfo_).mergeFrom(value).buildPartial();
} else {
urlInfo_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearUrlInfo() {
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
}
static {
defaultInstance = new CreateUrlReply(true);
defaultInstance.initFields();
}
}
public interface SetUrlExpiresCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasExpires();
long getExpires();
}
public static final class SetUrlExpiresCall extends
GeneratedMessageLite implements
SetUrlExpiresCallOrBuilder {
private SetUrlExpiresCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUrlExpiresCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUrlExpiresCall defaultInstance;
public static SetUrlExpiresCall getDefaultInstance() {
return defaultInstance;
}
public SetUrlExpiresCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUrlExpiresCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
expires_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUrlExpiresCall> PARSER =
new AbstractParser<SetUrlExpiresCall>() {
public SetUrlExpiresCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUrlExpiresCall(input, er);
}
};
@Override
public Parser<SetUrlExpiresCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int EXPIRES_FIELD_NUMBER = 2;
private long expires_;
public boolean hasExpires() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getExpires() {
return expires_;
}
private void initFields() {
key_ = "";
expires_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
if (!hasExpires()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt64(2, expires_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt64Size(2, expires_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUrlExpiresCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlExpiresCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlExpiresCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlExpiresCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlExpiresCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlExpiresCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUrlExpiresCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUrlExpiresCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUrlExpiresCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlExpiresCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUrlExpiresCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUrlExpiresCall, Builder>
implements
Sp.SetUrlExpiresCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
expires_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUrlExpiresCall getDefaultInstanceForType() {
return Sp.SetUrlExpiresCall.getDefaultInstance();
}
public Sp.SetUrlExpiresCall build() {
Sp.SetUrlExpiresCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUrlExpiresCall buildPartial() {
Sp.SetUrlExpiresCall result = new Sp.SetUrlExpiresCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.expires_ = expires_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUrlExpiresCall other) {
if (other == Sp.SetUrlExpiresCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasExpires()) {
setExpires(other.getExpires());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
if (!hasExpires()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUrlExpiresCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUrlExpiresCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private long expires_ ;
public boolean hasExpires() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getExpires() {
return expires_;
}
public Builder setExpires(long value) {
b0_ |= 0x00000002;
expires_ = value;
return this;
}
public Builder clearExpires() {
b0_ = (b0_ & ~0x00000002);
expires_ = 0L;
return this;
}
}
static {
defaultInstance = new SetUrlExpiresCall(true);
defaultInstance.initFields();
}
}
public interface RemoveUrlExpiresCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
}
public static final class RemoveUrlExpiresCall extends
GeneratedMessageLite implements
RemoveUrlExpiresCallOrBuilder {
private RemoveUrlExpiresCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RemoveUrlExpiresCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RemoveUrlExpiresCall defaultInstance;
public static RemoveUrlExpiresCall getDefaultInstance() {
return defaultInstance;
}
public RemoveUrlExpiresCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RemoveUrlExpiresCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RemoveUrlExpiresCall> PARSER =
new AbstractParser<RemoveUrlExpiresCall>() {
public RemoveUrlExpiresCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RemoveUrlExpiresCall(input, er);
}
};
@Override
public Parser<RemoveUrlExpiresCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
key_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RemoveUrlExpiresCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlExpiresCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlExpiresCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlExpiresCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlExpiresCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlExpiresCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RemoveUrlExpiresCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RemoveUrlExpiresCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RemoveUrlExpiresCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlExpiresCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RemoveUrlExpiresCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RemoveUrlExpiresCall, Builder>
implements
Sp.RemoveUrlExpiresCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RemoveUrlExpiresCall getDefaultInstanceForType() {
return Sp.RemoveUrlExpiresCall.getDefaultInstance();
}
public Sp.RemoveUrlExpiresCall build() {
Sp.RemoveUrlExpiresCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RemoveUrlExpiresCall buildPartial() {
Sp.RemoveUrlExpiresCall result = new Sp.RemoveUrlExpiresCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RemoveUrlExpiresCall other) {
if (other == Sp.RemoveUrlExpiresCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RemoveUrlExpiresCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RemoveUrlExpiresCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
}
static {
defaultInstance = new RemoveUrlExpiresCall(true);
defaultInstance.initFields();
}
}
public interface GetUrlInfoCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasPassword();
ByteString getPassword();
}
public static final class GetUrlInfoCall extends
GeneratedMessageLite implements
GetUrlInfoCallOrBuilder {
private GetUrlInfoCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUrlInfoCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUrlInfoCall defaultInstance;
public static GetUrlInfoCall getDefaultInstance() {
return defaultInstance;
}
public GetUrlInfoCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUrlInfoCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
password_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUrlInfoCall> PARSER =
new AbstractParser<GetUrlInfoCall>() {
public GetUrlInfoCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUrlInfoCall(input, er);
}
};
@Override
public Parser<GetUrlInfoCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int PASSWORD_FIELD_NUMBER = 2;
private ByteString password_;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
private void initFields() {
key_ = "";
password_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, password_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, password_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUrlInfoCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUrlInfoCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUrlInfoCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUrlInfoCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUrlInfoCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUrlInfoCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUrlInfoCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUrlInfoCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUrlInfoCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUrlInfoCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUrlInfoCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUrlInfoCall, Builder>
implements
Sp.GetUrlInfoCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
password_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUrlInfoCall getDefaultInstanceForType() {
return Sp.GetUrlInfoCall.getDefaultInstance();
}
public Sp.GetUrlInfoCall build() {
Sp.GetUrlInfoCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUrlInfoCall buildPartial() {
Sp.GetUrlInfoCall result = new Sp.GetUrlInfoCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.password_ = password_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUrlInfoCall other) {
if (other == Sp.GetUrlInfoCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasPassword()) {
setPassword(other.getPassword());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUrlInfoCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUrlInfoCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private ByteString password_ = ByteString.EMPTY;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
public Builder setPassword(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
password_ = value;
return this;
}
public Builder clearPassword() {
b0_ = (b0_ & ~0x00000002);
password_ = getDefaultInstance().getPassword();
return this;
}
}
static {
defaultInstance = new GetUrlInfoCall(true);
defaultInstance.initFields();
}
}
public interface GetUrlInfoReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasUrlInfo();
Sp.PBRestObjectUrl getUrlInfo();
}
public static final class GetUrlInfoReply extends
GeneratedMessageLite implements
GetUrlInfoReplyOrBuilder {
private GetUrlInfoReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetUrlInfoReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetUrlInfoReply defaultInstance;
public static GetUrlInfoReply getDefaultInstance() {
return defaultInstance;
}
public GetUrlInfoReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetUrlInfoReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBRestObjectUrl.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = urlInfo_.toBuilder();
}
urlInfo_ = input.readMessage(Sp.PBRestObjectUrl.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(urlInfo_);
urlInfo_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetUrlInfoReply> PARSER =
new AbstractParser<GetUrlInfoReply>() {
public GetUrlInfoReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetUrlInfoReply(input, er);
}
};
@Override
public Parser<GetUrlInfoReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int URL_INFO_FIELD_NUMBER = 1;
private Sp.PBRestObjectUrl urlInfo_;
public boolean hasUrlInfo() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBRestObjectUrl getUrlInfo() {
return urlInfo_;
}
private void initFields() {
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUrlInfo()) {
mii = 0;
return false;
}
if (!getUrlInfo().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, urlInfo_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, urlInfo_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetUrlInfoReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUrlInfoReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUrlInfoReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetUrlInfoReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetUrlInfoReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUrlInfoReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetUrlInfoReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetUrlInfoReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetUrlInfoReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetUrlInfoReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetUrlInfoReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetUrlInfoReply, Builder>
implements
Sp.GetUrlInfoReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetUrlInfoReply getDefaultInstanceForType() {
return Sp.GetUrlInfoReply.getDefaultInstance();
}
public Sp.GetUrlInfoReply build() {
Sp.GetUrlInfoReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetUrlInfoReply buildPartial() {
Sp.GetUrlInfoReply result = new Sp.GetUrlInfoReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.urlInfo_ = urlInfo_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetUrlInfoReply other) {
if (other == Sp.GetUrlInfoReply.getDefaultInstance()) return this;
if (other.hasUrlInfo()) {
mergeUrlInfo(other.getUrlInfo());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUrlInfo()) {
return false;
}
if (!getUrlInfo().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetUrlInfoReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetUrlInfoReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBRestObjectUrl urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
public boolean hasUrlInfo() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBRestObjectUrl getUrlInfo() {
return urlInfo_;
}
public Builder setUrlInfo(Sp.PBRestObjectUrl value) {
if (value == null) {
throw new NullPointerException();
}
urlInfo_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setUrlInfo(
Sp.PBRestObjectUrl.Builder bdForValue) {
urlInfo_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeUrlInfo(Sp.PBRestObjectUrl value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
urlInfo_ != Sp.PBRestObjectUrl.getDefaultInstance()) {
urlInfo_ =
Sp.PBRestObjectUrl.newBuilder(urlInfo_).mergeFrom(value).buildPartial();
} else {
urlInfo_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearUrlInfo() {
urlInfo_ = Sp.PBRestObjectUrl.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
}
static {
defaultInstance = new GetUrlInfoReply(true);
defaultInstance.initFields();
}
}
public interface RemoveUrlCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
}
public static final class RemoveUrlCall extends
GeneratedMessageLite implements
RemoveUrlCallOrBuilder {
private RemoveUrlCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RemoveUrlCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RemoveUrlCall defaultInstance;
public static RemoveUrlCall getDefaultInstance() {
return defaultInstance;
}
public RemoveUrlCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RemoveUrlCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RemoveUrlCall> PARSER =
new AbstractParser<RemoveUrlCall>() {
public RemoveUrlCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RemoveUrlCall(input, er);
}
};
@Override
public Parser<RemoveUrlCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
key_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RemoveUrlCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RemoveUrlCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RemoveUrlCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RemoveUrlCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RemoveUrlCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RemoveUrlCall, Builder>
implements
Sp.RemoveUrlCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RemoveUrlCall getDefaultInstanceForType() {
return Sp.RemoveUrlCall.getDefaultInstance();
}
public Sp.RemoveUrlCall build() {
Sp.RemoveUrlCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RemoveUrlCall buildPartial() {
Sp.RemoveUrlCall result = new Sp.RemoveUrlCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RemoveUrlCall other) {
if (other == Sp.RemoveUrlCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RemoveUrlCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RemoveUrlCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
}
static {
defaultInstance = new RemoveUrlCall(true);
defaultInstance.initFields();
}
}
public interface SetUrlPasswordCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasPassword();
ByteString getPassword();
}
public static final class SetUrlPasswordCall extends
GeneratedMessageLite implements
SetUrlPasswordCallOrBuilder {
private SetUrlPasswordCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUrlPasswordCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUrlPasswordCall defaultInstance;
public static SetUrlPasswordCall getDefaultInstance() {
return defaultInstance;
}
public SetUrlPasswordCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUrlPasswordCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
password_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUrlPasswordCall> PARSER =
new AbstractParser<SetUrlPasswordCall>() {
public SetUrlPasswordCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUrlPasswordCall(input, er);
}
};
@Override
public Parser<SetUrlPasswordCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int PASSWORD_FIELD_NUMBER = 2;
private ByteString password_;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
private void initFields() {
key_ = "";
password_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
if (!hasPassword()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, password_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, password_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUrlPasswordCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlPasswordCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlPasswordCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlPasswordCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlPasswordCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlPasswordCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUrlPasswordCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUrlPasswordCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUrlPasswordCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlPasswordCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUrlPasswordCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUrlPasswordCall, Builder>
implements
Sp.SetUrlPasswordCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
password_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUrlPasswordCall getDefaultInstanceForType() {
return Sp.SetUrlPasswordCall.getDefaultInstance();
}
public Sp.SetUrlPasswordCall build() {
Sp.SetUrlPasswordCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUrlPasswordCall buildPartial() {
Sp.SetUrlPasswordCall result = new Sp.SetUrlPasswordCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.password_ = password_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUrlPasswordCall other) {
if (other == Sp.SetUrlPasswordCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasPassword()) {
setPassword(other.getPassword());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
if (!hasPassword()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUrlPasswordCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUrlPasswordCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private ByteString password_ = ByteString.EMPTY;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
public Builder setPassword(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
password_ = value;
return this;
}
public Builder clearPassword() {
b0_ = (b0_ & ~0x00000002);
password_ = getDefaultInstance().getPassword();
return this;
}
}
static {
defaultInstance = new SetUrlPasswordCall(true);
defaultInstance.initFields();
}
}
public interface RemoveUrlPasswordCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
}
public static final class RemoveUrlPasswordCall extends
GeneratedMessageLite implements
RemoveUrlPasswordCallOrBuilder {
private RemoveUrlPasswordCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RemoveUrlPasswordCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RemoveUrlPasswordCall defaultInstance;
public static RemoveUrlPasswordCall getDefaultInstance() {
return defaultInstance;
}
public RemoveUrlPasswordCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RemoveUrlPasswordCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RemoveUrlPasswordCall> PARSER =
new AbstractParser<RemoveUrlPasswordCall>() {
public RemoveUrlPasswordCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RemoveUrlPasswordCall(input, er);
}
};
@Override
public Parser<RemoveUrlPasswordCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
key_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RemoveUrlPasswordCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlPasswordCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlPasswordCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveUrlPasswordCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveUrlPasswordCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlPasswordCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RemoveUrlPasswordCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RemoveUrlPasswordCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RemoveUrlPasswordCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveUrlPasswordCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RemoveUrlPasswordCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RemoveUrlPasswordCall, Builder>
implements
Sp.RemoveUrlPasswordCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RemoveUrlPasswordCall getDefaultInstanceForType() {
return Sp.RemoveUrlPasswordCall.getDefaultInstance();
}
public Sp.RemoveUrlPasswordCall build() {
Sp.RemoveUrlPasswordCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RemoveUrlPasswordCall buildPartial() {
Sp.RemoveUrlPasswordCall result = new Sp.RemoveUrlPasswordCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RemoveUrlPasswordCall other) {
if (other == Sp.RemoveUrlPasswordCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RemoveUrlPasswordCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RemoveUrlPasswordCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
}
static {
defaultInstance = new RemoveUrlPasswordCall(true);
defaultInstance.initFields();
}
}
public interface ValidateUrlPasswordCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasPassword();
ByteString getPassword();
}
public static final class ValidateUrlPasswordCall extends
GeneratedMessageLite implements
ValidateUrlPasswordCallOrBuilder {
private ValidateUrlPasswordCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ValidateUrlPasswordCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ValidateUrlPasswordCall defaultInstance;
public static ValidateUrlPasswordCall getDefaultInstance() {
return defaultInstance;
}
public ValidateUrlPasswordCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ValidateUrlPasswordCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 18: {
b0_ |= 0x00000002;
password_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ValidateUrlPasswordCall> PARSER =
new AbstractParser<ValidateUrlPasswordCall>() {
public ValidateUrlPasswordCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ValidateUrlPasswordCall(input, er);
}
};
@Override
public Parser<ValidateUrlPasswordCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int PASSWORD_FIELD_NUMBER = 2;
private ByteString password_;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
private void initFields() {
key_ = "";
password_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
if (!hasPassword()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, password_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, password_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ValidateUrlPasswordCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ValidateUrlPasswordCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ValidateUrlPasswordCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ValidateUrlPasswordCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ValidateUrlPasswordCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ValidateUrlPasswordCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ValidateUrlPasswordCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ValidateUrlPasswordCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ValidateUrlPasswordCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ValidateUrlPasswordCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ValidateUrlPasswordCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ValidateUrlPasswordCall, Builder>
implements
Sp.ValidateUrlPasswordCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
password_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ValidateUrlPasswordCall getDefaultInstanceForType() {
return Sp.ValidateUrlPasswordCall.getDefaultInstance();
}
public Sp.ValidateUrlPasswordCall build() {
Sp.ValidateUrlPasswordCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ValidateUrlPasswordCall buildPartial() {
Sp.ValidateUrlPasswordCall result = new Sp.ValidateUrlPasswordCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.password_ = password_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ValidateUrlPasswordCall other) {
if (other == Sp.ValidateUrlPasswordCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasPassword()) {
setPassword(other.getPassword());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
if (!hasPassword()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ValidateUrlPasswordCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ValidateUrlPasswordCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private ByteString password_ = ByteString.EMPTY;
public boolean hasPassword() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getPassword() {
return password_;
}
public Builder setPassword(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
password_ = value;
return this;
}
public Builder clearPassword() {
b0_ = (b0_ & ~0x00000002);
password_ = getDefaultInstance().getPassword();
return this;
}
}
static {
defaultInstance = new ValidateUrlPasswordCall(true);
defaultInstance.initFields();
}
}
public interface DestroySharedFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSharedId();
ByteString getSharedId();
}
public static final class DestroySharedFolderCall extends
GeneratedMessageLite implements
DestroySharedFolderCallOrBuilder {
private DestroySharedFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DestroySharedFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DestroySharedFolderCall defaultInstance;
public static DestroySharedFolderCall getDefaultInstance() {
return defaultInstance;
}
public DestroySharedFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DestroySharedFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sharedId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DestroySharedFolderCall> PARSER =
new AbstractParser<DestroySharedFolderCall>() {
public DestroySharedFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DestroySharedFolderCall(input, er);
}
};
@Override
public Parser<DestroySharedFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_ID_FIELD_NUMBER = 1;
private ByteString sharedId_;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
private void initFields() {
sharedId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSharedId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sharedId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sharedId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DestroySharedFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DestroySharedFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DestroySharedFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DestroySharedFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DestroySharedFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DestroySharedFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DestroySharedFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DestroySharedFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DestroySharedFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DestroySharedFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DestroySharedFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DestroySharedFolderCall, Builder>
implements
Sp.DestroySharedFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DestroySharedFolderCall getDefaultInstanceForType() {
return Sp.DestroySharedFolderCall.getDefaultInstance();
}
public Sp.DestroySharedFolderCall build() {
Sp.DestroySharedFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DestroySharedFolderCall buildPartial() {
Sp.DestroySharedFolderCall result = new Sp.DestroySharedFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sharedId_ = sharedId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DestroySharedFolderCall other) {
if (other == Sp.DestroySharedFolderCall.getDefaultInstance()) return this;
if (other.hasSharedId()) {
setSharedId(other.getSharedId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSharedId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DestroySharedFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DestroySharedFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sharedId_ = ByteString.EMPTY;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public Builder setSharedId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sharedId_ = value;
return this;
}
public Builder clearSharedId() {
b0_ = (b0_ & ~0x00000001);
sharedId_ = getDefaultInstance().getSharedId();
return this;
}
}
static {
defaultInstance = new DestroySharedFolderCall(true);
defaultInstance.initFields();
}
}
public interface SendPriorityDefectEmailCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasDefectId();
String getDefectId();
ByteString
getDefectIdBytes();
boolean hasContactEmail();
String getContactEmail();
ByteString
getContactEmailBytes();
boolean hasSubject();
String getSubject();
ByteString
getSubjectBytes();
boolean hasMessage();
String getMessage();
ByteString
getMessageBytes();
}
public static final class SendPriorityDefectEmailCall extends
GeneratedMessageLite implements
SendPriorityDefectEmailCallOrBuilder {
private SendPriorityDefectEmailCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SendPriorityDefectEmailCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SendPriorityDefectEmailCall defaultInstance;
public static SendPriorityDefectEmailCall getDefaultInstance() {
return defaultInstance;
}
public SendPriorityDefectEmailCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SendPriorityDefectEmailCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
defectId_ = bs;
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
contactEmail_ = bs;
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
subject_ = bs;
break;
}
case 34: {
ByteString bs = input.readBytes();
b0_ |= 0x00000008;
message_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SendPriorityDefectEmailCall> PARSER =
new AbstractParser<SendPriorityDefectEmailCall>() {
public SendPriorityDefectEmailCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SendPriorityDefectEmailCall(input, er);
}
};
@Override
public Parser<SendPriorityDefectEmailCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int DEFECT_ID_FIELD_NUMBER = 1;
private Object defectId_;
public boolean hasDefectId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getDefectId() {
Object ref = defectId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
defectId_ = s;
}
return s;
}
}
public ByteString
getDefectIdBytes() {
Object ref = defectId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
defectId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int CONTACT_EMAIL_FIELD_NUMBER = 2;
private Object contactEmail_;
public boolean hasContactEmail() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getContactEmail() {
Object ref = contactEmail_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
contactEmail_ = s;
}
return s;
}
}
public ByteString
getContactEmailBytes() {
Object ref = contactEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
contactEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int SUBJECT_FIELD_NUMBER = 3;
private Object subject_;
public boolean hasSubject() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSubject() {
Object ref = subject_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int MESSAGE_FIELD_NUMBER = 4;
private Object message_;
public boolean hasMessage() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getMessage() {
Object ref = message_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
message_ = s;
}
return s;
}
}
public ByteString
getMessageBytes() {
Object ref = message_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
message_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
defectId_ = "";
contactEmail_ = "";
subject_ = "";
message_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasDefectId()) {
mii = 0;
return false;
}
if (!hasContactEmail()) {
mii = 0;
return false;
}
if (!hasSubject()) {
mii = 0;
return false;
}
if (!hasMessage()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getDefectIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getContactEmailBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getSubjectBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
output.writeBytes(4, getMessageBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getDefectIdBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getContactEmailBytes());
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getSubjectBytes());
}
if (((b0_ & 0x00000008) == 0x00000008)) {
size += CodedOutputStream
.computeBytesSize(4, getMessageBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SendPriorityDefectEmailCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SendPriorityDefectEmailCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SendPriorityDefectEmailCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SendPriorityDefectEmailCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SendPriorityDefectEmailCall, Builder>
implements
Sp.SendPriorityDefectEmailCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
defectId_ = "";
b0_ = (b0_ & ~0x00000001);
contactEmail_ = "";
b0_ = (b0_ & ~0x00000002);
subject_ = "";
b0_ = (b0_ & ~0x00000004);
message_ = "";
b0_ = (b0_ & ~0x00000008);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SendPriorityDefectEmailCall getDefaultInstanceForType() {
return Sp.SendPriorityDefectEmailCall.getDefaultInstance();
}
public Sp.SendPriorityDefectEmailCall build() {
Sp.SendPriorityDefectEmailCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SendPriorityDefectEmailCall buildPartial() {
Sp.SendPriorityDefectEmailCall result = new Sp.SendPriorityDefectEmailCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.defectId_ = defectId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.contactEmail_ = contactEmail_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.subject_ = subject_;
if (((from_b0_ & 0x00000008) == 0x00000008)) {
to_b0_ |= 0x00000008;
}
result.message_ = message_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SendPriorityDefectEmailCall other) {
if (other == Sp.SendPriorityDefectEmailCall.getDefaultInstance()) return this;
if (other.hasDefectId()) {
b0_ |= 0x00000001;
defectId_ = other.defectId_;
}
if (other.hasContactEmail()) {
b0_ |= 0x00000002;
contactEmail_ = other.contactEmail_;
}
if (other.hasSubject()) {
b0_ |= 0x00000004;
subject_ = other.subject_;
}
if (other.hasMessage()) {
b0_ |= 0x00000008;
message_ = other.message_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasDefectId()) {
return false;
}
if (!hasContactEmail()) {
return false;
}
if (!hasSubject()) {
return false;
}
if (!hasMessage()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SendPriorityDefectEmailCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SendPriorityDefectEmailCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object defectId_ = "";
public boolean hasDefectId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getDefectId() {
Object ref = defectId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
defectId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getDefectIdBytes() {
Object ref = defectId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
defectId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setDefectId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
defectId_ = value;
return this;
}
public Builder clearDefectId() {
b0_ = (b0_ & ~0x00000001);
defectId_ = getDefaultInstance().getDefectId();
return this;
}
public Builder setDefectIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
defectId_ = value;
return this;
}
private Object contactEmail_ = "";
public boolean hasContactEmail() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getContactEmail() {
Object ref = contactEmail_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
contactEmail_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getContactEmailBytes() {
Object ref = contactEmail_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
contactEmail_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setContactEmail(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
contactEmail_ = value;
return this;
}
public Builder clearContactEmail() {
b0_ = (b0_ & ~0x00000002);
contactEmail_ = getDefaultInstance().getContactEmail();
return this;
}
public Builder setContactEmailBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
contactEmail_ = value;
return this;
}
private Object subject_ = "";
public boolean hasSubject() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSubject() {
Object ref = subject_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
subject_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSubjectBytes() {
Object ref = subject_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
subject_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSubject(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
subject_ = value;
return this;
}
public Builder clearSubject() {
b0_ = (b0_ & ~0x00000004);
subject_ = getDefaultInstance().getSubject();
return this;
}
public Builder setSubjectBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
subject_ = value;
return this;
}
private Object message_ = "";
public boolean hasMessage() {
return ((b0_ & 0x00000008) == 0x00000008);
}
public String getMessage() {
Object ref = message_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
message_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getMessageBytes() {
Object ref = message_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
message_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setMessage(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
message_ = value;
return this;
}
public Builder clearMessage() {
b0_ = (b0_ & ~0x00000008);
message_ = getDefaultInstance().getMessage();
return this;
}
public Builder setMessageBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000008;
message_ = value;
return this;
}
}
static {
defaultInstance = new SendPriorityDefectEmailCall(true);
defaultInstance.initFields();
}
}
public interface SetupTwoFactorCallOrBuilder extends
MessageLiteOrBuilder {
}
public static final class SetupTwoFactorCall extends
GeneratedMessageLite implements
SetupTwoFactorCallOrBuilder {
private SetupTwoFactorCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetupTwoFactorCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetupTwoFactorCall defaultInstance;
public static SetupTwoFactorCall getDefaultInstance() {
return defaultInstance;
}
public SetupTwoFactorCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetupTwoFactorCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetupTwoFactorCall> PARSER =
new AbstractParser<SetupTwoFactorCall>() {
public SetupTwoFactorCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetupTwoFactorCall(input, er);
}
};
@Override
public Parser<SetupTwoFactorCall> getParserForType() {
return PARSER;
}
private void initFields() {
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetupTwoFactorCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetupTwoFactorCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetupTwoFactorCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetupTwoFactorCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetupTwoFactorCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetupTwoFactorCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetupTwoFactorCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetupTwoFactorCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetupTwoFactorCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetupTwoFactorCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetupTwoFactorCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetupTwoFactorCall, Builder>
implements
Sp.SetupTwoFactorCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetupTwoFactorCall getDefaultInstanceForType() {
return Sp.SetupTwoFactorCall.getDefaultInstance();
}
public Sp.SetupTwoFactorCall build() {
Sp.SetupTwoFactorCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetupTwoFactorCall buildPartial() {
Sp.SetupTwoFactorCall result = new Sp.SetupTwoFactorCall(this);
return result;
}
public Builder mergeFrom(Sp.SetupTwoFactorCall other) {
if (other == Sp.SetupTwoFactorCall.getDefaultInstance()) return this;
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetupTwoFactorCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetupTwoFactorCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
}
static {
defaultInstance = new SetupTwoFactorCall(true);
defaultInstance.initFields();
}
}
public interface SetupTwoFactorReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasSecret();
ByteString getSecret();
}
public static final class SetupTwoFactorReply extends
GeneratedMessageLite implements
SetupTwoFactorReplyOrBuilder {
private SetupTwoFactorReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetupTwoFactorReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetupTwoFactorReply defaultInstance;
public static SetupTwoFactorReply getDefaultInstance() {
return defaultInstance;
}
public SetupTwoFactorReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetupTwoFactorReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
secret_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetupTwoFactorReply> PARSER =
new AbstractParser<SetupTwoFactorReply>() {
public SetupTwoFactorReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetupTwoFactorReply(input, er);
}
};
@Override
public Parser<SetupTwoFactorReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SECRET_FIELD_NUMBER = 1;
private ByteString secret_;
public boolean hasSecret() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSecret() {
return secret_;
}
private void initFields() {
secret_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSecret()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, secret_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, secret_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetupTwoFactorReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetupTwoFactorReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetupTwoFactorReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetupTwoFactorReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetupTwoFactorReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetupTwoFactorReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetupTwoFactorReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetupTwoFactorReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetupTwoFactorReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetupTwoFactorReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetupTwoFactorReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetupTwoFactorReply, Builder>
implements
Sp.SetupTwoFactorReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
secret_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetupTwoFactorReply getDefaultInstanceForType() {
return Sp.SetupTwoFactorReply.getDefaultInstance();
}
public Sp.SetupTwoFactorReply build() {
Sp.SetupTwoFactorReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetupTwoFactorReply buildPartial() {
Sp.SetupTwoFactorReply result = new Sp.SetupTwoFactorReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.secret_ = secret_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetupTwoFactorReply other) {
if (other == Sp.SetupTwoFactorReply.getDefaultInstance()) return this;
if (other.hasSecret()) {
setSecret(other.getSecret());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSecret()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetupTwoFactorReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetupTwoFactorReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString secret_ = ByteString.EMPTY;
public boolean hasSecret() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSecret() {
return secret_;
}
public Builder setSecret(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
secret_ = value;
return this;
}
public Builder clearSecret() {
b0_ = (b0_ & ~0x00000001);
secret_ = getDefaultInstance().getSecret();
return this;
}
}
static {
defaultInstance = new SetupTwoFactorReply(true);
defaultInstance.initFields();
}
}
public interface SetTwoFactorEnforcementCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasEnforce();
boolean getEnforce();
boolean hasCurrentCode();
int getCurrentCode();
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
}
public static final class SetTwoFactorEnforcementCall extends
GeneratedMessageLite implements
SetTwoFactorEnforcementCallOrBuilder {
private SetTwoFactorEnforcementCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetTwoFactorEnforcementCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetTwoFactorEnforcementCall defaultInstance;
public static SetTwoFactorEnforcementCall getDefaultInstance() {
return defaultInstance;
}
public SetTwoFactorEnforcementCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetTwoFactorEnforcementCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
enforce_ = input.readBool();
break;
}
case 16: {
b0_ |= 0x00000002;
currentCode_ = input.readInt32();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
userId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetTwoFactorEnforcementCall> PARSER =
new AbstractParser<SetTwoFactorEnforcementCall>() {
public SetTwoFactorEnforcementCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetTwoFactorEnforcementCall(input, er);
}
};
@Override
public Parser<SetTwoFactorEnforcementCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int ENFORCE_FIELD_NUMBER = 1;
private boolean enforce_;
public boolean hasEnforce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getEnforce() {
return enforce_;
}
public static final int CURRENT_CODE_FIELD_NUMBER = 2;
private int currentCode_;
public boolean hasCurrentCode() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getCurrentCode() {
return currentCode_;
}
public static final int USER_ID_FIELD_NUMBER = 3;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
enforce_ = false;
currentCode_ = 0;
userId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasEnforce()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBool(1, enforce_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeInt32(2, currentCode_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getUserIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBoolSize(1, enforce_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeInt32Size(2, currentCode_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getUserIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetTwoFactorEnforcementCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetTwoFactorEnforcementCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetTwoFactorEnforcementCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetTwoFactorEnforcementCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetTwoFactorEnforcementCall, Builder>
implements
Sp.SetTwoFactorEnforcementCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
enforce_ = false;
b0_ = (b0_ & ~0x00000001);
currentCode_ = 0;
b0_ = (b0_ & ~0x00000002);
userId_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetTwoFactorEnforcementCall getDefaultInstanceForType() {
return Sp.SetTwoFactorEnforcementCall.getDefaultInstance();
}
public Sp.SetTwoFactorEnforcementCall build() {
Sp.SetTwoFactorEnforcementCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetTwoFactorEnforcementCall buildPartial() {
Sp.SetTwoFactorEnforcementCall result = new Sp.SetTwoFactorEnforcementCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.enforce_ = enforce_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.currentCode_ = currentCode_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.userId_ = userId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetTwoFactorEnforcementCall other) {
if (other == Sp.SetTwoFactorEnforcementCall.getDefaultInstance()) return this;
if (other.hasEnforce()) {
setEnforce(other.getEnforce());
}
if (other.hasCurrentCode()) {
setCurrentCode(other.getCurrentCode());
}
if (other.hasUserId()) {
b0_ |= 0x00000004;
userId_ = other.userId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasEnforce()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetTwoFactorEnforcementCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetTwoFactorEnforcementCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private boolean enforce_ ;
public boolean hasEnforce() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public boolean getEnforce() {
return enforce_;
}
public Builder setEnforce(boolean value) {
b0_ |= 0x00000001;
enforce_ = value;
return this;
}
public Builder clearEnforce() {
b0_ = (b0_ & ~0x00000001);
enforce_ = false;
return this;
}
private int currentCode_ ;
public boolean hasCurrentCode() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getCurrentCode() {
return currentCode_;
}
public Builder setCurrentCode(int value) {
b0_ |= 0x00000002;
currentCode_ = value;
return this;
}
public Builder clearCurrentCode() {
b0_ = (b0_ & ~0x00000002);
currentCode_ = 0;
return this;
}
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000004);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
userId_ = value;
return this;
}
}
static {
defaultInstance = new SetTwoFactorEnforcementCall(true);
defaultInstance.initFields();
}
}
public interface ListUrlsForStoreCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasSharedId();
ByteString getSharedId();
}
public static final class ListUrlsForStoreCall extends
GeneratedMessageLite implements
ListUrlsForStoreCallOrBuilder {
private ListUrlsForStoreCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUrlsForStoreCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUrlsForStoreCall defaultInstance;
public static ListUrlsForStoreCall getDefaultInstance() {
return defaultInstance;
}
public ListUrlsForStoreCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUrlsForStoreCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
b0_ |= 0x00000001;
sharedId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUrlsForStoreCall> PARSER =
new AbstractParser<ListUrlsForStoreCall>() {
public ListUrlsForStoreCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUrlsForStoreCall(input, er);
}
};
@Override
public Parser<ListUrlsForStoreCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int SHARED_ID_FIELD_NUMBER = 1;
private ByteString sharedId_;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
private void initFields() {
sharedId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasSharedId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, sharedId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, sharedId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUrlsForStoreCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUrlsForStoreCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUrlsForStoreCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUrlsForStoreCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUrlsForStoreCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUrlsForStoreCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUrlsForStoreCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUrlsForStoreCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUrlsForStoreCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUrlsForStoreCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUrlsForStoreCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUrlsForStoreCall, Builder>
implements
Sp.ListUrlsForStoreCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
sharedId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUrlsForStoreCall getDefaultInstanceForType() {
return Sp.ListUrlsForStoreCall.getDefaultInstance();
}
public Sp.ListUrlsForStoreCall build() {
Sp.ListUrlsForStoreCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUrlsForStoreCall buildPartial() {
Sp.ListUrlsForStoreCall result = new Sp.ListUrlsForStoreCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.sharedId_ = sharedId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListUrlsForStoreCall other) {
if (other == Sp.ListUrlsForStoreCall.getDefaultInstance()) return this;
if (other.hasSharedId()) {
setSharedId(other.getSharedId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasSharedId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUrlsForStoreCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUrlsForStoreCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private ByteString sharedId_ = ByteString.EMPTY;
public boolean hasSharedId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public ByteString getSharedId() {
return sharedId_;
}
public Builder setSharedId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
sharedId_ = value;
return this;
}
public Builder clearSharedId() {
b0_ = (b0_ & ~0x00000001);
sharedId_ = getDefaultInstance().getSharedId();
return this;
}
}
static {
defaultInstance = new ListUrlsForStoreCall(true);
defaultInstance.initFields();
}
}
public interface ListUrlsForStoreReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBRestObjectUrl> 
getUrlList();
Sp.PBRestObjectUrl getUrl(int index);
int getUrlCount();
}
public static final class ListUrlsForStoreReply extends
GeneratedMessageLite implements
ListUrlsForStoreReplyOrBuilder {
private ListUrlsForStoreReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUrlsForStoreReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUrlsForStoreReply defaultInstance;
public static ListUrlsForStoreReply getDefaultInstance() {
return defaultInstance;
}
public ListUrlsForStoreReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUrlsForStoreReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
url_ = new ArrayList<Sp.PBRestObjectUrl>();
mutable_b0_ |= 0x00000001;
}
url_.add(input.readMessage(Sp.PBRestObjectUrl.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
url_ = Collections.unmodifiableList(url_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUrlsForStoreReply> PARSER =
new AbstractParser<ListUrlsForStoreReply>() {
public ListUrlsForStoreReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUrlsForStoreReply(input, er);
}
};
@Override
public Parser<ListUrlsForStoreReply> getParserForType() {
return PARSER;
}
public static final int URL_FIELD_NUMBER = 1;
private List<Sp.PBRestObjectUrl> url_;
public List<Sp.PBRestObjectUrl> getUrlList() {
return url_;
}
public List<? extends Sp.PBRestObjectUrlOrBuilder> 
getUrlOrBuilderList() {
return url_;
}
public int getUrlCount() {
return url_.size();
}
public Sp.PBRestObjectUrl getUrl(int index) {
return url_.get(index);
}
public Sp.PBRestObjectUrlOrBuilder getUrlOrBuilder(
int index) {
return url_.get(index);
}
private void initFields() {
url_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getUrlCount(); i++) {
if (!getUrl(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < url_.size(); i++) {
output.writeMessage(1, url_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < url_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, url_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUrlsForStoreReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUrlsForStoreReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUrlsForStoreReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUrlsForStoreReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUrlsForStoreReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUrlsForStoreReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUrlsForStoreReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUrlsForStoreReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUrlsForStoreReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUrlsForStoreReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUrlsForStoreReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUrlsForStoreReply, Builder>
implements
Sp.ListUrlsForStoreReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
url_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUrlsForStoreReply getDefaultInstanceForType() {
return Sp.ListUrlsForStoreReply.getDefaultInstance();
}
public Sp.ListUrlsForStoreReply build() {
Sp.ListUrlsForStoreReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUrlsForStoreReply buildPartial() {
Sp.ListUrlsForStoreReply result = new Sp.ListUrlsForStoreReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
url_ = Collections.unmodifiableList(url_);
b0_ = (b0_ & ~0x00000001);
}
result.url_ = url_;
return result;
}
public Builder mergeFrom(Sp.ListUrlsForStoreReply other) {
if (other == Sp.ListUrlsForStoreReply.getDefaultInstance()) return this;
if (!other.url_.isEmpty()) {
if (url_.isEmpty()) {
url_ = other.url_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUrlIsMutable();
url_.addAll(other.url_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getUrlCount(); i++) {
if (!getUrl(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUrlsForStoreReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUrlsForStoreReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBRestObjectUrl> url_ =
Collections.emptyList();
private void ensureUrlIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
url_ = new ArrayList<Sp.PBRestObjectUrl>(url_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBRestObjectUrl> getUrlList() {
return Collections.unmodifiableList(url_);
}
public int getUrlCount() {
return url_.size();
}
public Sp.PBRestObjectUrl getUrl(int index) {
return url_.get(index);
}
public Builder setUrl(
int index, Sp.PBRestObjectUrl value) {
if (value == null) {
throw new NullPointerException();
}
ensureUrlIsMutable();
url_.set(index, value);
return this;
}
public Builder setUrl(
int index, Sp.PBRestObjectUrl.Builder bdForValue) {
ensureUrlIsMutable();
url_.set(index, bdForValue.build());
return this;
}
public Builder addUrl(Sp.PBRestObjectUrl value) {
if (value == null) {
throw new NullPointerException();
}
ensureUrlIsMutable();
url_.add(value);
return this;
}
public Builder addUrl(
int index, Sp.PBRestObjectUrl value) {
if (value == null) {
throw new NullPointerException();
}
ensureUrlIsMutable();
url_.add(index, value);
return this;
}
public Builder addUrl(
Sp.PBRestObjectUrl.Builder bdForValue) {
ensureUrlIsMutable();
url_.add(bdForValue.build());
return this;
}
public Builder addUrl(
int index, Sp.PBRestObjectUrl.Builder bdForValue) {
ensureUrlIsMutable();
url_.add(index, bdForValue.build());
return this;
}
public Builder addAllUrl(
Iterable<? extends Sp.PBRestObjectUrl> values) {
ensureUrlIsMutable();
AbstractMessageLite.Builder.addAll(
values, url_);
return this;
}
public Builder clearUrl() {
url_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeUrl(int index) {
ensureUrlIsMutable();
url_.remove(index);
return this;
}
}
static {
defaultInstance = new ListUrlsForStoreReply(true);
defaultInstance.initFields();
}
}
public interface ProvideSecondFactorCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasCurrentCode();
int getCurrentCode();
}
public static final class ProvideSecondFactorCall extends
GeneratedMessageLite implements
ProvideSecondFactorCallOrBuilder {
private ProvideSecondFactorCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ProvideSecondFactorCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ProvideSecondFactorCall defaultInstance;
public static ProvideSecondFactorCall getDefaultInstance() {
return defaultInstance;
}
public ProvideSecondFactorCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ProvideSecondFactorCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
currentCode_ = input.readInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ProvideSecondFactorCall> PARSER =
new AbstractParser<ProvideSecondFactorCall>() {
public ProvideSecondFactorCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ProvideSecondFactorCall(input, er);
}
};
@Override
public Parser<ProvideSecondFactorCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CURRENT_CODE_FIELD_NUMBER = 1;
private int currentCode_;
public boolean hasCurrentCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getCurrentCode() {
return currentCode_;
}
private void initFields() {
currentCode_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCurrentCode()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeInt32(1, currentCode_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeInt32Size(1, currentCode_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ProvideSecondFactorCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ProvideSecondFactorCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ProvideSecondFactorCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ProvideSecondFactorCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ProvideSecondFactorCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ProvideSecondFactorCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ProvideSecondFactorCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ProvideSecondFactorCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ProvideSecondFactorCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ProvideSecondFactorCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ProvideSecondFactorCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ProvideSecondFactorCall, Builder>
implements
Sp.ProvideSecondFactorCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
currentCode_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ProvideSecondFactorCall getDefaultInstanceForType() {
return Sp.ProvideSecondFactorCall.getDefaultInstance();
}
public Sp.ProvideSecondFactorCall build() {
Sp.ProvideSecondFactorCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ProvideSecondFactorCall buildPartial() {
Sp.ProvideSecondFactorCall result = new Sp.ProvideSecondFactorCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.currentCode_ = currentCode_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ProvideSecondFactorCall other) {
if (other == Sp.ProvideSecondFactorCall.getDefaultInstance()) return this;
if (other.hasCurrentCode()) {
setCurrentCode(other.getCurrentCode());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCurrentCode()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ProvideSecondFactorCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ProvideSecondFactorCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int currentCode_ ;
public boolean hasCurrentCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getCurrentCode() {
return currentCode_;
}
public Builder setCurrentCode(int value) {
b0_ |= 0x00000001;
currentCode_ = value;
return this;
}
public Builder clearCurrentCode() {
b0_ = (b0_ & ~0x00000001);
currentCode_ = 0;
return this;
}
}
static {
defaultInstance = new ProvideSecondFactorCall(true);
defaultInstance.initFields();
}
}
public interface ProvideBackupCodeCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasBackupCode();
String getBackupCode();
ByteString
getBackupCodeBytes();
}
public static final class ProvideBackupCodeCall extends
GeneratedMessageLite implements
ProvideBackupCodeCallOrBuilder {
private ProvideBackupCodeCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ProvideBackupCodeCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ProvideBackupCodeCall defaultInstance;
public static ProvideBackupCodeCall getDefaultInstance() {
return defaultInstance;
}
public ProvideBackupCodeCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ProvideBackupCodeCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
backupCode_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ProvideBackupCodeCall> PARSER =
new AbstractParser<ProvideBackupCodeCall>() {
public ProvideBackupCodeCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ProvideBackupCodeCall(input, er);
}
};
@Override
public Parser<ProvideBackupCodeCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int BACKUP_CODE_FIELD_NUMBER = 1;
private Object backupCode_;
public boolean hasBackupCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getBackupCode() {
Object ref = backupCode_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
backupCode_ = s;
}
return s;
}
}
public ByteString
getBackupCodeBytes() {
Object ref = backupCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
backupCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
backupCode_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasBackupCode()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getBackupCodeBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getBackupCodeBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ProvideBackupCodeCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ProvideBackupCodeCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ProvideBackupCodeCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ProvideBackupCodeCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ProvideBackupCodeCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ProvideBackupCodeCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ProvideBackupCodeCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ProvideBackupCodeCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ProvideBackupCodeCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ProvideBackupCodeCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ProvideBackupCodeCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ProvideBackupCodeCall, Builder>
implements
Sp.ProvideBackupCodeCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
backupCode_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ProvideBackupCodeCall getDefaultInstanceForType() {
return Sp.ProvideBackupCodeCall.getDefaultInstance();
}
public Sp.ProvideBackupCodeCall build() {
Sp.ProvideBackupCodeCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ProvideBackupCodeCall buildPartial() {
Sp.ProvideBackupCodeCall result = new Sp.ProvideBackupCodeCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.backupCode_ = backupCode_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ProvideBackupCodeCall other) {
if (other == Sp.ProvideBackupCodeCall.getDefaultInstance()) return this;
if (other.hasBackupCode()) {
b0_ |= 0x00000001;
backupCode_ = other.backupCode_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasBackupCode()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ProvideBackupCodeCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ProvideBackupCodeCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object backupCode_ = "";
public boolean hasBackupCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getBackupCode() {
Object ref = backupCode_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
backupCode_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getBackupCodeBytes() {
Object ref = backupCode_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
backupCode_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setBackupCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
backupCode_ = value;
return this;
}
public Builder clearBackupCode() {
b0_ = (b0_ & ~0x00000001);
backupCode_ = getDefaultInstance().getBackupCode();
return this;
}
public Builder setBackupCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
backupCode_ = value;
return this;
}
}
static {
defaultInstance = new ProvideBackupCodeCall(true);
defaultInstance.initFields();
}
}
public interface GetBackupCodesReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.GetBackupCodesReply.BackupCode> 
getCodesList();
Sp.GetBackupCodesReply.BackupCode getCodes(int index);
int getCodesCount();
}
public static final class GetBackupCodesReply extends
GeneratedMessageLite implements
GetBackupCodesReplyOrBuilder {
private GetBackupCodesReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetBackupCodesReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetBackupCodesReply defaultInstance;
public static GetBackupCodesReply getDefaultInstance() {
return defaultInstance;
}
public GetBackupCodesReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetBackupCodesReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
codes_ = new ArrayList<Sp.GetBackupCodesReply.BackupCode>();
mutable_b0_ |= 0x00000001;
}
codes_.add(input.readMessage(Sp.GetBackupCodesReply.BackupCode.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
codes_ = Collections.unmodifiableList(codes_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetBackupCodesReply> PARSER =
new AbstractParser<GetBackupCodesReply>() {
public GetBackupCodesReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetBackupCodesReply(input, er);
}
};
@Override
public Parser<GetBackupCodesReply> getParserForType() {
return PARSER;
}
public interface BackupCodeOrBuilder extends
MessageLiteOrBuilder {
boolean hasCode();
String getCode();
ByteString
getCodeBytes();
boolean hasDateUsed();
long getDateUsed();
}
public static final class BackupCode extends
GeneratedMessageLite implements
BackupCodeOrBuilder {
private BackupCode(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private BackupCode(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final BackupCode defaultInstance;
public static BackupCode getDefaultInstance() {
return defaultInstance;
}
public BackupCode getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private BackupCode(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
code_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
dateUsed_ = input.readUInt64();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<BackupCode> PARSER =
new AbstractParser<BackupCode>() {
public BackupCode parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new BackupCode(input, er);
}
};
@Override
public Parser<BackupCode> getParserForType() {
return PARSER;
}
private int b0_;
public static final int CODE_FIELD_NUMBER = 1;
private Object code_;
public boolean hasCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCode() {
Object ref = code_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
code_ = s;
}
return s;
}
}
public ByteString
getCodeBytes() {
Object ref = code_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
code_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int DATE_USED_FIELD_NUMBER = 2;
private long dateUsed_;
public boolean hasDateUsed() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getDateUsed() {
return dateUsed_;
}
private void initFields() {
code_ = "";
dateUsed_ = 0L;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCode()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt64(2, dateUsed_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getCodeBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt64Size(2, dateUsed_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetBackupCodesReply.BackupCode parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetBackupCodesReply.BackupCode parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetBackupCodesReply.BackupCode parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetBackupCodesReply.BackupCode prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetBackupCodesReply.BackupCode, Builder>
implements
Sp.GetBackupCodesReply.BackupCodeOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
code_ = "";
b0_ = (b0_ & ~0x00000001);
dateUsed_ = 0L;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetBackupCodesReply.BackupCode getDefaultInstanceForType() {
return Sp.GetBackupCodesReply.BackupCode.getDefaultInstance();
}
public Sp.GetBackupCodesReply.BackupCode build() {
Sp.GetBackupCodesReply.BackupCode result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetBackupCodesReply.BackupCode buildPartial() {
Sp.GetBackupCodesReply.BackupCode result = new Sp.GetBackupCodesReply.BackupCode(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.code_ = code_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.dateUsed_ = dateUsed_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetBackupCodesReply.BackupCode other) {
if (other == Sp.GetBackupCodesReply.BackupCode.getDefaultInstance()) return this;
if (other.hasCode()) {
b0_ |= 0x00000001;
code_ = other.code_;
}
if (other.hasDateUsed()) {
setDateUsed(other.getDateUsed());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCode()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetBackupCodesReply.BackupCode pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetBackupCodesReply.BackupCode) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object code_ = "";
public boolean hasCode() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCode() {
Object ref = code_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
code_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCodeBytes() {
Object ref = code_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
code_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCode(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
code_ = value;
return this;
}
public Builder clearCode() {
b0_ = (b0_ & ~0x00000001);
code_ = getDefaultInstance().getCode();
return this;
}
public Builder setCodeBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
code_ = value;
return this;
}
private long dateUsed_ ;
public boolean hasDateUsed() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public long getDateUsed() {
return dateUsed_;
}
public Builder setDateUsed(long value) {
b0_ |= 0x00000002;
dateUsed_ = value;
return this;
}
public Builder clearDateUsed() {
b0_ = (b0_ & ~0x00000002);
dateUsed_ = 0L;
return this;
}
}
static {
defaultInstance = new BackupCode(true);
defaultInstance.initFields();
}
}
public static final int CODES_FIELD_NUMBER = 1;
private List<Sp.GetBackupCodesReply.BackupCode> codes_;
public List<Sp.GetBackupCodesReply.BackupCode> getCodesList() {
return codes_;
}
public List<? extends Sp.GetBackupCodesReply.BackupCodeOrBuilder> 
getCodesOrBuilderList() {
return codes_;
}
public int getCodesCount() {
return codes_.size();
}
public Sp.GetBackupCodesReply.BackupCode getCodes(int index) {
return codes_.get(index);
}
public Sp.GetBackupCodesReply.BackupCodeOrBuilder getCodesOrBuilder(
int index) {
return codes_.get(index);
}
private void initFields() {
codes_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getCodesCount(); i++) {
if (!getCodes(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < codes_.size(); i++) {
output.writeMessage(1, codes_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < codes_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, codes_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetBackupCodesReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetBackupCodesReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetBackupCodesReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetBackupCodesReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetBackupCodesReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetBackupCodesReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetBackupCodesReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetBackupCodesReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetBackupCodesReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetBackupCodesReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetBackupCodesReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetBackupCodesReply, Builder>
implements
Sp.GetBackupCodesReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
codes_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetBackupCodesReply getDefaultInstanceForType() {
return Sp.GetBackupCodesReply.getDefaultInstance();
}
public Sp.GetBackupCodesReply build() {
Sp.GetBackupCodesReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetBackupCodesReply buildPartial() {
Sp.GetBackupCodesReply result = new Sp.GetBackupCodesReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
codes_ = Collections.unmodifiableList(codes_);
b0_ = (b0_ & ~0x00000001);
}
result.codes_ = codes_;
return result;
}
public Builder mergeFrom(Sp.GetBackupCodesReply other) {
if (other == Sp.GetBackupCodesReply.getDefaultInstance()) return this;
if (!other.codes_.isEmpty()) {
if (codes_.isEmpty()) {
codes_ = other.codes_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureCodesIsMutable();
codes_.addAll(other.codes_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getCodesCount(); i++) {
if (!getCodes(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetBackupCodesReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetBackupCodesReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.GetBackupCodesReply.BackupCode> codes_ =
Collections.emptyList();
private void ensureCodesIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
codes_ = new ArrayList<Sp.GetBackupCodesReply.BackupCode>(codes_);
b0_ |= 0x00000001;
}
}
public List<Sp.GetBackupCodesReply.BackupCode> getCodesList() {
return Collections.unmodifiableList(codes_);
}
public int getCodesCount() {
return codes_.size();
}
public Sp.GetBackupCodesReply.BackupCode getCodes(int index) {
return codes_.get(index);
}
public Builder setCodes(
int index, Sp.GetBackupCodesReply.BackupCode value) {
if (value == null) {
throw new NullPointerException();
}
ensureCodesIsMutable();
codes_.set(index, value);
return this;
}
public Builder setCodes(
int index, Sp.GetBackupCodesReply.BackupCode.Builder bdForValue) {
ensureCodesIsMutable();
codes_.set(index, bdForValue.build());
return this;
}
public Builder addCodes(Sp.GetBackupCodesReply.BackupCode value) {
if (value == null) {
throw new NullPointerException();
}
ensureCodesIsMutable();
codes_.add(value);
return this;
}
public Builder addCodes(
int index, Sp.GetBackupCodesReply.BackupCode value) {
if (value == null) {
throw new NullPointerException();
}
ensureCodesIsMutable();
codes_.add(index, value);
return this;
}
public Builder addCodes(
Sp.GetBackupCodesReply.BackupCode.Builder bdForValue) {
ensureCodesIsMutable();
codes_.add(bdForValue.build());
return this;
}
public Builder addCodes(
int index, Sp.GetBackupCodesReply.BackupCode.Builder bdForValue) {
ensureCodesIsMutable();
codes_.add(index, bdForValue.build());
return this;
}
public Builder addAllCodes(
Iterable<? extends Sp.GetBackupCodesReply.BackupCode> values) {
ensureCodesIsMutable();
AbstractMessageLite.Builder.addAll(
values, codes_);
return this;
}
public Builder clearCodes() {
codes_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeCodes(int index) {
ensureCodesIsMutable();
codes_.remove(index);
return this;
}
}
static {
defaultInstance = new GetBackupCodesReply(true);
defaultInstance.initFields();
}
}
public interface CreateGroupCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasCommonName();
String getCommonName();
ByteString
getCommonNameBytes();
}
public static final class CreateGroupCall extends
GeneratedMessageLite implements
CreateGroupCallOrBuilder {
private CreateGroupCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CreateGroupCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CreateGroupCall defaultInstance;
public static CreateGroupCall getDefaultInstance() {
return defaultInstance;
}
public CreateGroupCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CreateGroupCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
commonName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CreateGroupCall> PARSER =
new AbstractParser<CreateGroupCall>() {
public CreateGroupCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CreateGroupCall(input, er);
}
};
@Override
public Parser<CreateGroupCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int COMMON_NAME_FIELD_NUMBER = 1;
private Object commonName_;
public boolean hasCommonName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCommonName() {
Object ref = commonName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
commonName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasCommonName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getCommonNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getCommonNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CreateGroupCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateGroupCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateGroupCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateGroupCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateGroupCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateGroupCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CreateGroupCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CreateGroupCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CreateGroupCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateGroupCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CreateGroupCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CreateGroupCall, Builder>
implements
Sp.CreateGroupCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
commonName_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CreateGroupCall getDefaultInstanceForType() {
return Sp.CreateGroupCall.getDefaultInstance();
}
public Sp.CreateGroupCall build() {
Sp.CreateGroupCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CreateGroupCall buildPartial() {
Sp.CreateGroupCall result = new Sp.CreateGroupCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.commonName_ = commonName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CreateGroupCall other) {
if (other == Sp.CreateGroupCall.getDefaultInstance()) return this;
if (other.hasCommonName()) {
b0_ |= 0x00000001;
commonName_ = other.commonName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasCommonName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CreateGroupCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CreateGroupCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object commonName_ = "";
public boolean hasCommonName() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getCommonName() {
Object ref = commonName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCommonName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
commonName_ = value;
return this;
}
public Builder clearCommonName() {
b0_ = (b0_ & ~0x00000001);
commonName_ = getDefaultInstance().getCommonName();
return this;
}
public Builder setCommonNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
commonName_ = value;
return this;
}
}
static {
defaultInstance = new CreateGroupCall(true);
defaultInstance.initFields();
}
}
public interface CreateGroupReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
}
public static final class CreateGroupReply extends
GeneratedMessageLite implements
CreateGroupReplyOrBuilder {
private CreateGroupReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private CreateGroupReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final CreateGroupReply defaultInstance;
public static CreateGroupReply getDefaultInstance() {
return defaultInstance;
}
public CreateGroupReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private CreateGroupReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<CreateGroupReply> PARSER =
new AbstractParser<CreateGroupReply>() {
public CreateGroupReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new CreateGroupReply(input, er);
}
};
@Override
public Parser<CreateGroupReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
private void initFields() {
groupId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.CreateGroupReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateGroupReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateGroupReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.CreateGroupReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.CreateGroupReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateGroupReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.CreateGroupReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.CreateGroupReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.CreateGroupReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.CreateGroupReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.CreateGroupReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.CreateGroupReply, Builder>
implements
Sp.CreateGroupReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.CreateGroupReply getDefaultInstanceForType() {
return Sp.CreateGroupReply.getDefaultInstance();
}
public Sp.CreateGroupReply build() {
Sp.CreateGroupReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.CreateGroupReply buildPartial() {
Sp.CreateGroupReply result = new Sp.CreateGroupReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.CreateGroupReply other) {
if (other == Sp.CreateGroupReply.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.CreateGroupReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.CreateGroupReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
}
static {
defaultInstance = new CreateGroupReply(true);
defaultInstance.initFields();
}
}
public interface SetGroupCommonNameCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
boolean hasCommonName();
String getCommonName();
ByteString
getCommonNameBytes();
}
public static final class SetGroupCommonNameCall extends
GeneratedMessageLite implements
SetGroupCommonNameCallOrBuilder {
private SetGroupCommonNameCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetGroupCommonNameCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetGroupCommonNameCall defaultInstance;
public static SetGroupCommonNameCall getDefaultInstance() {
return defaultInstance;
}
public SetGroupCommonNameCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetGroupCommonNameCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
case 18: {
ByteString bs = input.readBytes();
b0_ |= 0x00000002;
commonName_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetGroupCommonNameCall> PARSER =
new AbstractParser<SetGroupCommonNameCall>() {
public SetGroupCommonNameCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetGroupCommonNameCall(input, er);
}
};
@Override
public Parser<SetGroupCommonNameCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public static final int COMMON_NAME_FIELD_NUMBER = 2;
private Object commonName_;
public boolean hasCommonName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getCommonName() {
Object ref = commonName_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
groupId_ = 0;
commonName_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
if (!hasCommonName()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, getCommonNameBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, getCommonNameBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetGroupCommonNameCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetGroupCommonNameCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetGroupCommonNameCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetGroupCommonNameCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetGroupCommonNameCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetGroupCommonNameCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetGroupCommonNameCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetGroupCommonNameCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetGroupCommonNameCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetGroupCommonNameCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetGroupCommonNameCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetGroupCommonNameCall, Builder>
implements
Sp.SetGroupCommonNameCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
commonName_ = "";
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetGroupCommonNameCall getDefaultInstanceForType() {
return Sp.SetGroupCommonNameCall.getDefaultInstance();
}
public Sp.SetGroupCommonNameCall build() {
Sp.SetGroupCommonNameCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetGroupCommonNameCall buildPartial() {
Sp.SetGroupCommonNameCall result = new Sp.SetGroupCommonNameCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.commonName_ = commonName_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetGroupCommonNameCall other) {
if (other == Sp.SetGroupCommonNameCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
if (other.hasCommonName()) {
b0_ |= 0x00000002;
commonName_ = other.commonName_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
if (!hasCommonName()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetGroupCommonNameCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetGroupCommonNameCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
private Object commonName_ = "";
public boolean hasCommonName() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public String getCommonName() {
Object ref = commonName_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
commonName_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getCommonNameBytes() {
Object ref = commonName_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
commonName_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setCommonName(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
commonName_ = value;
return this;
}
public Builder clearCommonName() {
b0_ = (b0_ & ~0x00000002);
commonName_ = getDefaultInstance().getCommonName();
return this;
}
public Builder setCommonNameBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
commonName_ = value;
return this;
}
}
static {
defaultInstance = new SetGroupCommonNameCall(true);
defaultInstance.initFields();
}
}
public interface AddGroupMembersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
ProtocolStringList
getUserEmailsList();
int getUserEmailsCount();
String getUserEmails(int index);
ByteString
getUserEmailsBytes(int index);
}
public static final class AddGroupMembersCall extends
GeneratedMessageLite implements
AddGroupMembersCallOrBuilder {
private AddGroupMembersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private AddGroupMembersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final AddGroupMembersCall defaultInstance;
public static AddGroupMembersCall getDefaultInstance() {
return defaultInstance;
}
public AddGroupMembersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private AddGroupMembersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
case 18: {
ByteString bs = input.readBytes();
if (!((mutable_b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = new LazyStringArrayList();
mutable_b0_ |= 0x00000002;
}
userEmails_.add(bs);
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = userEmails_.getUnmodifiableView();
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<AddGroupMembersCall> PARSER =
new AbstractParser<AddGroupMembersCall>() {
public AddGroupMembersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new AddGroupMembersCall(input, er);
}
};
@Override
public Parser<AddGroupMembersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public static final int USER_EMAILS_FIELD_NUMBER = 2;
private LazyStringList userEmails_;
public ProtocolStringList
getUserEmailsList() {
return userEmails_;
}
public int getUserEmailsCount() {
return userEmails_.size();
}
public String getUserEmails(int index) {
return userEmails_.get(index);
}
public ByteString
getUserEmailsBytes(int index) {
return userEmails_.getByteString(index);
}
private void initFields() {
groupId_ = 0;
userEmails_ = LazyStringArrayList.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
for (int i = 0; i < userEmails_.size(); i++) {
output.writeBytes(2, userEmails_.getByteString(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
{
int dataSize = 0;
for (int i = 0; i < userEmails_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(userEmails_.getByteString(i));
}
size += dataSize;
size += 1 * getUserEmailsList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.AddGroupMembersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AddGroupMembersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AddGroupMembersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.AddGroupMembersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.AddGroupMembersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AddGroupMembersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.AddGroupMembersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.AddGroupMembersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.AddGroupMembersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.AddGroupMembersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.AddGroupMembersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.AddGroupMembersCall, Builder>
implements
Sp.AddGroupMembersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
userEmails_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.AddGroupMembersCall getDefaultInstanceForType() {
return Sp.AddGroupMembersCall.getDefaultInstance();
}
public Sp.AddGroupMembersCall build() {
Sp.AddGroupMembersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.AddGroupMembersCall buildPartial() {
Sp.AddGroupMembersCall result = new Sp.AddGroupMembersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
if (((b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = userEmails_.getUnmodifiableView();
b0_ = (b0_ & ~0x00000002);
}
result.userEmails_ = userEmails_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.AddGroupMembersCall other) {
if (other == Sp.AddGroupMembersCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
if (!other.userEmails_.isEmpty()) {
if (userEmails_.isEmpty()) {
userEmails_ = other.userEmails_;
b0_ = (b0_ & ~0x00000002);
} else {
ensureUserEmailsIsMutable();
userEmails_.addAll(other.userEmails_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.AddGroupMembersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.AddGroupMembersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
private LazyStringList userEmails_ = LazyStringArrayList.EMPTY;
private void ensureUserEmailsIsMutable() {
if (!((b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = new LazyStringArrayList(userEmails_);
b0_ |= 0x00000002;
}
}
public ProtocolStringList
getUserEmailsList() {
return userEmails_.getUnmodifiableView();
}
public int getUserEmailsCount() {
return userEmails_.size();
}
public String getUserEmails(int index) {
return userEmails_.get(index);
}
public ByteString
getUserEmailsBytes(int index) {
return userEmails_.getByteString(index);
}
public Builder setUserEmails(
int index, String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.set(index, value);
return this;
}
public Builder addUserEmails(
String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.add(value);
return this;
}
public Builder addAllUserEmails(
Iterable<String> values) {
ensureUserEmailsIsMutable();
AbstractMessageLite.Builder.addAll(
values, userEmails_);
return this;
}
public Builder clearUserEmails() {
userEmails_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder addUserEmailsBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.add(value);
return this;
}
}
static {
defaultInstance = new AddGroupMembersCall(true);
defaultInstance.initFields();
}
}
public interface RemoveGroupMembersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
ProtocolStringList
getUserEmailsList();
int getUserEmailsCount();
String getUserEmails(int index);
ByteString
getUserEmailsBytes(int index);
}
public static final class RemoveGroupMembersCall extends
GeneratedMessageLite implements
RemoveGroupMembersCallOrBuilder {
private RemoveGroupMembersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private RemoveGroupMembersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final RemoveGroupMembersCall defaultInstance;
public static RemoveGroupMembersCall getDefaultInstance() {
return defaultInstance;
}
public RemoveGroupMembersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private RemoveGroupMembersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
case 18: {
ByteString bs = input.readBytes();
if (!((mutable_b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = new LazyStringArrayList();
mutable_b0_ |= 0x00000002;
}
userEmails_.add(bs);
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = userEmails_.getUnmodifiableView();
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<RemoveGroupMembersCall> PARSER =
new AbstractParser<RemoveGroupMembersCall>() {
public RemoveGroupMembersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new RemoveGroupMembersCall(input, er);
}
};
@Override
public Parser<RemoveGroupMembersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public static final int USER_EMAILS_FIELD_NUMBER = 2;
private LazyStringList userEmails_;
public ProtocolStringList
getUserEmailsList() {
return userEmails_;
}
public int getUserEmailsCount() {
return userEmails_.size();
}
public String getUserEmails(int index) {
return userEmails_.get(index);
}
public ByteString
getUserEmailsBytes(int index) {
return userEmails_.getByteString(index);
}
private void initFields() {
groupId_ = 0;
userEmails_ = LazyStringArrayList.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
for (int i = 0; i < userEmails_.size(); i++) {
output.writeBytes(2, userEmails_.getByteString(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
{
int dataSize = 0;
for (int i = 0; i < userEmails_.size(); i++) {
dataSize += CodedOutputStream
.computeBytesSizeNoTag(userEmails_.getByteString(i));
}
size += dataSize;
size += 1 * getUserEmailsList().size();
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.RemoveGroupMembersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveGroupMembersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveGroupMembersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.RemoveGroupMembersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.RemoveGroupMembersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveGroupMembersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.RemoveGroupMembersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.RemoveGroupMembersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.RemoveGroupMembersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.RemoveGroupMembersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.RemoveGroupMembersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.RemoveGroupMembersCall, Builder>
implements
Sp.RemoveGroupMembersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
userEmails_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.RemoveGroupMembersCall getDefaultInstanceForType() {
return Sp.RemoveGroupMembersCall.getDefaultInstance();
}
public Sp.RemoveGroupMembersCall build() {
Sp.RemoveGroupMembersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.RemoveGroupMembersCall buildPartial() {
Sp.RemoveGroupMembersCall result = new Sp.RemoveGroupMembersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
if (((b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = userEmails_.getUnmodifiableView();
b0_ = (b0_ & ~0x00000002);
}
result.userEmails_ = userEmails_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.RemoveGroupMembersCall other) {
if (other == Sp.RemoveGroupMembersCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
if (!other.userEmails_.isEmpty()) {
if (userEmails_.isEmpty()) {
userEmails_ = other.userEmails_;
b0_ = (b0_ & ~0x00000002);
} else {
ensureUserEmailsIsMutable();
userEmails_.addAll(other.userEmails_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.RemoveGroupMembersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.RemoveGroupMembersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
private LazyStringList userEmails_ = LazyStringArrayList.EMPTY;
private void ensureUserEmailsIsMutable() {
if (!((b0_ & 0x00000002) == 0x00000002)) {
userEmails_ = new LazyStringArrayList(userEmails_);
b0_ |= 0x00000002;
}
}
public ProtocolStringList
getUserEmailsList() {
return userEmails_.getUnmodifiableView();
}
public int getUserEmailsCount() {
return userEmails_.size();
}
public String getUserEmails(int index) {
return userEmails_.get(index);
}
public ByteString
getUserEmailsBytes(int index) {
return userEmails_.getByteString(index);
}
public Builder setUserEmails(
int index, String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.set(index, value);
return this;
}
public Builder addUserEmails(
String value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.add(value);
return this;
}
public Builder addAllUserEmails(
Iterable<String> values) {
ensureUserEmailsIsMutable();
AbstractMessageLite.Builder.addAll(
values, userEmails_);
return this;
}
public Builder clearUserEmails() {
userEmails_ = LazyStringArrayList.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder addUserEmailsBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserEmailsIsMutable();
userEmails_.add(value);
return this;
}
}
static {
defaultInstance = new RemoveGroupMembersCall(true);
defaultInstance.initFields();
}
}
public interface DeleteGroupCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
}
public static final class DeleteGroupCall extends
GeneratedMessageLite implements
DeleteGroupCallOrBuilder {
private DeleteGroupCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private DeleteGroupCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final DeleteGroupCall defaultInstance;
public static DeleteGroupCall getDefaultInstance() {
return defaultInstance;
}
public DeleteGroupCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private DeleteGroupCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<DeleteGroupCall> PARSER =
new AbstractParser<DeleteGroupCall>() {
public DeleteGroupCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new DeleteGroupCall(input, er);
}
};
@Override
public Parser<DeleteGroupCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
private void initFields() {
groupId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.DeleteGroupCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteGroupCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteGroupCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.DeleteGroupCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.DeleteGroupCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteGroupCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.DeleteGroupCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.DeleteGroupCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.DeleteGroupCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.DeleteGroupCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.DeleteGroupCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.DeleteGroupCall, Builder>
implements
Sp.DeleteGroupCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.DeleteGroupCall getDefaultInstanceForType() {
return Sp.DeleteGroupCall.getDefaultInstance();
}
public Sp.DeleteGroupCall build() {
Sp.DeleteGroupCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.DeleteGroupCall buildPartial() {
Sp.DeleteGroupCall result = new Sp.DeleteGroupCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.DeleteGroupCall other) {
if (other == Sp.DeleteGroupCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.DeleteGroupCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.DeleteGroupCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
}
static {
defaultInstance = new DeleteGroupCall(true);
defaultInstance.initFields();
}
}
public interface ListGroupsCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasMaxResults();
int getMaxResults();
boolean hasOffset();
int getOffset();
boolean hasSearchPrefix();
String getSearchPrefix();
ByteString
getSearchPrefixBytes();
}
public static final class ListGroupsCall extends
GeneratedMessageLite implements
ListGroupsCallOrBuilder {
private ListGroupsCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupsCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupsCall defaultInstance;
public static ListGroupsCall getDefaultInstance() {
return defaultInstance;
}
public ListGroupsCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupsCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
maxResults_ = input.readUInt32();
break;
}
case 16: {
b0_ |= 0x00000002;
offset_ = input.readUInt32();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
searchPrefix_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupsCall> PARSER =
new AbstractParser<ListGroupsCall>() {
public ListGroupsCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupsCall(input, er);
}
};
@Override
public Parser<ListGroupsCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int MAX_RESULTS_FIELD_NUMBER = 1;
private int maxResults_;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public static final int OFFSET_FIELD_NUMBER = 2;
private int offset_;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public static final int SEARCH_PREFIX_FIELD_NUMBER = 3;
private Object searchPrefix_;
public boolean hasSearchPrefix() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchPrefix() {
Object ref = searchPrefix_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchPrefix_ = s;
}
return s;
}
}
public ByteString
getSearchPrefixBytes() {
Object ref = searchPrefix_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchPrefix_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
maxResults_ = 0;
offset_ = 0;
searchPrefix_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasMaxResults()) {
mii = 0;
return false;
}
if (!hasOffset()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt32(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getSearchPrefixBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt32Size(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getSearchPrefixBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupsCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupsCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupsCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupsCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupsCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupsCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupsCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupsCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupsCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupsCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupsCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupsCall, Builder>
implements
Sp.ListGroupsCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
maxResults_ = 0;
b0_ = (b0_ & ~0x00000001);
offset_ = 0;
b0_ = (b0_ & ~0x00000002);
searchPrefix_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupsCall getDefaultInstanceForType() {
return Sp.ListGroupsCall.getDefaultInstance();
}
public Sp.ListGroupsCall build() {
Sp.ListGroupsCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupsCall buildPartial() {
Sp.ListGroupsCall result = new Sp.ListGroupsCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.maxResults_ = maxResults_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.offset_ = offset_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.searchPrefix_ = searchPrefix_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListGroupsCall other) {
if (other == Sp.ListGroupsCall.getDefaultInstance()) return this;
if (other.hasMaxResults()) {
setMaxResults(other.getMaxResults());
}
if (other.hasOffset()) {
setOffset(other.getOffset());
}
if (other.hasSearchPrefix()) {
b0_ |= 0x00000004;
searchPrefix_ = other.searchPrefix_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasMaxResults()) {
return false;
}
if (!hasOffset()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupsCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupsCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int maxResults_ ;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public Builder setMaxResults(int value) {
b0_ |= 0x00000001;
maxResults_ = value;
return this;
}
public Builder clearMaxResults() {
b0_ = (b0_ & ~0x00000001);
maxResults_ = 0;
return this;
}
private int offset_ ;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public Builder setOffset(int value) {
b0_ |= 0x00000002;
offset_ = value;
return this;
}
public Builder clearOffset() {
b0_ = (b0_ & ~0x00000002);
offset_ = 0;
return this;
}
private Object searchPrefix_ = "";
public boolean hasSearchPrefix() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchPrefix() {
Object ref = searchPrefix_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchPrefix_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSearchPrefixBytes() {
Object ref = searchPrefix_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchPrefix_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSearchPrefix(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchPrefix_ = value;
return this;
}
public Builder clearSearchPrefix() {
b0_ = (b0_ & ~0x00000004);
searchPrefix_ = getDefaultInstance().getSearchPrefix();
return this;
}
public Builder setSearchPrefixBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchPrefix_ = value;
return this;
}
}
static {
defaultInstance = new ListGroupsCall(true);
defaultInstance.initFields();
}
}
public interface ListGroupsReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBGroup> 
getGroupsList();
Sp.PBGroup getGroups(int index);
int getGroupsCount();
boolean hasTotalCount();
int getTotalCount();
}
public static final class ListGroupsReply extends
GeneratedMessageLite implements
ListGroupsReplyOrBuilder {
private ListGroupsReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupsReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupsReply defaultInstance;
public static ListGroupsReply getDefaultInstance() {
return defaultInstance;
}
public ListGroupsReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupsReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
groups_ = new ArrayList<Sp.PBGroup>();
mutable_b0_ |= 0x00000001;
}
groups_.add(input.readMessage(Sp.PBGroup.PARSER, er));
break;
}
case 16: {
b0_ |= 0x00000001;
totalCount_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
groups_ = Collections.unmodifiableList(groups_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupsReply> PARSER =
new AbstractParser<ListGroupsReply>() {
public ListGroupsReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupsReply(input, er);
}
};
@Override
public Parser<ListGroupsReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUPS_FIELD_NUMBER = 1;
private List<Sp.PBGroup> groups_;
public List<Sp.PBGroup> getGroupsList() {
return groups_;
}
public List<? extends Sp.PBGroupOrBuilder> 
getGroupsOrBuilderList() {
return groups_;
}
public int getGroupsCount() {
return groups_.size();
}
public Sp.PBGroup getGroups(int index) {
return groups_.get(index);
}
public Sp.PBGroupOrBuilder getGroupsOrBuilder(
int index) {
return groups_.get(index);
}
public static final int TOTAL_COUNT_FIELD_NUMBER = 2;
private int totalCount_;
public boolean hasTotalCount() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getTotalCount() {
return totalCount_;
}
private void initFields() {
groups_ = Collections.emptyList();
totalCount_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasTotalCount()) {
mii = 0;
return false;
}
for (int i = 0; i < getGroupsCount(); i++) {
if (!getGroups(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < groups_.size(); i++) {
output.writeMessage(1, groups_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(2, totalCount_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < groups_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, groups_.get(i));
}
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(2, totalCount_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupsReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupsReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupsReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupsReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupsReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupsReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupsReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupsReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupsReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupsReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupsReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupsReply, Builder>
implements
Sp.ListGroupsReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groups_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
totalCount_ = 0;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupsReply getDefaultInstanceForType() {
return Sp.ListGroupsReply.getDefaultInstance();
}
public Sp.ListGroupsReply build() {
Sp.ListGroupsReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupsReply buildPartial() {
Sp.ListGroupsReply result = new Sp.ListGroupsReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
groups_ = Collections.unmodifiableList(groups_);
b0_ = (b0_ & ~0x00000001);
}
result.groups_ = groups_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000001;
}
result.totalCount_ = totalCount_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListGroupsReply other) {
if (other == Sp.ListGroupsReply.getDefaultInstance()) return this;
if (!other.groups_.isEmpty()) {
if (groups_.isEmpty()) {
groups_ = other.groups_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureGroupsIsMutable();
groups_.addAll(other.groups_);
}
}
if (other.hasTotalCount()) {
setTotalCount(other.getTotalCount());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasTotalCount()) {
return false;
}
for (int i = 0; i < getGroupsCount(); i++) {
if (!getGroups(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupsReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupsReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBGroup> groups_ =
Collections.emptyList();
private void ensureGroupsIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
groups_ = new ArrayList<Sp.PBGroup>(groups_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBGroup> getGroupsList() {
return Collections.unmodifiableList(groups_);
}
public int getGroupsCount() {
return groups_.size();
}
public Sp.PBGroup getGroups(int index) {
return groups_.get(index);
}
public Builder setGroups(
int index, Sp.PBGroup value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupsIsMutable();
groups_.set(index, value);
return this;
}
public Builder setGroups(
int index, Sp.PBGroup.Builder bdForValue) {
ensureGroupsIsMutable();
groups_.set(index, bdForValue.build());
return this;
}
public Builder addGroups(Sp.PBGroup value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupsIsMutable();
groups_.add(value);
return this;
}
public Builder addGroups(
int index, Sp.PBGroup value) {
if (value == null) {
throw new NullPointerException();
}
ensureGroupsIsMutable();
groups_.add(index, value);
return this;
}
public Builder addGroups(
Sp.PBGroup.Builder bdForValue) {
ensureGroupsIsMutable();
groups_.add(bdForValue.build());
return this;
}
public Builder addGroups(
int index, Sp.PBGroup.Builder bdForValue) {
ensureGroupsIsMutable();
groups_.add(index, bdForValue.build());
return this;
}
public Builder addAllGroups(
Iterable<? extends Sp.PBGroup> values) {
ensureGroupsIsMutable();
AbstractMessageLite.Builder.addAll(
values, groups_);
return this;
}
public Builder clearGroups() {
groups_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeGroups(int index) {
ensureGroupsIsMutable();
groups_.remove(index);
return this;
}
private int totalCount_ ;
public boolean hasTotalCount() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getTotalCount() {
return totalCount_;
}
public Builder setTotalCount(int value) {
b0_ |= 0x00000002;
totalCount_ = value;
return this;
}
public Builder clearTotalCount() {
b0_ = (b0_ & ~0x00000002);
totalCount_ = 0;
return this;
}
}
static {
defaultInstance = new ListGroupsReply(true);
defaultInstance.initFields();
}
}
public interface ListGroupMembersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
}
public static final class ListGroupMembersCall extends
GeneratedMessageLite implements
ListGroupMembersCallOrBuilder {
private ListGroupMembersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupMembersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupMembersCall defaultInstance;
public static ListGroupMembersCall getDefaultInstance() {
return defaultInstance;
}
public ListGroupMembersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupMembersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupMembersCall> PARSER =
new AbstractParser<ListGroupMembersCall>() {
public ListGroupMembersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupMembersCall(input, er);
}
};
@Override
public Parser<ListGroupMembersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
private void initFields() {
groupId_ = 0;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupMembersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupMembersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupMembersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupMembersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupMembersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupMembersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupMembersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupMembersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupMembersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupMembersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupMembersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupMembersCall, Builder>
implements
Sp.ListGroupMembersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupMembersCall getDefaultInstanceForType() {
return Sp.ListGroupMembersCall.getDefaultInstance();
}
public Sp.ListGroupMembersCall build() {
Sp.ListGroupMembersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupMembersCall buildPartial() {
Sp.ListGroupMembersCall result = new Sp.ListGroupMembersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListGroupMembersCall other) {
if (other == Sp.ListGroupMembersCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupMembersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupMembersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
}
static {
defaultInstance = new ListGroupMembersCall(true);
defaultInstance.initFields();
}
}
public interface ListGroupMembersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBUser> 
getUsersList();
Sp.PBUser getUsers(int index);
int getUsersCount();
}
public static final class ListGroupMembersReply extends
GeneratedMessageLite implements
ListGroupMembersReplyOrBuilder {
private ListGroupMembersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupMembersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupMembersReply defaultInstance;
public static ListGroupMembersReply getDefaultInstance() {
return defaultInstance;
}
public ListGroupMembersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupMembersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
users_ = new ArrayList<Sp.PBUser>();
mutable_b0_ |= 0x00000001;
}
users_.add(input.readMessage(Sp.PBUser.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
users_ = Collections.unmodifiableList(users_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupMembersReply> PARSER =
new AbstractParser<ListGroupMembersReply>() {
public ListGroupMembersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupMembersReply(input, er);
}
};
@Override
public Parser<ListGroupMembersReply> getParserForType() {
return PARSER;
}
public static final int USERS_FIELD_NUMBER = 1;
private List<Sp.PBUser> users_;
public List<Sp.PBUser> getUsersList() {
return users_;
}
public List<? extends Sp.PBUserOrBuilder> 
getUsersOrBuilderList() {
return users_;
}
public int getUsersCount() {
return users_.size();
}
public Sp.PBUser getUsers(int index) {
return users_.get(index);
}
public Sp.PBUserOrBuilder getUsersOrBuilder(
int index) {
return users_.get(index);
}
private void initFields() {
users_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getUsersCount(); i++) {
if (!getUsers(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < users_.size(); i++) {
output.writeMessage(1, users_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < users_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, users_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupMembersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupMembersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupMembersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupMembersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupMembersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupMembersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupMembersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupMembersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupMembersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupMembersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupMembersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupMembersReply, Builder>
implements
Sp.ListGroupMembersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
users_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupMembersReply getDefaultInstanceForType() {
return Sp.ListGroupMembersReply.getDefaultInstance();
}
public Sp.ListGroupMembersReply build() {
Sp.ListGroupMembersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupMembersReply buildPartial() {
Sp.ListGroupMembersReply result = new Sp.ListGroupMembersReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
users_ = Collections.unmodifiableList(users_);
b0_ = (b0_ & ~0x00000001);
}
result.users_ = users_;
return result;
}
public Builder mergeFrom(Sp.ListGroupMembersReply other) {
if (other == Sp.ListGroupMembersReply.getDefaultInstance()) return this;
if (!other.users_.isEmpty()) {
if (users_.isEmpty()) {
users_ = other.users_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUsersIsMutable();
users_.addAll(other.users_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getUsersCount(); i++) {
if (!getUsers(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupMembersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupMembersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBUser> users_ =
Collections.emptyList();
private void ensureUsersIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
users_ = new ArrayList<Sp.PBUser>(users_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBUser> getUsersList() {
return Collections.unmodifiableList(users_);
}
public int getUsersCount() {
return users_.size();
}
public Sp.PBUser getUsers(int index) {
return users_.get(index);
}
public Builder setUsers(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUsersIsMutable();
users_.set(index, value);
return this;
}
public Builder setUsers(
int index, Sp.PBUser.Builder bdForValue) {
ensureUsersIsMutable();
users_.set(index, bdForValue.build());
return this;
}
public Builder addUsers(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUsersIsMutable();
users_.add(value);
return this;
}
public Builder addUsers(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureUsersIsMutable();
users_.add(index, value);
return this;
}
public Builder addUsers(
Sp.PBUser.Builder bdForValue) {
ensureUsersIsMutable();
users_.add(bdForValue.build());
return this;
}
public Builder addUsers(
int index, Sp.PBUser.Builder bdForValue) {
ensureUsersIsMutable();
users_.add(index, bdForValue.build());
return this;
}
public Builder addAllUsers(
Iterable<? extends Sp.PBUser> values) {
ensureUsersIsMutable();
AbstractMessageLite.Builder.addAll(
values, users_);
return this;
}
public Builder clearUsers() {
users_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeUsers(int index) {
ensureUsersIsMutable();
users_.remove(index);
return this;
}
}
static {
defaultInstance = new ListGroupMembersReply(true);
defaultInstance.initFields();
}
}
public interface SetTwoFactorSetupEnforcementCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasLevel();
Sp.PBTwoFactorEnforcementLevel getLevel();
}
public static final class SetTwoFactorSetupEnforcementCall extends
GeneratedMessageLite implements
SetTwoFactorSetupEnforcementCallOrBuilder {
private SetTwoFactorSetupEnforcementCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetTwoFactorSetupEnforcementCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetTwoFactorSetupEnforcementCall defaultInstance;
public static SetTwoFactorSetupEnforcementCall getDefaultInstance() {
return defaultInstance;
}
public SetTwoFactorSetupEnforcementCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetTwoFactorSetupEnforcementCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
int rawValue = input.readEnum();
Sp.PBTwoFactorEnforcementLevel value = Sp.PBTwoFactorEnforcementLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000001;
level_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetTwoFactorSetupEnforcementCall> PARSER =
new AbstractParser<SetTwoFactorSetupEnforcementCall>() {
public SetTwoFactorSetupEnforcementCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetTwoFactorSetupEnforcementCall(input, er);
}
};
@Override
public Parser<SetTwoFactorSetupEnforcementCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int LEVEL_FIELD_NUMBER = 1;
private Sp.PBTwoFactorEnforcementLevel level_;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
private void initFields() {
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasLevel()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeEnum(1, level_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeEnumSize(1, level_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetTwoFactorSetupEnforcementCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetTwoFactorSetupEnforcementCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetTwoFactorSetupEnforcementCall, Builder>
implements
Sp.SetTwoFactorSetupEnforcementCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetTwoFactorSetupEnforcementCall getDefaultInstanceForType() {
return Sp.SetTwoFactorSetupEnforcementCall.getDefaultInstance();
}
public Sp.SetTwoFactorSetupEnforcementCall build() {
Sp.SetTwoFactorSetupEnforcementCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetTwoFactorSetupEnforcementCall buildPartial() {
Sp.SetTwoFactorSetupEnforcementCall result = new Sp.SetTwoFactorSetupEnforcementCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.level_ = level_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetTwoFactorSetupEnforcementCall other) {
if (other == Sp.SetTwoFactorSetupEnforcementCall.getDefaultInstance()) return this;
if (other.hasLevel()) {
setLevel(other.getLevel());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasLevel()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetTwoFactorSetupEnforcementCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetTwoFactorSetupEnforcementCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBTwoFactorEnforcementLevel level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
public Builder setLevel(Sp.PBTwoFactorEnforcementLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
level_ = value;
return this;
}
public Builder clearLevel() {
b0_ = (b0_ & ~0x00000001);
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
return this;
}
}
static {
defaultInstance = new SetTwoFactorSetupEnforcementCall(true);
defaultInstance.initFields();
}
}
public interface GetTwoFactorSetupEnforcementReplyOrBuilder extends
MessageLiteOrBuilder {
boolean hasLevel();
Sp.PBTwoFactorEnforcementLevel getLevel();
}
public static final class GetTwoFactorSetupEnforcementReply extends
GeneratedMessageLite implements
GetTwoFactorSetupEnforcementReplyOrBuilder {
private GetTwoFactorSetupEnforcementReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private GetTwoFactorSetupEnforcementReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final GetTwoFactorSetupEnforcementReply defaultInstance;
public static GetTwoFactorSetupEnforcementReply getDefaultInstance() {
return defaultInstance;
}
public GetTwoFactorSetupEnforcementReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private GetTwoFactorSetupEnforcementReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
int rawValue = input.readEnum();
Sp.PBTwoFactorEnforcementLevel value = Sp.PBTwoFactorEnforcementLevel.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000001;
level_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<GetTwoFactorSetupEnforcementReply> PARSER =
new AbstractParser<GetTwoFactorSetupEnforcementReply>() {
public GetTwoFactorSetupEnforcementReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new GetTwoFactorSetupEnforcementReply(input, er);
}
};
@Override
public Parser<GetTwoFactorSetupEnforcementReply> getParserForType() {
return PARSER;
}
private int b0_;
public static final int LEVEL_FIELD_NUMBER = 1;
private Sp.PBTwoFactorEnforcementLevel level_;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
private void initFields() {
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasLevel()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeEnum(1, level_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeEnumSize(1, level_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.GetTwoFactorSetupEnforcementReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.GetTwoFactorSetupEnforcementReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.GetTwoFactorSetupEnforcementReply, Builder>
implements
Sp.GetTwoFactorSetupEnforcementReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.GetTwoFactorSetupEnforcementReply getDefaultInstanceForType() {
return Sp.GetTwoFactorSetupEnforcementReply.getDefaultInstance();
}
public Sp.GetTwoFactorSetupEnforcementReply build() {
Sp.GetTwoFactorSetupEnforcementReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.GetTwoFactorSetupEnforcementReply buildPartial() {
Sp.GetTwoFactorSetupEnforcementReply result = new Sp.GetTwoFactorSetupEnforcementReply(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.level_ = level_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.GetTwoFactorSetupEnforcementReply other) {
if (other == Sp.GetTwoFactorSetupEnforcementReply.getDefaultInstance()) return this;
if (other.hasLevel()) {
setLevel(other.getLevel());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasLevel()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.GetTwoFactorSetupEnforcementReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.GetTwoFactorSetupEnforcementReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBTwoFactorEnforcementLevel level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
public boolean hasLevel() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBTwoFactorEnforcementLevel getLevel() {
return level_;
}
public Builder setLevel(Sp.PBTwoFactorEnforcementLevel value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
level_ = value;
return this;
}
public Builder clearLevel() {
b0_ = (b0_ & ~0x00000001);
level_ = Sp.PBTwoFactorEnforcementLevel.DISALLOWED;
return this;
}
}
static {
defaultInstance = new GetTwoFactorSetupEnforcementReply(true);
defaultInstance.initFields();
}
}
public interface ListGroupStatusInSharedFolderCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasGroupId();
int getGroupId();
boolean hasShareId();
ByteString getShareId();
}
public static final class ListGroupStatusInSharedFolderCall extends
GeneratedMessageLite implements
ListGroupStatusInSharedFolderCallOrBuilder {
private ListGroupStatusInSharedFolderCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupStatusInSharedFolderCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupStatusInSharedFolderCall defaultInstance;
public static ListGroupStatusInSharedFolderCall getDefaultInstance() {
return defaultInstance;
}
public ListGroupStatusInSharedFolderCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupStatusInSharedFolderCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
groupId_ = input.readUInt32();
break;
}
case 18: {
b0_ |= 0x00000002;
shareId_ = input.readBytes();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupStatusInSharedFolderCall> PARSER =
new AbstractParser<ListGroupStatusInSharedFolderCall>() {
public ListGroupStatusInSharedFolderCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupStatusInSharedFolderCall(input, er);
}
};
@Override
public Parser<ListGroupStatusInSharedFolderCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int GROUP_ID_FIELD_NUMBER = 1;
private int groupId_;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public static final int SHARE_ID_FIELD_NUMBER = 2;
private ByteString shareId_;
public boolean hasShareId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getShareId() {
return shareId_;
}
private void initFields() {
groupId_ = 0;
shareId_ = ByteString.EMPTY;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasGroupId()) {
mii = 0;
return false;
}
if (!hasShareId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBytes(2, shareId_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, groupId_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBytesSize(2, shareId_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupStatusInSharedFolderCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupStatusInSharedFolderCall, Builder>
implements
Sp.ListGroupStatusInSharedFolderCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
groupId_ = 0;
b0_ = (b0_ & ~0x00000001);
shareId_ = ByteString.EMPTY;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupStatusInSharedFolderCall getDefaultInstanceForType() {
return Sp.ListGroupStatusInSharedFolderCall.getDefaultInstance();
}
public Sp.ListGroupStatusInSharedFolderCall build() {
Sp.ListGroupStatusInSharedFolderCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupStatusInSharedFolderCall buildPartial() {
Sp.ListGroupStatusInSharedFolderCall result = new Sp.ListGroupStatusInSharedFolderCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.groupId_ = groupId_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.shareId_ = shareId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListGroupStatusInSharedFolderCall other) {
if (other == Sp.ListGroupStatusInSharedFolderCall.getDefaultInstance()) return this;
if (other.hasGroupId()) {
setGroupId(other.getGroupId());
}
if (other.hasShareId()) {
setShareId(other.getShareId());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasGroupId()) {
return false;
}
if (!hasShareId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupStatusInSharedFolderCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupStatusInSharedFolderCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int groupId_ ;
public boolean hasGroupId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getGroupId() {
return groupId_;
}
public Builder setGroupId(int value) {
b0_ |= 0x00000001;
groupId_ = value;
return this;
}
public Builder clearGroupId() {
b0_ = (b0_ & ~0x00000001);
groupId_ = 0;
return this;
}
private ByteString shareId_ = ByteString.EMPTY;
public boolean hasShareId() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public ByteString getShareId() {
return shareId_;
}
public Builder setShareId(ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
shareId_ = value;
return this;
}
public Builder clearShareId() {
b0_ = (b0_ & ~0x00000002);
shareId_ = getDefaultInstance().getShareId();
return this;
}
}
static {
defaultInstance = new ListGroupStatusInSharedFolderCall(true);
defaultInstance.initFields();
}
}
public interface ListGroupStatusInSharedFolderReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> 
getUserAndStateList();
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState getUserAndState(int index);
int getUserAndStateCount();
}
public static final class ListGroupStatusInSharedFolderReply extends
GeneratedMessageLite implements
ListGroupStatusInSharedFolderReplyOrBuilder {
private ListGroupStatusInSharedFolderReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListGroupStatusInSharedFolderReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListGroupStatusInSharedFolderReply defaultInstance;
public static ListGroupStatusInSharedFolderReply getDefaultInstance() {
return defaultInstance;
}
public ListGroupStatusInSharedFolderReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListGroupStatusInSharedFolderReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
userAndState_ = new ArrayList<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState>();
mutable_b0_ |= 0x00000001;
}
userAndState_.add(input.readMessage(Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
userAndState_ = Collections.unmodifiableList(userAndState_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListGroupStatusInSharedFolderReply> PARSER =
new AbstractParser<ListGroupStatusInSharedFolderReply>() {
public ListGroupStatusInSharedFolderReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListGroupStatusInSharedFolderReply(input, er);
}
};
@Override
public Parser<ListGroupStatusInSharedFolderReply> getParserForType() {
return PARSER;
}
public interface PBUserAndStateOrBuilder extends
MessageLiteOrBuilder {
boolean hasUser();
Sp.PBUser getUser();
boolean hasState();
Sp.PBSharedFolderState getState();
}
public static final class PBUserAndState extends
GeneratedMessageLite implements
PBUserAndStateOrBuilder {
private PBUserAndState(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private PBUserAndState(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final PBUserAndState defaultInstance;
public static PBUserAndState getDefaultInstance() {
return defaultInstance;
}
public PBUserAndState getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private PBUserAndState(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
Sp.PBUser.Builder subBuilder = null;
if (((b0_ & 0x00000001) == 0x00000001)) {
subBuilder = user_.toBuilder();
}
user_ = input.readMessage(Sp.PBUser.PARSER, er);
if (subBuilder != null) {
subBuilder.mergeFrom(user_);
user_ = subBuilder.buildPartial();
}
b0_ |= 0x00000001;
break;
}
case 16: {
int rawValue = input.readEnum();
Sp.PBSharedFolderState value = Sp.PBSharedFolderState.valueOf(rawValue);
if (value == null) {
unknownFieldsCodedOutput.writeRawVarint32(tag);
unknownFieldsCodedOutput.writeRawVarint32(rawValue);
} else {
b0_ |= 0x00000002;
state_ = value;
}
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<PBUserAndState> PARSER =
new AbstractParser<PBUserAndState>() {
public PBUserAndState parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new PBUserAndState(input, er);
}
};
@Override
public Parser<PBUserAndState> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_FIELD_NUMBER = 1;
private Sp.PBUser user_;
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public static final int STATE_FIELD_NUMBER = 2;
private Sp.PBSharedFolderState state_;
public boolean hasState() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBSharedFolderState getState() {
return state_;
}
private void initFields() {
user_ = Sp.PBUser.getDefaultInstance();
state_ = Sp.PBSharedFolderState.PENDING;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUser()) {
mii = 0;
return false;
}
if (!hasState()) {
mii = 0;
return false;
}
if (!getUser().isInitialized()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeMessage(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeEnum(2, state_.getNumber());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeMessageSize(1, user_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeEnumSize(2, state_.getNumber());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply.PBUserAndState parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupStatusInSharedFolderReply.PBUserAndState prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState, Builder>
implements
Sp.ListGroupStatusInSharedFolderReply.PBUserAndStateOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
state_ = Sp.PBSharedFolderState.PENDING;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndState getDefaultInstanceForType() {
return Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.getDefaultInstance();
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndState build() {
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndState buildPartial() {
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState result = new Sp.ListGroupStatusInSharedFolderReply.PBUserAndState(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.user_ = user_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.state_ = state_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListGroupStatusInSharedFolderReply.PBUserAndState other) {
if (other == Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.getDefaultInstance()) return this;
if (other.hasUser()) {
mergeUser(other.getUser());
}
if (other.hasState()) {
setState(other.getState());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUser()) {
return false;
}
if (!hasState()) {
return false;
}
if (!getUser().isInitialized()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupStatusInSharedFolderReply.PBUserAndState) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Sp.PBUser user_ = Sp.PBUser.getDefaultInstance();
public boolean hasUser() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public Sp.PBUser getUser() {
return user_;
}
public Builder setUser(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
user_ = value;
b0_ |= 0x00000001;
return this;
}
public Builder setUser(
Sp.PBUser.Builder bdForValue) {
user_ = bdForValue.build();
b0_ |= 0x00000001;
return this;
}
public Builder mergeUser(Sp.PBUser value) {
if (((b0_ & 0x00000001) == 0x00000001) &&
user_ != Sp.PBUser.getDefaultInstance()) {
user_ =
Sp.PBUser.newBuilder(user_).mergeFrom(value).buildPartial();
} else {
user_ = value;
}
b0_ |= 0x00000001;
return this;
}
public Builder clearUser() {
user_ = Sp.PBUser.getDefaultInstance();
b0_ = (b0_ & ~0x00000001);
return this;
}
private Sp.PBSharedFolderState state_ = Sp.PBSharedFolderState.PENDING;
public boolean hasState() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public Sp.PBSharedFolderState getState() {
return state_;
}
public Builder setState(Sp.PBSharedFolderState value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000002;
state_ = value;
return this;
}
public Builder clearState() {
b0_ = (b0_ & ~0x00000002);
state_ = Sp.PBSharedFolderState.PENDING;
return this;
}
}
static {
defaultInstance = new PBUserAndState(true);
defaultInstance.initFields();
}
}
public static final int USER_AND_STATE_FIELD_NUMBER = 1;
private List<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> userAndState_;
public List<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> getUserAndStateList() {
return userAndState_;
}
public List<? extends Sp.ListGroupStatusInSharedFolderReply.PBUserAndStateOrBuilder> 
getUserAndStateOrBuilderList() {
return userAndState_;
}
public int getUserAndStateCount() {
return userAndState_.size();
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndState getUserAndState(int index) {
return userAndState_.get(index);
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndStateOrBuilder getUserAndStateOrBuilder(
int index) {
return userAndState_.get(index);
}
private void initFields() {
userAndState_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getUserAndStateCount(); i++) {
if (!getUserAndState(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < userAndState_.size(); i++) {
output.writeMessage(1, userAndState_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < userAndState_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, userAndState_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListGroupStatusInSharedFolderReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListGroupStatusInSharedFolderReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListGroupStatusInSharedFolderReply, Builder>
implements
Sp.ListGroupStatusInSharedFolderReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userAndState_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListGroupStatusInSharedFolderReply getDefaultInstanceForType() {
return Sp.ListGroupStatusInSharedFolderReply.getDefaultInstance();
}
public Sp.ListGroupStatusInSharedFolderReply build() {
Sp.ListGroupStatusInSharedFolderReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListGroupStatusInSharedFolderReply buildPartial() {
Sp.ListGroupStatusInSharedFolderReply result = new Sp.ListGroupStatusInSharedFolderReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
userAndState_ = Collections.unmodifiableList(userAndState_);
b0_ = (b0_ & ~0x00000001);
}
result.userAndState_ = userAndState_;
return result;
}
public Builder mergeFrom(Sp.ListGroupStatusInSharedFolderReply other) {
if (other == Sp.ListGroupStatusInSharedFolderReply.getDefaultInstance()) return this;
if (!other.userAndState_.isEmpty()) {
if (userAndState_.isEmpty()) {
userAndState_ = other.userAndState_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureUserAndStateIsMutable();
userAndState_.addAll(other.userAndState_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getUserAndStateCount(); i++) {
if (!getUserAndState(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListGroupStatusInSharedFolderReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListGroupStatusInSharedFolderReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> userAndState_ =
Collections.emptyList();
private void ensureUserAndStateIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
userAndState_ = new ArrayList<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState>(userAndState_);
b0_ |= 0x00000001;
}
}
public List<Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> getUserAndStateList() {
return Collections.unmodifiableList(userAndState_);
}
public int getUserAndStateCount() {
return userAndState_.size();
}
public Sp.ListGroupStatusInSharedFolderReply.PBUserAndState getUserAndState(int index) {
return userAndState_.get(index);
}
public Builder setUserAndState(
int index, Sp.ListGroupStatusInSharedFolderReply.PBUserAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndStateIsMutable();
userAndState_.set(index, value);
return this;
}
public Builder setUserAndState(
int index, Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.Builder bdForValue) {
ensureUserAndStateIsMutable();
userAndState_.set(index, bdForValue.build());
return this;
}
public Builder addUserAndState(Sp.ListGroupStatusInSharedFolderReply.PBUserAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndStateIsMutable();
userAndState_.add(value);
return this;
}
public Builder addUserAndState(
int index, Sp.ListGroupStatusInSharedFolderReply.PBUserAndState value) {
if (value == null) {
throw new NullPointerException();
}
ensureUserAndStateIsMutable();
userAndState_.add(index, value);
return this;
}
public Builder addUserAndState(
Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.Builder bdForValue) {
ensureUserAndStateIsMutable();
userAndState_.add(bdForValue.build());
return this;
}
public Builder addUserAndState(
int index, Sp.ListGroupStatusInSharedFolderReply.PBUserAndState.Builder bdForValue) {
ensureUserAndStateIsMutable();
userAndState_.add(index, bdForValue.build());
return this;
}
public Builder addAllUserAndState(
Iterable<? extends Sp.ListGroupStatusInSharedFolderReply.PBUserAndState> values) {
ensureUserAndStateIsMutable();
AbstractMessageLite.Builder.addAll(
values, userAndState_);
return this;
}
public Builder clearUserAndState() {
userAndState_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeUserAndState(int index) {
ensureUserAndStateIsMutable();
userAndState_.remove(index);
return this;
}
}
static {
defaultInstance = new ListGroupStatusInSharedFolderReply(true);
defaultInstance.initFields();
}
}
public interface SearchOrganizationUsersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasMaxResults();
int getMaxResults();
boolean hasOffset();
int getOffset();
boolean hasSearchPrefix();
String getSearchPrefix();
ByteString
getSearchPrefixBytes();
}
public static final class SearchOrganizationUsersCall extends
GeneratedMessageLite implements
SearchOrganizationUsersCallOrBuilder {
private SearchOrganizationUsersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SearchOrganizationUsersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SearchOrganizationUsersCall defaultInstance;
public static SearchOrganizationUsersCall getDefaultInstance() {
return defaultInstance;
}
public SearchOrganizationUsersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SearchOrganizationUsersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 8: {
b0_ |= 0x00000001;
maxResults_ = input.readUInt32();
break;
}
case 16: {
b0_ |= 0x00000002;
offset_ = input.readUInt32();
break;
}
case 26: {
ByteString bs = input.readBytes();
b0_ |= 0x00000004;
searchPrefix_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SearchOrganizationUsersCall> PARSER =
new AbstractParser<SearchOrganizationUsersCall>() {
public SearchOrganizationUsersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SearchOrganizationUsersCall(input, er);
}
};
@Override
public Parser<SearchOrganizationUsersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int MAX_RESULTS_FIELD_NUMBER = 1;
private int maxResults_;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public static final int OFFSET_FIELD_NUMBER = 2;
private int offset_;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public static final int SEARCH_PREFIX_FIELD_NUMBER = 3;
private Object searchPrefix_;
public boolean hasSearchPrefix() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchPrefix() {
Object ref = searchPrefix_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchPrefix_ = s;
}
return s;
}
}
public ByteString
getSearchPrefixBytes() {
Object ref = searchPrefix_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchPrefix_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
maxResults_ = 0;
offset_ = 0;
searchPrefix_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasMaxResults()) {
mii = 0;
return false;
}
if (!hasOffset()) {
mii = 0;
return false;
}
if (!hasSearchPrefix()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeUInt32(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeUInt32(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
output.writeBytes(3, getSearchPrefixBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeUInt32Size(1, maxResults_);
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeUInt32Size(2, offset_);
}
if (((b0_ & 0x00000004) == 0x00000004)) {
size += CodedOutputStream
.computeBytesSize(3, getSearchPrefixBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SearchOrganizationUsersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SearchOrganizationUsersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SearchOrganizationUsersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SearchOrganizationUsersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SearchOrganizationUsersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SearchOrganizationUsersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SearchOrganizationUsersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SearchOrganizationUsersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SearchOrganizationUsersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SearchOrganizationUsersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SearchOrganizationUsersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SearchOrganizationUsersCall, Builder>
implements
Sp.SearchOrganizationUsersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
maxResults_ = 0;
b0_ = (b0_ & ~0x00000001);
offset_ = 0;
b0_ = (b0_ & ~0x00000002);
searchPrefix_ = "";
b0_ = (b0_ & ~0x00000004);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SearchOrganizationUsersCall getDefaultInstanceForType() {
return Sp.SearchOrganizationUsersCall.getDefaultInstance();
}
public Sp.SearchOrganizationUsersCall build() {
Sp.SearchOrganizationUsersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SearchOrganizationUsersCall buildPartial() {
Sp.SearchOrganizationUsersCall result = new Sp.SearchOrganizationUsersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.maxResults_ = maxResults_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.offset_ = offset_;
if (((from_b0_ & 0x00000004) == 0x00000004)) {
to_b0_ |= 0x00000004;
}
result.searchPrefix_ = searchPrefix_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SearchOrganizationUsersCall other) {
if (other == Sp.SearchOrganizationUsersCall.getDefaultInstance()) return this;
if (other.hasMaxResults()) {
setMaxResults(other.getMaxResults());
}
if (other.hasOffset()) {
setOffset(other.getOffset());
}
if (other.hasSearchPrefix()) {
b0_ |= 0x00000004;
searchPrefix_ = other.searchPrefix_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasMaxResults()) {
return false;
}
if (!hasOffset()) {
return false;
}
if (!hasSearchPrefix()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SearchOrganizationUsersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SearchOrganizationUsersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private int maxResults_ ;
public boolean hasMaxResults() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public int getMaxResults() {
return maxResults_;
}
public Builder setMaxResults(int value) {
b0_ |= 0x00000001;
maxResults_ = value;
return this;
}
public Builder clearMaxResults() {
b0_ = (b0_ & ~0x00000001);
maxResults_ = 0;
return this;
}
private int offset_ ;
public boolean hasOffset() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public int getOffset() {
return offset_;
}
public Builder setOffset(int value) {
b0_ |= 0x00000002;
offset_ = value;
return this;
}
public Builder clearOffset() {
b0_ = (b0_ & ~0x00000002);
offset_ = 0;
return this;
}
private Object searchPrefix_ = "";
public boolean hasSearchPrefix() {
return ((b0_ & 0x00000004) == 0x00000004);
}
public String getSearchPrefix() {
Object ref = searchPrefix_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
searchPrefix_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getSearchPrefixBytes() {
Object ref = searchPrefix_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
searchPrefix_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setSearchPrefix(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchPrefix_ = value;
return this;
}
public Builder clearSearchPrefix() {
b0_ = (b0_ & ~0x00000004);
searchPrefix_ = getDefaultInstance().getSearchPrefix();
return this;
}
public Builder setSearchPrefixBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000004;
searchPrefix_ = value;
return this;
}
}
static {
defaultInstance = new SearchOrganizationUsersCall(true);
defaultInstance.initFields();
}
}
public interface SearchOrganizationUsersReplyOrBuilder extends
MessageLiteOrBuilder {
List<Sp.PBUser> 
getMatchingUsersList();
Sp.PBUser getMatchingUsers(int index);
int getMatchingUsersCount();
}
public static final class SearchOrganizationUsersReply extends
GeneratedMessageLite implements
SearchOrganizationUsersReplyOrBuilder {
private SearchOrganizationUsersReply(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SearchOrganizationUsersReply(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SearchOrganizationUsersReply defaultInstance;
public static SearchOrganizationUsersReply getDefaultInstance() {
return defaultInstance;
}
public SearchOrganizationUsersReply getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SearchOrganizationUsersReply(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
if (!((mutable_b0_ & 0x00000001) == 0x00000001)) {
matchingUsers_ = new ArrayList<Sp.PBUser>();
mutable_b0_ |= 0x00000001;
}
matchingUsers_.add(input.readMessage(Sp.PBUser.PARSER, er));
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
if (((mutable_b0_ & 0x00000001) == 0x00000001)) {
matchingUsers_ = Collections.unmodifiableList(matchingUsers_);
}
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SearchOrganizationUsersReply> PARSER =
new AbstractParser<SearchOrganizationUsersReply>() {
public SearchOrganizationUsersReply parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SearchOrganizationUsersReply(input, er);
}
};
@Override
public Parser<SearchOrganizationUsersReply> getParserForType() {
return PARSER;
}
public static final int MATCHING_USERS_FIELD_NUMBER = 1;
private List<Sp.PBUser> matchingUsers_;
public List<Sp.PBUser> getMatchingUsersList() {
return matchingUsers_;
}
public List<? extends Sp.PBUserOrBuilder> 
getMatchingUsersOrBuilderList() {
return matchingUsers_;
}
public int getMatchingUsersCount() {
return matchingUsers_.size();
}
public Sp.PBUser getMatchingUsers(int index) {
return matchingUsers_.get(index);
}
public Sp.PBUserOrBuilder getMatchingUsersOrBuilder(
int index) {
return matchingUsers_.get(index);
}
private void initFields() {
matchingUsers_ = Collections.emptyList();
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
for (int i = 0; i < getMatchingUsersCount(); i++) {
if (!getMatchingUsers(i).isInitialized()) {
mii = 0;
return false;
}
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
for (int i = 0; i < matchingUsers_.size(); i++) {
output.writeMessage(1, matchingUsers_.get(i));
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
for (int i = 0; i < matchingUsers_.size(); i++) {
size += CodedOutputStream
.computeMessageSize(1, matchingUsers_.get(i));
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SearchOrganizationUsersReply parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SearchOrganizationUsersReply parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SearchOrganizationUsersReply parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SearchOrganizationUsersReply parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SearchOrganizationUsersReply parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SearchOrganizationUsersReply parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SearchOrganizationUsersReply parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SearchOrganizationUsersReply parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SearchOrganizationUsersReply parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SearchOrganizationUsersReply parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SearchOrganizationUsersReply prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SearchOrganizationUsersReply, Builder>
implements
Sp.SearchOrganizationUsersReplyOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
matchingUsers_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SearchOrganizationUsersReply getDefaultInstanceForType() {
return Sp.SearchOrganizationUsersReply.getDefaultInstance();
}
public Sp.SearchOrganizationUsersReply build() {
Sp.SearchOrganizationUsersReply result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SearchOrganizationUsersReply buildPartial() {
Sp.SearchOrganizationUsersReply result = new Sp.SearchOrganizationUsersReply(this);
int from_b0_ = b0_;
if (((b0_ & 0x00000001) == 0x00000001)) {
matchingUsers_ = Collections.unmodifiableList(matchingUsers_);
b0_ = (b0_ & ~0x00000001);
}
result.matchingUsers_ = matchingUsers_;
return result;
}
public Builder mergeFrom(Sp.SearchOrganizationUsersReply other) {
if (other == Sp.SearchOrganizationUsersReply.getDefaultInstance()) return this;
if (!other.matchingUsers_.isEmpty()) {
if (matchingUsers_.isEmpty()) {
matchingUsers_ = other.matchingUsers_;
b0_ = (b0_ & ~0x00000001);
} else {
ensureMatchingUsersIsMutable();
matchingUsers_.addAll(other.matchingUsers_);
}
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
for (int i = 0; i < getMatchingUsersCount(); i++) {
if (!getMatchingUsers(i).isInitialized()) {
return false;
}
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SearchOrganizationUsersReply pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SearchOrganizationUsersReply) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private List<Sp.PBUser> matchingUsers_ =
Collections.emptyList();
private void ensureMatchingUsersIsMutable() {
if (!((b0_ & 0x00000001) == 0x00000001)) {
matchingUsers_ = new ArrayList<Sp.PBUser>(matchingUsers_);
b0_ |= 0x00000001;
}
}
public List<Sp.PBUser> getMatchingUsersList() {
return Collections.unmodifiableList(matchingUsers_);
}
public int getMatchingUsersCount() {
return matchingUsers_.size();
}
public Sp.PBUser getMatchingUsers(int index) {
return matchingUsers_.get(index);
}
public Builder setMatchingUsers(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureMatchingUsersIsMutable();
matchingUsers_.set(index, value);
return this;
}
public Builder setMatchingUsers(
int index, Sp.PBUser.Builder bdForValue) {
ensureMatchingUsersIsMutable();
matchingUsers_.set(index, bdForValue.build());
return this;
}
public Builder addMatchingUsers(Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureMatchingUsersIsMutable();
matchingUsers_.add(value);
return this;
}
public Builder addMatchingUsers(
int index, Sp.PBUser value) {
if (value == null) {
throw new NullPointerException();
}
ensureMatchingUsersIsMutable();
matchingUsers_.add(index, value);
return this;
}
public Builder addMatchingUsers(
Sp.PBUser.Builder bdForValue) {
ensureMatchingUsersIsMutable();
matchingUsers_.add(bdForValue.build());
return this;
}
public Builder addMatchingUsers(
int index, Sp.PBUser.Builder bdForValue) {
ensureMatchingUsersIsMutable();
matchingUsers_.add(index, bdForValue.build());
return this;
}
public Builder addAllMatchingUsers(
Iterable<? extends Sp.PBUser> values) {
ensureMatchingUsersIsMutable();
AbstractMessageLite.Builder.addAll(
values, matchingUsers_);
return this;
}
public Builder clearMatchingUsers() {
matchingUsers_ = Collections.emptyList();
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder removeMatchingUsers(int index) {
ensureMatchingUsersIsMutable();
matchingUsers_.remove(index);
return this;
}
}
static {
defaultInstance = new SearchOrganizationUsersReply(true);
defaultInstance.initFields();
}
}
public interface SetUrlRequireLoginCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasKey();
String getKey();
ByteString
getKeyBytes();
boolean hasRequireLogin();
boolean getRequireLogin();
}
public static final class SetUrlRequireLoginCall extends
GeneratedMessageLite implements
SetUrlRequireLoginCallOrBuilder {
private SetUrlRequireLoginCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private SetUrlRequireLoginCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final SetUrlRequireLoginCall defaultInstance;
public static SetUrlRequireLoginCall getDefaultInstance() {
return defaultInstance;
}
public SetUrlRequireLoginCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private SetUrlRequireLoginCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
key_ = bs;
break;
}
case 16: {
b0_ |= 0x00000002;
requireLogin_ = input.readBool();
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<SetUrlRequireLoginCall> PARSER =
new AbstractParser<SetUrlRequireLoginCall>() {
public SetUrlRequireLoginCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new SetUrlRequireLoginCall(input, er);
}
};
@Override
public Parser<SetUrlRequireLoginCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int KEY_FIELD_NUMBER = 1;
private Object key_;
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public static final int REQUIRE_LOGIN_FIELD_NUMBER = 2;
private boolean requireLogin_;
public boolean hasRequireLogin() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getRequireLogin() {
return requireLogin_;
}
private void initFields() {
key_ = "";
requireLogin_ = false;
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasKey()) {
mii = 0;
return false;
}
if (!hasRequireLogin()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
output.writeBool(2, requireLogin_);
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getKeyBytes());
}
if (((b0_ & 0x00000002) == 0x00000002)) {
size += CodedOutputStream
.computeBoolSize(2, requireLogin_);
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.SetUrlRequireLoginCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlRequireLoginCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlRequireLoginCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.SetUrlRequireLoginCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.SetUrlRequireLoginCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlRequireLoginCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.SetUrlRequireLoginCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.SetUrlRequireLoginCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.SetUrlRequireLoginCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.SetUrlRequireLoginCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.SetUrlRequireLoginCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.SetUrlRequireLoginCall, Builder>
implements
Sp.SetUrlRequireLoginCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
key_ = "";
b0_ = (b0_ & ~0x00000001);
requireLogin_ = false;
b0_ = (b0_ & ~0x00000002);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.SetUrlRequireLoginCall getDefaultInstanceForType() {
return Sp.SetUrlRequireLoginCall.getDefaultInstance();
}
public Sp.SetUrlRequireLoginCall build() {
Sp.SetUrlRequireLoginCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.SetUrlRequireLoginCall buildPartial() {
Sp.SetUrlRequireLoginCall result = new Sp.SetUrlRequireLoginCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.key_ = key_;
if (((from_b0_ & 0x00000002) == 0x00000002)) {
to_b0_ |= 0x00000002;
}
result.requireLogin_ = requireLogin_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.SetUrlRequireLoginCall other) {
if (other == Sp.SetUrlRequireLoginCall.getDefaultInstance()) return this;
if (other.hasKey()) {
b0_ |= 0x00000001;
key_ = other.key_;
}
if (other.hasRequireLogin()) {
setRequireLogin(other.getRequireLogin());
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasKey()) {
return false;
}
if (!hasRequireLogin()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.SetUrlRequireLoginCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.SetUrlRequireLoginCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object key_ = "";
public boolean hasKey() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getKey() {
Object ref = key_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
key_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getKeyBytes() {
Object ref = key_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
key_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setKey(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
public Builder clearKey() {
b0_ = (b0_ & ~0x00000001);
key_ = getDefaultInstance().getKey();
return this;
}
public Builder setKeyBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
key_ = value;
return this;
}
private boolean requireLogin_ ;
public boolean hasRequireLogin() {
return ((b0_ & 0x00000002) == 0x00000002);
}
public boolean getRequireLogin() {
return requireLogin_;
}
public Builder setRequireLogin(boolean value) {
b0_ |= 0x00000002;
requireLogin_ = value;
return this;
}
public Builder clearRequireLogin() {
b0_ = (b0_ & ~0x00000002);
requireLogin_ = false;
return this;
}
}
static {
defaultInstance = new SetUrlRequireLoginCall(true);
defaultInstance.initFields();
}
}
public interface ListUserLeftSharedFoldersCallOrBuilder extends
MessageLiteOrBuilder {
boolean hasUserId();
String getUserId();
ByteString
getUserIdBytes();
}
public static final class ListUserLeftSharedFoldersCall extends
GeneratedMessageLite implements
ListUserLeftSharedFoldersCallOrBuilder {
private ListUserLeftSharedFoldersCall(GeneratedMessageLite.Builder<?,?> bd) {
super(bd);
this.unknownFields = bd.getUnknownFields();
}
private ListUserLeftSharedFoldersCall(boolean noInit) { this.unknownFields = ByteString.EMPTY;}
private static final ListUserLeftSharedFoldersCall defaultInstance;
public static ListUserLeftSharedFoldersCall getDefaultInstance() {
return defaultInstance;
}
public ListUserLeftSharedFoldersCall getDefaultInstanceForType() {
return defaultInstance;
}
private final ByteString unknownFields;
private ListUserLeftSharedFoldersCall(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
initFields();
int mutable_b0_ = 0;
ByteString.Output unknownFieldsOutput =
ByteString.newOutput();
CodedOutputStream unknownFieldsCodedOutput =
CodedOutputStream.newInstance(
unknownFieldsOutput);
try {
boolean done = false;
while (!done) {
int tag = input.readTag();
switch (tag) {
case 0:
done = true;
break;
default: {
if (!parseUnknownField(input, unknownFieldsCodedOutput,
er, tag)) {
done = true;
}
break;
}
case 10: {
ByteString bs = input.readBytes();
b0_ |= 0x00000001;
userId_ = bs;
break;
}
}
}
} catch (InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
} catch (IOException e) {
throw new InvalidProtocolBufferException(
e.getMessage()).setUnfinishedMessage(this);
} finally {
try {
unknownFieldsCodedOutput.flush();
} catch (IOException e) {
} finally {
unknownFields = unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
public static Parser<ListUserLeftSharedFoldersCall> PARSER =
new AbstractParser<ListUserLeftSharedFoldersCall>() {
public ListUserLeftSharedFoldersCall parsePartialFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return new ListUserLeftSharedFoldersCall(input, er);
}
};
@Override
public Parser<ListUserLeftSharedFoldersCall> getParserForType() {
return PARSER;
}
private int b0_;
public static final int USER_ID_FIELD_NUMBER = 1;
private Object userId_;
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (ref instanceof String) {
return (String) ref;
} else {
ByteString bs = 
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
private void initFields() {
userId_ = "";
}
private byte mii = -1;
public final boolean isInitialized() {
byte isInitialized = mii;
if (isInitialized == 1) return true;
if (isInitialized == 0) return false;
if (!hasUserId()) {
mii = 0;
return false;
}
mii = 1;
return true;
}
public void writeTo(CodedOutputStream output)
throws IOException {
getSerializedSize();
if (((b0_ & 0x00000001) == 0x00000001)) {
output.writeBytes(1, getUserIdBytes());
}
output.writeRawBytes(unknownFields);
}
private int mss = -1;
public int getSerializedSize() {
int size = mss;
if (size != -1) return size;
size = 0;
if (((b0_ & 0x00000001) == 0x00000001)) {
size += CodedOutputStream
.computeBytesSize(1, getUserIdBytes());
}
size += unknownFields.size();
mss = size;
return size;
}
private static final long serialVersionUID = 0L;
@Override
protected Object writeReplace()
throws java.io.ObjectStreamException {
return super.writeReplace();
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
ByteString data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
ByteString data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(byte[] data)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
byte[] data,
ExtensionRegistryLite er)
throws InvalidProtocolBufferException {
return PARSER.parseFrom(data, er);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Sp.ListUserLeftSharedFoldersCall parseDelimitedFrom(java.io.InputStream input)
throws IOException {
return PARSER.parseDelimitedFrom(input);
}
public static Sp.ListUserLeftSharedFoldersCall parseDelimitedFrom(
java.io.InputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseDelimitedFrom(input, er);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
CodedInputStream input)
throws IOException {
return PARSER.parseFrom(input);
}
public static Sp.ListUserLeftSharedFoldersCall parseFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
return PARSER.parseFrom(input, er);
}
public static Builder newBuilder() { return Builder.create(); }
public Builder newBuilderForType() { return newBuilder(); }
public static Builder newBuilder(Sp.ListUserLeftSharedFoldersCall prototype) {
return newBuilder().mergeFrom(prototype);
}
public Builder toBuilder() { return newBuilder(this); }
public static final class Builder extends
GeneratedMessageLite.Builder<
Sp.ListUserLeftSharedFoldersCall, Builder>
implements
Sp.ListUserLeftSharedFoldersCallOrBuilder {
private Builder() {
maybeForceBuilderInitialization();
}
private void maybeForceBuilderInitialization() {
}
private static Builder create() {
return new Builder();
}
public Builder clear() {
super.clear();
userId_ = "";
b0_ = (b0_ & ~0x00000001);
return this;
}
public Builder clone() {
return create().mergeFrom(buildPartial());
}
public Sp.ListUserLeftSharedFoldersCall getDefaultInstanceForType() {
return Sp.ListUserLeftSharedFoldersCall.getDefaultInstance();
}
public Sp.ListUserLeftSharedFoldersCall build() {
Sp.ListUserLeftSharedFoldersCall result = buildPartial();
if (!result.isInitialized()) {
throw newUninitializedMessageException(result);
}
return result;
}
public Sp.ListUserLeftSharedFoldersCall buildPartial() {
Sp.ListUserLeftSharedFoldersCall result = new Sp.ListUserLeftSharedFoldersCall(this);
int from_b0_ = b0_;
int to_b0_ = 0;
if (((from_b0_ & 0x00000001) == 0x00000001)) {
to_b0_ |= 0x00000001;
}
result.userId_ = userId_;
result.b0_ = to_b0_;
return result;
}
public Builder mergeFrom(Sp.ListUserLeftSharedFoldersCall other) {
if (other == Sp.ListUserLeftSharedFoldersCall.getDefaultInstance()) return this;
if (other.hasUserId()) {
b0_ |= 0x00000001;
userId_ = other.userId_;
}
setUnknownFields(
getUnknownFields().concat(other.unknownFields));
return this;
}
public final boolean isInitialized() {
if (!hasUserId()) {
return false;
}
return true;
}
public Builder mergeFrom(
CodedInputStream input,
ExtensionRegistryLite er)
throws IOException {
Sp.ListUserLeftSharedFoldersCall pm = null;
try {
pm = PARSER.parsePartialFrom(input, er);
} catch (InvalidProtocolBufferException e) {
pm = (Sp.ListUserLeftSharedFoldersCall) e.getUnfinishedMessage();
throw e;
} finally {
if (pm != null) {
mergeFrom(pm);
}
}
return this;
}
private int b0_;
private Object userId_ = "";
public boolean hasUserId() {
return ((b0_ & 0x00000001) == 0x00000001);
}
public String getUserId() {
Object ref = userId_;
if (!(ref instanceof String)) {
ByteString bs =
(ByteString) ref;
String s = bs.toStringUtf8();
if (bs.isValidUtf8()) {
userId_ = s;
}
return s;
} else {
return (String) ref;
}
}
public ByteString
getUserIdBytes() {
Object ref = userId_;
if (ref instanceof String) {
ByteString b = 
ByteString.copyFromUtf8(
(String) ref);
userId_ = b;
return b;
} else {
return (ByteString) ref;
}
}
public Builder setUserId(
String value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
public Builder clearUserId() {
b0_ = (b0_ & ~0x00000001);
userId_ = getDefaultInstance().getUserId();
return this;
}
public Builder setUserIdBytes(
ByteString value) {
if (value == null) {
throw new NullPointerException();
}
b0_ |= 0x00000001;
userId_ = value;
return this;
}
}
static {
defaultInstance = new ListUserLeftSharedFoldersCall(true);
defaultInstance.initFields();
}
}
static {
}
public interface ISPService
{
Common.PBException encodeError(Throwable error);
public ListenableFuture<Common.Void> requestToSignUp(String emailAddress) throws Exception;
public ListenableFuture<Sp.SignUpWithCodeReply> signUpWithCode(String signupCode, ByteString password, String firstName, String lastName) throws Exception;
public ListenableFuture<Sp.ResolveSignUpCodeReply> resolveSignUpCode(String code) throws Exception;
public ListenableFuture<Common.Void> sendEmailVerification() throws Exception;
public ListenableFuture<Common.Void> verifyEmail(String verificationCode) throws Exception;
public ListenableFuture<Common.Void> signOut() throws Exception;
public ListenableFuture<Sp.RegisterDeviceReply> registerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, List<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception;
public ListenableFuture<Sp.InviteToOrganizationReply> inviteToOrganization(String emailAddress) throws Exception;
public ListenableFuture<Common.Void> acceptOrganizationInvitation(Integer organizationId) throws Exception;
public ListenableFuture<Common.Void> deleteOrganizationInvitation(Integer organizationId) throws Exception;
public ListenableFuture<Common.Void> noop() throws Exception;
public ListenableFuture<Common.Void> shareFolder(String folderName, ByteString shareId, List<Common.PBSubjectPermissions> subjectPermissions, String note, Boolean external, Boolean suppressSharingRulesWarnings) throws Exception;
public ListenableFuture<Common.Void> joinSharedFolder(ByteString sharedId, Boolean external) throws Exception;
public ListenableFuture<Common.Void> ignoreSharedFolderInvitation(ByteString sharedId) throws Exception;
public ListenableFuture<Common.Void> leaveSharedFolder(ByteString sharedId) throws Exception;
public ListenableFuture<Sp.ListPendingFolderInvitationsReply> listPendingFolderInvitations() throws Exception;
public ListenableFuture<Common.Void> emailUser(String subject, String body) throws Exception;
public ListenableFuture<Sp.GetUserPreferencesReply> getUserPreferences(ByteString deviceId) throws Exception;
public ListenableFuture<Common.Void> setUserPreferences(String userId, String firstName, String lastName, ByteString deviceId, String deviceName) throws Exception;
public ListenableFuture<Sp.ListOrganizationMembersReply> listOrganizationMembers(Integer maxResults, Integer offset, String searchString) throws Exception;
public ListenableFuture<Common.Void> sendPasswordResetEmail(String userEmail) throws Exception;
public ListenableFuture<Common.Void> resetPassword(String passwordResetToken, ByteString newCredentials) throws Exception;
public ListenableFuture<Common.Void> changePassword(ByteString oldCredentials, ByteString newCredentials) throws Exception;
public ListenableFuture<Common.Void> setAuthorizationLevel(String userEmail, Sp.PBAuthorizationLevel authLevel) throws Exception;
public ListenableFuture<Common.Void> deactivateUser(String userId, Boolean eraseDevices) throws Exception;
public ListenableFuture<Common.Void> updateACL(ByteString storeId, String subject, Common.PBPermissions permissions, Boolean suppressSharingRulesWarnings) throws Exception;
public ListenableFuture<Common.Void> deleteACL(ByteString storeId, String subject) throws Exception;
public ListenableFuture<Common.Void> noop2(Long crlEpoch) throws Exception;
public ListenableFuture<Common.Void> noop3() throws Exception;
public ListenableFuture<Common.Void> unlinkDevice(ByteString deviceId, Boolean erase) throws Exception;
public ListenableFuture<Sp.GetDeviceInfoReply> getDeviceInfo(List<ByteString> deviceId) throws Exception;
public ListenableFuture<Sp.ListUserDevicesReply> listUserDevices(String userId) throws Exception;
public ListenableFuture<Sp.ListOrganizationSharedFoldersReply> listOrganizationSharedFolders(Integer maxResults, Integer offset, String searchString) throws Exception;
public ListenableFuture<Sp.ListSharedFoldersReply> listUserJoinedSharedFolders(String userId, Integer maxResults, Integer offset, String searchString) throws Exception;
public ListenableFuture<Sp.ListSharedFoldersReply> listUserLeftSharedFolders(String userId) throws Exception;
public ListenableFuture<Sp.GetOrganizationInvitationsReply> getOrganizationInvitations() throws Exception;
public ListenableFuture<Sp.GetOrgPreferencesReply> getOrgPreferences() throws Exception;
public ListenableFuture<Common.Void> setOrgPreferences(String orgName, String organizationContactPhone) throws Exception;
public ListenableFuture<Sp.GetUnsubscribeEmailReply> unsubscribeEmail(String unsubscribeToken) throws Exception;
public ListenableFuture<Sp.GetAuthorizationLevelReply> getAuthorizationLevel() throws Exception;
public ListenableFuture<Sp.GetTeamServerUserIDReply> getTeamServerUserID() throws Exception;
public ListenableFuture<Sp.RegisterDeviceReply> registerTeamServerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, List<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception;
public ListenableFuture<Common.Void> extendSession() throws Exception;
public ListenableFuture<Sp.ListOrganizationInvitedUsersReply> listOrganizationInvitedUsers() throws Exception;
public ListenableFuture<Sp.GetCommandQueueHeadReply> getCommandQueueHead(ByteString deviceId) throws Exception;
public ListenableFuture<Sp.AckCommandQueueHeadReply> ackCommandQueueHead(ByteString deviceId, Long epoch, Boolean error) throws Exception;
public ListenableFuture<Common.Void> deleteOrganizationInvitationForUser(String userId) throws Exception;
public ListenableFuture<Common.Void> setDeviceOSFamilyAndName(ByteString deviceId, String osFamily, String osName) throws Exception;
public ListenableFuture<Sp.GetACLReply> getACL(Long epoch) throws Exception;
public ListenableFuture<Sp.RecertifyDeviceReply> recertifyDevice(ByteString deviceId, ByteString csr) throws Exception;
public ListenableFuture<Sp.RecertifyDeviceReply> recertifyTeamServerDevice(ByteString deviceId, ByteString csr) throws Exception;
public ListenableFuture<Sp.GetOrganizationIDReply> getOrganizationID() throws Exception;
public ListenableFuture<Sp.SignInUserReply> credentialSignIn(String userId, ByteString credential) throws Exception;
public ListenableFuture<Common.Void> validateCredential(String userId, ByteString credential) throws Exception;
public ListenableFuture<Sp.SignInUserReply> signInUser(String userId, ByteString credential) throws Exception;
public ListenableFuture<Common.Void> signInDevice(String userId, ByteString did) throws Exception;
public ListenableFuture<Sp.ExtAuthSessionNonces> extAuthBeginTransaction() throws Exception;
public ListenableFuture<Sp.ExtAuthSessionAttributes> extAuthGetSessionAttributes(String sessionNonce) throws Exception;
public ListenableFuture<Sp.MobileAccessCode> noop4() throws Exception;
public ListenableFuture<Sp.AuthorizeAPIClientReply> authorizeAPIClient(String accessCode, String deviceName) throws Exception;
public ListenableFuture<Sp.ListSharedFoldersReply> listSharedFolders(List<ByteString> storeId) throws Exception;
public ListenableFuture<Common.Void> addUserToWhitelist(String userEmail) throws Exception;
public ListenableFuture<Common.Void> removeUserFromWhitelist(String userEmail) throws Exception;
public ListenableFuture<Sp.ListWhitelistedUsersReply> listWhitelistedUsers() throws Exception;
public ListenableFuture<Common.Void> setSharedFolderName(ByteString shareId, String folderName) throws Exception;
public ListenableFuture<Sp.CheckQuotaReply> checkQuota(List<Sp.CheckQuotaCall.PBStoreUsage> store) throws Exception;
public ListenableFuture<Common.Void> setQuota(Long quota) throws Exception;
public ListenableFuture<Common.Void> removeQuota() throws Exception;
public ListenableFuture<Sp.GetQuotaReply> getQuota() throws Exception;
public ListenableFuture<Sp.CreateUrlReply> createUrl(String soid) throws Exception;
public ListenableFuture<Sp.GetUrlInfoReply> getUrlInfo(String key, ByteString password) throws Exception;
public ListenableFuture<Common.Void> setUrlExpires(String key, Long expires) throws Exception;
public ListenableFuture<Common.Void> removeUrlExpires(String key) throws Exception;
public ListenableFuture<Common.Void> removeUrl(String key) throws Exception;
public ListenableFuture<Common.Void> setUrlPassword(String key, ByteString password) throws Exception;
public ListenableFuture<Common.Void> removeUrlPassword(String key) throws Exception;
public ListenableFuture<Common.Void> validateUrlPassword(String key, ByteString password) throws Exception;
public ListenableFuture<Common.Void> destroySharedFolder(ByteString sharedId) throws Exception;
public ListenableFuture<Common.Void> sendPriorityDefectEmail(String defectId, String contactEmail, String subject, String message) throws Exception;
public ListenableFuture<Sp.SetupTwoFactorReply> setupTwoFactor() throws Exception;
public ListenableFuture<Common.Void> setTwoFactorEnforcement(Boolean enforce, Integer currentCode, String userId) throws Exception;
public ListenableFuture<Sp.ListUrlsForStoreReply> listUrlsForStore(ByteString sharedId) throws Exception;
public ListenableFuture<Common.Void> provideSecondFactor(Integer currentCode) throws Exception;
public ListenableFuture<Common.Void> provideBackupCode(String backupCode) throws Exception;
public ListenableFuture<Sp.GetBackupCodesReply> getBackupCodes() throws Exception;
public ListenableFuture<Sp.CreateGroupReply> createGroup(String commonName) throws Exception;
public ListenableFuture<Common.Void> setGroupCommonName(Integer groupId, String commonName) throws Exception;
public ListenableFuture<Common.Void> addGroupMembers(Integer groupId, List<String> userEmails) throws Exception;
public ListenableFuture<Common.Void> removeGroupMembers(Integer groupId, List<String> userEmails) throws Exception;
public ListenableFuture<Common.Void> deleteGroup(Integer groupId) throws Exception;
public ListenableFuture<Sp.ListGroupsReply> listGroups(Integer maxResults, Integer offset, String searchPrefix) throws Exception;
public ListenableFuture<Sp.ListGroupMembersReply> listGroupMembers(Integer groupId) throws Exception;
public ListenableFuture<Common.Void> setTwoFactorSetupEnforcement(Sp.PBTwoFactorEnforcementLevel level) throws Exception;
public ListenableFuture<Sp.GetTwoFactorSetupEnforcementReply> getTwoFactorSetupEnforcement() throws Exception;
public ListenableFuture<Sp.ListGroupStatusInSharedFolderReply> listGroupStatusInSharedFolder(Integer groupId, ByteString shareId) throws Exception;
public ListenableFuture<Common.Void> syncGroupsWithLdapEndpoint() throws Exception;
public ListenableFuture<Sp.GetUserSettingsTokenReply> getUserSettingsToken() throws Exception;
public ListenableFuture<Common.Void> setUserSettingsToken(String token) throws Exception;
public ListenableFuture<Common.Void> deleteUserSettingsToken() throws Exception;
public ListenableFuture<Sp.SearchOrganizationUsersReply> searchOrganizationUsers(Integer maxResults, Integer offset, String searchPrefix) throws Exception;
public ListenableFuture<Common.Void> setUrlRequireLogin(String key, Boolean requireLogin) throws Exception;
public ListenableFuture<Sp.MobileAccessCode> getAccessCodeForMobile() throws Exception;
public ListenableFuture<Sp.MobileAccessCode> getAccessCode() throws Exception;
public ListenableFuture<Sp.RegisterDeviceReply> registerStorageAgent(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, List<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception;
}
public static class SPServiceReactor
{
Sp.ISPService _service;
public enum ServiceRpcTypes {
__ERROR__,
REQUEST_TO_SIGN_UP,
SIGN_UP_WITH_CODE,
RESOLVE_SIGN_UP_CODE,
SEND_EMAIL_VERIFICATION,
VERIFY_EMAIL,
SIGN_OUT,
REGISTER_DEVICE,
INVITE_TO_ORGANIZATION,
ACCEPT_ORGANIZATION_INVITATION,
DELETE_ORGANIZATION_INVITATION,
NOOP,
SHARE_FOLDER,
JOIN_SHARED_FOLDER,
IGNORE_SHARED_FOLDER_INVITATION,
LEAVE_SHARED_FOLDER,
LIST_PENDING_FOLDER_INVITATIONS,
EMAIL_USER,
GET_USER_PREFERENCES,
SET_USER_PREFERENCES,
LIST_ORGANIZATION_MEMBERS,
SEND_PASSWORD_RESET_EMAIL,
RESET_PASSWORD,
CHANGE_PASSWORD,
SET_AUTHORIZATION_LEVEL,
DEACTIVATE_USER,
UPDATE_ACL,
DELETE_ACL,
NOOP2,
NOOP3,
UNLINK_DEVICE,
GET_DEVICE_INFO,
LIST_USER_DEVICES,
LIST_ORGANIZATION_SHARED_FOLDERS,
LIST_USER_JOINED_SHARED_FOLDERS,
LIST_USER_LEFT_SHARED_FOLDERS,
GET_ORGANIZATION_INVITATIONS,
GET_ORG_PREFERENCES,
SET_ORG_PREFERENCES,
UNSUBSCRIBE_EMAIL,
GET_AUTHORIZATION_LEVEL,
GET_TEAM_SERVER_USER_ID,
REGISTER_TEAM_SERVER_DEVICE,
EXTEND_SESSION,
LIST_ORGANIZATION_INVITED_USERS,
GET_COMMAND_QUEUE_HEAD,
ACK_COMMAND_QUEUE_HEAD,
DELETE_ORGANIZATION_INVITATION_FOR_USER,
SET_DEVICE_OSFAMILY_AND_NAME,
GET_ACL,
RECERTIFY_DEVICE,
RECERTIFY_TEAM_SERVER_DEVICE,
GET_ORGANIZATION_ID,
CREDENTIAL_SIGN_IN,
VALIDATE_CREDENTIAL,
SIGN_IN_USER,
SIGN_IN_DEVICE,
EXT_AUTH_BEGIN_TRANSACTION,
EXT_AUTH_GET_SESSION_ATTRIBUTES,
NOOP4,
AUTHORIZE_APICLIENT,
LIST_SHARED_FOLDERS,
ADD_USER_TO_WHITELIST,
REMOVE_USER_FROM_WHITELIST,
LIST_WHITELISTED_USERS,
SET_SHARED_FOLDER_NAME,
CHECK_QUOTA,
SET_QUOTA,
REMOVE_QUOTA,
GET_QUOTA,
CREATE_URL,
GET_URL_INFO,
SET_URL_EXPIRES,
REMOVE_URL_EXPIRES,
REMOVE_URL,
SET_URL_PASSWORD,
REMOVE_URL_PASSWORD,
VALIDATE_URL_PASSWORD,
DESTROY_SHARED_FOLDER,
SEND_PRIORITY_DEFECT_EMAIL,
SETUP_TWO_FACTOR,
SET_TWO_FACTOR_ENFORCEMENT,
LIST_URLS_FOR_STORE,
PROVIDE_SECOND_FACTOR,
PROVIDE_BACKUP_CODE,
GET_BACKUP_CODES,
CREATE_GROUP,
SET_GROUP_COMMON_NAME,
ADD_GROUP_MEMBERS,
REMOVE_GROUP_MEMBERS,
DELETE_GROUP,
LIST_GROUPS,
LIST_GROUP_MEMBERS,
SET_TWO_FACTOR_SETUP_ENFORCEMENT,
GET_TWO_FACTOR_SETUP_ENFORCEMENT,
LIST_GROUP_STATUS_IN_SHARED_FOLDER,
SYNC_GROUPS_WITH_LDAP_ENDPOINT,
GET_USER_SETTINGS_TOKEN,
SET_USER_SETTINGS_TOKEN,
DELETE_USER_SETTINGS_TOKEN,
SEARCH_ORGANIZATION_USERS,
SET_URL_REQUIRE_LOGIN,
GET_ACCESS_CODE_FOR_MOBILE,
GET_ACCESS_CODE,
REGISTER_STORAGE_AGENT
}
public SPServiceReactor(Sp.ISPService service)
{
_service = service;
}
public ListenableFuture<byte[]> react(byte[] data)
{
ListenableFuture<? extends GeneratedMessageLite> reply;
int callType;
try {
RpcService.Payload p = RpcService.Payload.parseFrom(data);
callType = p.getType();
ServiceRpcTypes t;
try {
t = ServiceRpcTypes.values()[callType];
} catch (ArrayIndexOutOfBoundsException ex) {
throw new InvalidProtocolBufferException("Unknown message type: " + callType + ". Wrong protocol version.");
}
switch (t) {
case REQUEST_TO_SIGN_UP: {
Sp.RequestToSignUpCall call = Sp.RequestToSignUpCall.parseFrom(p.getPayloadData());
reply = _service.requestToSignUp(call.getEmailAddress());
break;
}
case SIGN_UP_WITH_CODE: {
Sp.SignUpWithCodeCall call = Sp.SignUpWithCodeCall.parseFrom(p.getPayloadData());
reply = _service.signUpWithCode(call.getSignupCode(),
call.getPassword(),
call.getFirstName(),
call.getLastName());
break;
}
case RESOLVE_SIGN_UP_CODE: {
Sp.ResolveSignUpCodeCall call = Sp.ResolveSignUpCodeCall.parseFrom(p.getPayloadData());
reply = _service.resolveSignUpCode(call.getCode());
break;
}
case SEND_EMAIL_VERIFICATION: {
reply = _service.sendEmailVerification();
break;
}
case VERIFY_EMAIL: {
Sp.VerifyEmailCall call = Sp.VerifyEmailCall.parseFrom(p.getPayloadData());
reply = _service.verifyEmail(call.getVerificationCode());
break;
}
case SIGN_OUT: {
reply = _service.signOut();
break;
}
case REGISTER_DEVICE: {
Sp.RegisterDeviceCall call = Sp.RegisterDeviceCall.parseFrom(p.getPayloadData());
reply = _service.registerDevice(call.getDeviceId(),
call.getCsr(),
call.getOsFamily(),
call.getOsName(),
call.getDeviceName(),
call.getInterfacesList(),
call.hasToken() ? call.getToken() : null);
break;
}
case INVITE_TO_ORGANIZATION: {
Sp.InviteToOrganizationCall call = Sp.InviteToOrganizationCall.parseFrom(p.getPayloadData());
reply = _service.inviteToOrganization(call.getEmailAddress());
break;
}
case ACCEPT_ORGANIZATION_INVITATION: {
Sp.AcceptOrganizationInvitationCall call = Sp.AcceptOrganizationInvitationCall.parseFrom(p.getPayloadData());
reply = _service.acceptOrganizationInvitation(call.getOrganizationId());
break;
}
case DELETE_ORGANIZATION_INVITATION: {
Sp.DeleteOrganizationInvitationCall call = Sp.DeleteOrganizationInvitationCall.parseFrom(p.getPayloadData());
reply = _service.deleteOrganizationInvitation(call.getOrganizationId());
break;
}
case NOOP: {
reply = _service.noop();
break;
}
case SHARE_FOLDER: {
Sp.ShareFolderCall call = Sp.ShareFolderCall.parseFrom(p.getPayloadData());
reply = _service.shareFolder(call.getFolderName(),
call.getShareId(),
call.getSubjectPermissionsList(),
call.hasNote() ? call.getNote() : null,
call.hasExternal() ? call.getExternal() : null,
call.hasSuppressSharingRulesWarnings() ? call.getSuppressSharingRulesWarnings() : null);
break;
}
case JOIN_SHARED_FOLDER: {
Sp.JoinSharedFolderCall call = Sp.JoinSharedFolderCall.parseFrom(p.getPayloadData());
reply = _service.joinSharedFolder(call.getSharedId(),
call.hasExternal() ? call.getExternal() : null);
break;
}
case IGNORE_SHARED_FOLDER_INVITATION: {
Sp.IgnoreSharedFolderCall call = Sp.IgnoreSharedFolderCall.parseFrom(p.getPayloadData());
reply = _service.ignoreSharedFolderInvitation(call.getSharedId());
break;
}
case LEAVE_SHARED_FOLDER: {
Sp.LeaveSharedFolderCall call = Sp.LeaveSharedFolderCall.parseFrom(p.getPayloadData());
reply = _service.leaveSharedFolder(call.getSharedId());
break;
}
case LIST_PENDING_FOLDER_INVITATIONS: {
reply = _service.listPendingFolderInvitations();
break;
}
case EMAIL_USER: {
Sp.EmailUserCall call = Sp.EmailUserCall.parseFrom(p.getPayloadData());
reply = _service.emailUser(call.getSubject(),
call.getBody());
break;
}
case GET_USER_PREFERENCES: {
Sp.GetUserPreferencesCall call = Sp.GetUserPreferencesCall.parseFrom(p.getPayloadData());
reply = _service.getUserPreferences(call.hasDeviceId() ? call.getDeviceId() : null);
break;
}
case SET_USER_PREFERENCES: {
Sp.SetUserPreferencesCall call = Sp.SetUserPreferencesCall.parseFrom(p.getPayloadData());
reply = _service.setUserPreferences(call.getUserId(),
call.hasFirstName() ? call.getFirstName() : null,
call.hasLastName() ? call.getLastName() : null,
call.hasDeviceId() ? call.getDeviceId() : null,
call.hasDeviceName() ? call.getDeviceName() : null);
break;
}
case LIST_ORGANIZATION_MEMBERS: {
Sp.ListOrganizationMembersCall call = Sp.ListOrganizationMembersCall.parseFrom(p.getPayloadData());
reply = _service.listOrganizationMembers(call.getMaxResults(),
call.getOffset(),
call.hasSearchString() ? call.getSearchString() : null);
break;
}
case SEND_PASSWORD_RESET_EMAIL: {
Sp.SendPasswordResetEmailCall call = Sp.SendPasswordResetEmailCall.parseFrom(p.getPayloadData());
reply = _service.sendPasswordResetEmail(call.getUserEmail());
break;
}
case RESET_PASSWORD: {
Sp.ResetPasswordCall call = Sp.ResetPasswordCall.parseFrom(p.getPayloadData());
reply = _service.resetPassword(call.getPasswordResetToken(),
call.getNewCredentials());
break;
}
case CHANGE_PASSWORD: {
Sp.ChangePasswordCall call = Sp.ChangePasswordCall.parseFrom(p.getPayloadData());
reply = _service.changePassword(call.getOldCredentials(),
call.getNewCredentials());
break;
}
case SET_AUTHORIZATION_LEVEL: {
Sp.SetAuthorizationLevelCall call = Sp.SetAuthorizationLevelCall.parseFrom(p.getPayloadData());
reply = _service.setAuthorizationLevel(call.getUserEmail(),
call.getAuthLevel());
break;
}
case DEACTIVATE_USER: {
Sp.DeactivateUserCall call = Sp.DeactivateUserCall.parseFrom(p.getPayloadData());
reply = _service.deactivateUser(call.getUserId(),
call.getEraseDevices());
break;
}
case UPDATE_ACL: {
Sp.UpdateACLCall call = Sp.UpdateACLCall.parseFrom(p.getPayloadData());
reply = _service.updateACL(call.getStoreId(),
call.getSubject(),
call.getPermissions(),
call.hasSuppressSharingRulesWarnings() ? call.getSuppressSharingRulesWarnings() : null);
break;
}
case DELETE_ACL: {
Sp.DeleteACLCall call = Sp.DeleteACLCall.parseFrom(p.getPayloadData());
reply = _service.deleteACL(call.getStoreId(),
call.getSubject());
break;
}
case NOOP2: {
Sp.GetUserCRLCall call = Sp.GetUserCRLCall.parseFrom(p.getPayloadData());
reply = _service.noop2(call.getCrlEpoch());
break;
}
case NOOP3: {
reply = _service.noop3();
break;
}
case UNLINK_DEVICE: {
Sp.UnlinkDeviceCall call = Sp.UnlinkDeviceCall.parseFrom(p.getPayloadData());
reply = _service.unlinkDevice(call.getDeviceId(),
call.getErase());
break;
}
case GET_DEVICE_INFO: {
Sp.GetDeviceInfoCall call = Sp.GetDeviceInfoCall.parseFrom(p.getPayloadData());
reply = _service.getDeviceInfo(call.getDeviceIdList());
break;
}
case LIST_USER_DEVICES: {
Sp.ListUserDevicesCall call = Sp.ListUserDevicesCall.parseFrom(p.getPayloadData());
reply = _service.listUserDevices(call.getUserId());
break;
}
case LIST_ORGANIZATION_SHARED_FOLDERS: {
Sp.ListOrganizationSharedFoldersCall call = Sp.ListOrganizationSharedFoldersCall.parseFrom(p.getPayloadData());
reply = _service.listOrganizationSharedFolders(call.getMaxResults(),
call.getOffset(),
call.hasSearchString() ? call.getSearchString() : null);
break;
}
case LIST_USER_JOINED_SHARED_FOLDERS: {
Sp.ListUserJoinedSharedFoldersCall call = Sp.ListUserJoinedSharedFoldersCall.parseFrom(p.getPayloadData());
reply = _service.listUserJoinedSharedFolders(call.getUserId(),
call.getMaxResults(),
call.getOffset(),
call.hasSearchString() ? call.getSearchString() : null);
break;
}
case LIST_USER_LEFT_SHARED_FOLDERS: {
Sp.ListUserLeftSharedFoldersCall call = Sp.ListUserLeftSharedFoldersCall.parseFrom(p.getPayloadData());
reply = _service.listUserLeftSharedFolders(call.getUserId());
break;
}
case GET_ORGANIZATION_INVITATIONS: {
reply = _service.getOrganizationInvitations();
break;
}
case GET_ORG_PREFERENCES: {
reply = _service.getOrgPreferences();
break;
}
case SET_ORG_PREFERENCES: {
Sp.SetOrgPreferencesCall call = Sp.SetOrgPreferencesCall.parseFrom(p.getPayloadData());
reply = _service.setOrgPreferences(call.hasOrgName() ? call.getOrgName() : null,
call.hasOrganizationContactPhone() ? call.getOrganizationContactPhone() : null);
break;
}
case UNSUBSCRIBE_EMAIL: {
Sp.SetUnsubscribeEmailCall call = Sp.SetUnsubscribeEmailCall.parseFrom(p.getPayloadData());
reply = _service.unsubscribeEmail(call.getUnsubscribeToken());
break;
}
case GET_AUTHORIZATION_LEVEL: {
reply = _service.getAuthorizationLevel();
break;
}
case GET_TEAM_SERVER_USER_ID: {
reply = _service.getTeamServerUserID();
break;
}
case REGISTER_TEAM_SERVER_DEVICE: {
Sp.RegisterDeviceCall call = Sp.RegisterDeviceCall.parseFrom(p.getPayloadData());
reply = _service.registerTeamServerDevice(call.getDeviceId(),
call.getCsr(),
call.getOsFamily(),
call.getOsName(),
call.getDeviceName(),
call.getInterfacesList(),
call.hasToken() ? call.getToken() : null);
break;
}
case EXTEND_SESSION: {
reply = _service.extendSession();
break;
}
case LIST_ORGANIZATION_INVITED_USERS: {
reply = _service.listOrganizationInvitedUsers();
break;
}
case GET_COMMAND_QUEUE_HEAD: {
Sp.GetCommandQueueHeadCall call = Sp.GetCommandQueueHeadCall.parseFrom(p.getPayloadData());
reply = _service.getCommandQueueHead(call.getDeviceId());
break;
}
case ACK_COMMAND_QUEUE_HEAD: {
Sp.AckCommandQueueHeadCall call = Sp.AckCommandQueueHeadCall.parseFrom(p.getPayloadData());
reply = _service.ackCommandQueueHead(call.getDeviceId(),
call.getEpoch(),
call.getError());
break;
}
case DELETE_ORGANIZATION_INVITATION_FOR_USER: {
Sp.DeleteOrganizationInvitationForUserCall call = Sp.DeleteOrganizationInvitationForUserCall.parseFrom(p.getPayloadData());
reply = _service.deleteOrganizationInvitationForUser(call.getUserId());
break;
}
case SET_DEVICE_OSFAMILY_AND_NAME: {
Sp.SetDeviceOSFamilyAndNameCall call = Sp.SetDeviceOSFamilyAndNameCall.parseFrom(p.getPayloadData());
reply = _service.setDeviceOSFamilyAndName(call.getDeviceId(),
call.getOsFamily(),
call.getOsName());
break;
}
case GET_ACL: {
Sp.GetACLCall call = Sp.GetACLCall.parseFrom(p.getPayloadData());
reply = _service.getACL(call.getEpoch());
break;
}
case RECERTIFY_DEVICE: {
Sp.RecertifyDeviceCall call = Sp.RecertifyDeviceCall.parseFrom(p.getPayloadData());
reply = _service.recertifyDevice(call.getDeviceId(),
call.getCsr());
break;
}
case RECERTIFY_TEAM_SERVER_DEVICE: {
Sp.RecertifyDeviceCall call = Sp.RecertifyDeviceCall.parseFrom(p.getPayloadData());
reply = _service.recertifyTeamServerDevice(call.getDeviceId(),
call.getCsr());
break;
}
case GET_ORGANIZATION_ID: {
reply = _service.getOrganizationID();
break;
}
case CREDENTIAL_SIGN_IN: {
Sp.SignInUserCall call = Sp.SignInUserCall.parseFrom(p.getPayloadData());
reply = _service.credentialSignIn(call.getUserId(),
call.getCredential());
break;
}
case VALIDATE_CREDENTIAL: {
Sp.SignInUserCall call = Sp.SignInUserCall.parseFrom(p.getPayloadData());
reply = _service.validateCredential(call.getUserId(),
call.getCredential());
break;
}
case SIGN_IN_USER: {
Sp.SignInUserCall call = Sp.SignInUserCall.parseFrom(p.getPayloadData());
reply = _service.signInUser(call.getUserId(),
call.getCredential());
break;
}
case SIGN_IN_DEVICE: {
Sp.SignInDeviceCall call = Sp.SignInDeviceCall.parseFrom(p.getPayloadData());
reply = _service.signInDevice(call.getUserId(),
call.getDid());
break;
}
case EXT_AUTH_BEGIN_TRANSACTION: {
reply = _service.extAuthBeginTransaction();
break;
}
case EXT_AUTH_GET_SESSION_ATTRIBUTES: {
Sp.ExtAuthSessionQuery call = Sp.ExtAuthSessionQuery.parseFrom(p.getPayloadData());
reply = _service.extAuthGetSessionAttributes(call.getSessionNonce());
break;
}
case NOOP4: {
reply = _service.noop4();
break;
}
case AUTHORIZE_APICLIENT: {
Sp.AuthorizeAPIClientCall call = Sp.AuthorizeAPIClientCall.parseFrom(p.getPayloadData());
reply = _service.authorizeAPIClient(call.hasAccessCode() ? call.getAccessCode() : null,
call.hasDeviceName() ? call.getDeviceName() : null);
break;
}
case LIST_SHARED_FOLDERS: {
Sp.ListSharedFoldersCall call = Sp.ListSharedFoldersCall.parseFrom(p.getPayloadData());
reply = _service.listSharedFolders(call.getStoreIdList());
break;
}
case ADD_USER_TO_WHITELIST: {
Sp.AddUserToWhitelistCall call = Sp.AddUserToWhitelistCall.parseFrom(p.getPayloadData());
reply = _service.addUserToWhitelist(call.getUserEmail());
break;
}
case REMOVE_USER_FROM_WHITELIST: {
Sp.RemoveUserFromWhitelistCall call = Sp.RemoveUserFromWhitelistCall.parseFrom(p.getPayloadData());
reply = _service.removeUserFromWhitelist(call.getUserEmail());
break;
}
case LIST_WHITELISTED_USERS: {
reply = _service.listWhitelistedUsers();
break;
}
case SET_SHARED_FOLDER_NAME: {
Sp.SetSharedFolderNameCall call = Sp.SetSharedFolderNameCall.parseFrom(p.getPayloadData());
reply = _service.setSharedFolderName(call.getShareId(),
call.getFolderName());
break;
}
case CHECK_QUOTA: {
Sp.CheckQuotaCall call = Sp.CheckQuotaCall.parseFrom(p.getPayloadData());
reply = _service.checkQuota(call.getStoreList());
break;
}
case SET_QUOTA: {
Sp.SetQuotaCall call = Sp.SetQuotaCall.parseFrom(p.getPayloadData());
reply = _service.setQuota(call.getQuota());
break;
}
case REMOVE_QUOTA: {
reply = _service.removeQuota();
break;
}
case GET_QUOTA: {
reply = _service.getQuota();
break;
}
case CREATE_URL: {
Sp.CreateUrlCall call = Sp.CreateUrlCall.parseFrom(p.getPayloadData());
reply = _service.createUrl(call.getSoid());
break;
}
case GET_URL_INFO: {
Sp.GetUrlInfoCall call = Sp.GetUrlInfoCall.parseFrom(p.getPayloadData());
reply = _service.getUrlInfo(call.getKey(),
call.hasPassword() ? call.getPassword() : null);
break;
}
case SET_URL_EXPIRES: {
Sp.SetUrlExpiresCall call = Sp.SetUrlExpiresCall.parseFrom(p.getPayloadData());
reply = _service.setUrlExpires(call.getKey(),
call.getExpires());
break;
}
case REMOVE_URL_EXPIRES: {
Sp.RemoveUrlExpiresCall call = Sp.RemoveUrlExpiresCall.parseFrom(p.getPayloadData());
reply = _service.removeUrlExpires(call.getKey());
break;
}
case REMOVE_URL: {
Sp.RemoveUrlCall call = Sp.RemoveUrlCall.parseFrom(p.getPayloadData());
reply = _service.removeUrl(call.getKey());
break;
}
case SET_URL_PASSWORD: {
Sp.SetUrlPasswordCall call = Sp.SetUrlPasswordCall.parseFrom(p.getPayloadData());
reply = _service.setUrlPassword(call.getKey(),
call.getPassword());
break;
}
case REMOVE_URL_PASSWORD: {
Sp.RemoveUrlPasswordCall call = Sp.RemoveUrlPasswordCall.parseFrom(p.getPayloadData());
reply = _service.removeUrlPassword(call.getKey());
break;
}
case VALIDATE_URL_PASSWORD: {
Sp.ValidateUrlPasswordCall call = Sp.ValidateUrlPasswordCall.parseFrom(p.getPayloadData());
reply = _service.validateUrlPassword(call.getKey(),
call.getPassword());
break;
}
case DESTROY_SHARED_FOLDER: {
Sp.DestroySharedFolderCall call = Sp.DestroySharedFolderCall.parseFrom(p.getPayloadData());
reply = _service.destroySharedFolder(call.getSharedId());
break;
}
case SEND_PRIORITY_DEFECT_EMAIL: {
Sp.SendPriorityDefectEmailCall call = Sp.SendPriorityDefectEmailCall.parseFrom(p.getPayloadData());
reply = _service.sendPriorityDefectEmail(call.getDefectId(),
call.getContactEmail(),
call.getSubject(),
call.getMessage());
break;
}
case SETUP_TWO_FACTOR: {
reply = _service.setupTwoFactor();
break;
}
case SET_TWO_FACTOR_ENFORCEMENT: {
Sp.SetTwoFactorEnforcementCall call = Sp.SetTwoFactorEnforcementCall.parseFrom(p.getPayloadData());
reply = _service.setTwoFactorEnforcement(call.getEnforce(),
call.hasCurrentCode() ? call.getCurrentCode() : null,
call.hasUserId() ? call.getUserId() : null);
break;
}
case LIST_URLS_FOR_STORE: {
Sp.ListUrlsForStoreCall call = Sp.ListUrlsForStoreCall.parseFrom(p.getPayloadData());
reply = _service.listUrlsForStore(call.getSharedId());
break;
}
case PROVIDE_SECOND_FACTOR: {
Sp.ProvideSecondFactorCall call = Sp.ProvideSecondFactorCall.parseFrom(p.getPayloadData());
reply = _service.provideSecondFactor(call.getCurrentCode());
break;
}
case PROVIDE_BACKUP_CODE: {
Sp.ProvideBackupCodeCall call = Sp.ProvideBackupCodeCall.parseFrom(p.getPayloadData());
reply = _service.provideBackupCode(call.getBackupCode());
break;
}
case GET_BACKUP_CODES: {
reply = _service.getBackupCodes();
break;
}
case CREATE_GROUP: {
Sp.CreateGroupCall call = Sp.CreateGroupCall.parseFrom(p.getPayloadData());
reply = _service.createGroup(call.getCommonName());
break;
}
case SET_GROUP_COMMON_NAME: {
Sp.SetGroupCommonNameCall call = Sp.SetGroupCommonNameCall.parseFrom(p.getPayloadData());
reply = _service.setGroupCommonName(call.getGroupId(),
call.getCommonName());
break;
}
case ADD_GROUP_MEMBERS: {
Sp.AddGroupMembersCall call = Sp.AddGroupMembersCall.parseFrom(p.getPayloadData());
reply = _service.addGroupMembers(call.getGroupId(),
call.getUserEmailsList());
break;
}
case REMOVE_GROUP_MEMBERS: {
Sp.RemoveGroupMembersCall call = Sp.RemoveGroupMembersCall.parseFrom(p.getPayloadData());
reply = _service.removeGroupMembers(call.getGroupId(),
call.getUserEmailsList());
break;
}
case DELETE_GROUP: {
Sp.DeleteGroupCall call = Sp.DeleteGroupCall.parseFrom(p.getPayloadData());
reply = _service.deleteGroup(call.getGroupId());
break;
}
case LIST_GROUPS: {
Sp.ListGroupsCall call = Sp.ListGroupsCall.parseFrom(p.getPayloadData());
reply = _service.listGroups(call.getMaxResults(),
call.getOffset(),
call.hasSearchPrefix() ? call.getSearchPrefix() : null);
break;
}
case LIST_GROUP_MEMBERS: {
Sp.ListGroupMembersCall call = Sp.ListGroupMembersCall.parseFrom(p.getPayloadData());
reply = _service.listGroupMembers(call.getGroupId());
break;
}
case SET_TWO_FACTOR_SETUP_ENFORCEMENT: {
Sp.SetTwoFactorSetupEnforcementCall call = Sp.SetTwoFactorSetupEnforcementCall.parseFrom(p.getPayloadData());
reply = _service.setTwoFactorSetupEnforcement(call.getLevel());
break;
}
case GET_TWO_FACTOR_SETUP_ENFORCEMENT: {
reply = _service.getTwoFactorSetupEnforcement();
break;
}
case LIST_GROUP_STATUS_IN_SHARED_FOLDER: {
Sp.ListGroupStatusInSharedFolderCall call = Sp.ListGroupStatusInSharedFolderCall.parseFrom(p.getPayloadData());
reply = _service.listGroupStatusInSharedFolder(call.getGroupId(),
call.getShareId());
break;
}
case SYNC_GROUPS_WITH_LDAP_ENDPOINT: {
reply = _service.syncGroupsWithLdapEndpoint();
break;
}
case GET_USER_SETTINGS_TOKEN: {
reply = _service.getUserSettingsToken();
break;
}
case SET_USER_SETTINGS_TOKEN: {
Sp.SetUserSettingsTokenCall call = Sp.SetUserSettingsTokenCall.parseFrom(p.getPayloadData());
reply = _service.setUserSettingsToken(call.getToken());
break;
}
case DELETE_USER_SETTINGS_TOKEN: {
reply = _service.deleteUserSettingsToken();
break;
}
case SEARCH_ORGANIZATION_USERS: {
Sp.SearchOrganizationUsersCall call = Sp.SearchOrganizationUsersCall.parseFrom(p.getPayloadData());
reply = _service.searchOrganizationUsers(call.getMaxResults(),
call.getOffset(),
call.getSearchPrefix());
break;
}
case SET_URL_REQUIRE_LOGIN: {
Sp.SetUrlRequireLoginCall call = Sp.SetUrlRequireLoginCall.parseFrom(p.getPayloadData());
reply = _service.setUrlRequireLogin(call.getKey(),
call.getRequireLogin());
break;
}
case GET_ACCESS_CODE_FOR_MOBILE: {
reply = _service.getAccessCodeForMobile();
break;
}
case GET_ACCESS_CODE: {
reply = _service.getAccessCode();
break;
}
case REGISTER_STORAGE_AGENT: {
Sp.RegisterDeviceCall call = Sp.RegisterDeviceCall.parseFrom(p.getPayloadData());
reply = _service.registerStorageAgent(call.getDeviceId(),
call.getCsr(),
call.getOsFamily(),
call.getOsName(),
call.getDeviceName(),
call.getInterfacesList(),
call.hasToken() ? call.getToken() : null);
break;
}
default:
throw new InvalidProtocolBufferException("Invalid RPC call: " + t);
}
if (reply == null) {
throw new NullPointerException("SPService: implementation returned a null pointer for call " + t);
}
} catch (Exception e) {
SettableFuture<GeneratedMessageLite> r = SettableFuture.create();
r.setException(e);
reply = r;
callType = ServiceRpcTypes.__ERROR__.ordinal();
}
final SettableFuture<byte[]> future = SettableFuture.create();
final int finalCallType = callType;
addCallback(reply, new FutureCallback<GeneratedMessageLite>()
{
@Override
public void onSuccess(GeneratedMessageLite r)
{
RpcService.Payload p = RpcService.Payload.newBuilder()
.setType(finalCallType)
.setPayloadData(r.toByteString())
.build();
future.set(p.toByteArray());
}
@Override
public void onFailure(Throwable error)
{
RpcService.Payload p = RpcService.Payload.newBuilder()
.setType(ServiceRpcTypes.__ERROR__.ordinal())
.setPayloadData(_service.encodeError(error).toByteString())
.build();
future.set(p.toByteArray());
}
});
return future;
}
}
public static class SPServiceStub
{
public interface SPServiceStubCallbacks
{
public ListenableFuture<byte[]> doRPC(byte[] data);
Throwable decodeError(Common.PBException error);
}
SPServiceStubCallbacks _callbacks;
public SPServiceStub(SPServiceStubCallbacks callbacks)
{
_callbacks = callbacks;
}
private <T extends MessageLite> ListenableFuture<T>
sendQuery(Sp.SPServiceReactor.ServiceRpcTypes type, ByteString bytes, MessageLite.Builder b, Class<T> tClass)
{
RpcService.Payload p = RpcService.Payload.newBuilder()
.setType(type.ordinal())
.setPayloadData(bytes)
.build();
SettableFuture<T> receiveFuture = SettableFuture.create();
ListenableFuture<byte[]> sendFuture = _callbacks.doRPC(p.toByteArray());
addCallback(sendFuture, new ReplyCallback<T>(receiveFuture, type, b, tClass));
return receiveFuture;
}
private class ReplyCallback<T extends MessageLite>
implements FutureCallback<byte[]>
{
private final SettableFuture<T> _replyFuture;
private final Sp.SPServiceReactor.ServiceRpcTypes _replyType;
private final MessageLite.Builder _bd;
private final Class<T> _tClass;
public ReplyCallback(SettableFuture<T> future,
Sp.SPServiceReactor.ServiceRpcTypes type, MessageLite.Builder bd, Class<T> tClass)
{
_replyFuture = future;
_replyType = type;
_bd = bd;
_tClass = tClass;
}
@Override
public void onSuccess(byte[] bytes)
{
try {
RpcService.Payload p = RpcService.Payload.parseFrom(bytes);
if (p.getType() == Sp.SPServiceReactor.ServiceRpcTypes.__ERROR__.ordinal()) {
Common.PBException error = Common.PBException.parseFrom(p.getPayloadData());
_replyFuture.setException(_callbacks.decodeError(error));
return;
}
if (p.getType() != _replyType.ordinal()) {
throw new RuntimeException("Unexpected response received from the server. Code: " + p.getType() + ". Expecting: " + _replyType.ordinal());
}
MessageLite r = _bd.mergeFrom(p.getPayloadData()).build();
T reply = _tClass.cast(r);
_replyFuture.set(reply);
} catch (Throwable e) {
_replyFuture.setException(e);
}
}
@Override
public void onFailure(Throwable throwable)
{
_replyFuture.setException(throwable);
}
}
public ListenableFuture<Common.Void> requestToSignUp(String emailAddress)
{
Sp.RequestToSignUpCall.Builder bd = Sp.RequestToSignUpCall.newBuilder();
bd.setEmailAddress(emailAddress);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REQUEST_TO_SIGN_UP, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.SignUpWithCodeReply> signUpWithCode(String signupCode, ByteString password, String firstName, String lastName)
{
Sp.SignUpWithCodeCall.Builder bd = Sp.SignUpWithCodeCall.newBuilder();
bd.setSignupCode(signupCode);
bd.setPassword(password);
bd.setFirstName(firstName);
bd.setLastName(lastName);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SIGN_UP_WITH_CODE, bd.build().toByteString(), Sp.SignUpWithCodeReply.newBuilder(), Sp.SignUpWithCodeReply.class);
}
public ListenableFuture<Sp.ResolveSignUpCodeReply> resolveSignUpCode(String code)
{
Sp.ResolveSignUpCodeCall.Builder bd = Sp.ResolveSignUpCodeCall.newBuilder();
bd.setCode(code);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.RESOLVE_SIGN_UP_CODE, bd.build().toByteString(), Sp.ResolveSignUpCodeReply.newBuilder(), Sp.ResolveSignUpCodeReply.class);
}
public ListenableFuture<Common.Void> sendEmailVerification()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SEND_EMAIL_VERIFICATION, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> verifyEmail(String verificationCode)
{
Sp.VerifyEmailCall.Builder bd = Sp.VerifyEmailCall.newBuilder();
bd.setVerificationCode(verificationCode);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.VERIFY_EMAIL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> signOut()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SIGN_OUT, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.RegisterDeviceReply> registerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token)
{
Sp.RegisterDeviceCall.Builder bd = Sp.RegisterDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setCsr(csr);
bd.setOsFamily(osFamily);
bd.setOsName(osName);
bd.setDeviceName(deviceName);
if (interfaces != null) { bd.addAllInterfaces(interfaces); }
if (token != null) { bd.setToken(token); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REGISTER_DEVICE, bd.build().toByteString(), Sp.RegisterDeviceReply.newBuilder(), Sp.RegisterDeviceReply.class);
}
public ListenableFuture<Sp.InviteToOrganizationReply> inviteToOrganization(String emailAddress)
{
Sp.InviteToOrganizationCall.Builder bd = Sp.InviteToOrganizationCall.newBuilder();
bd.setEmailAddress(emailAddress);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.INVITE_TO_ORGANIZATION, bd.build().toByteString(), Sp.InviteToOrganizationReply.newBuilder(), Sp.InviteToOrganizationReply.class);
}
public ListenableFuture<Common.Void> acceptOrganizationInvitation(Integer organizationId)
{
Sp.AcceptOrganizationInvitationCall.Builder bd = Sp.AcceptOrganizationInvitationCall.newBuilder();
bd.setOrganizationId(organizationId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.ACCEPT_ORGANIZATION_INVITATION, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> deleteOrganizationInvitation(Integer organizationId)
{
Sp.DeleteOrganizationInvitationCall.Builder bd = Sp.DeleteOrganizationInvitationCall.newBuilder();
bd.setOrganizationId(organizationId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DELETE_ORGANIZATION_INVITATION, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> noop()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.NOOP, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> shareFolder(String folderName, ByteString shareId, Iterable<Common.PBSubjectPermissions> subjectPermissions, String note, Boolean external, Boolean suppressSharingRulesWarnings)
{
Sp.ShareFolderCall.Builder bd = Sp.ShareFolderCall.newBuilder();
bd.setFolderName(folderName);
bd.setShareId(shareId);
if (subjectPermissions != null) { bd.addAllSubjectPermissions(subjectPermissions); }
if (note != null) { bd.setNote(note); }
if (external != null) { bd.setExternal(external); }
if (suppressSharingRulesWarnings != null) { bd.setSuppressSharingRulesWarnings(suppressSharingRulesWarnings); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SHARE_FOLDER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> joinSharedFolder(ByteString sharedId, Boolean external)
{
Sp.JoinSharedFolderCall.Builder bd = Sp.JoinSharedFolderCall.newBuilder();
bd.setSharedId(sharedId);
if (external != null) { bd.setExternal(external); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.JOIN_SHARED_FOLDER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> ignoreSharedFolderInvitation(ByteString sharedId)
{
Sp.IgnoreSharedFolderCall.Builder bd = Sp.IgnoreSharedFolderCall.newBuilder();
bd.setSharedId(sharedId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.IGNORE_SHARED_FOLDER_INVITATION, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> leaveSharedFolder(ByteString sharedId)
{
Sp.LeaveSharedFolderCall.Builder bd = Sp.LeaveSharedFolderCall.newBuilder();
bd.setSharedId(sharedId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LEAVE_SHARED_FOLDER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListPendingFolderInvitationsReply> listPendingFolderInvitations()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_PENDING_FOLDER_INVITATIONS, bd.build().toByteString(), Sp.ListPendingFolderInvitationsReply.newBuilder(), Sp.ListPendingFolderInvitationsReply.class);
}
public ListenableFuture<Common.Void> emailUser(String subject, String body)
{
Sp.EmailUserCall.Builder bd = Sp.EmailUserCall.newBuilder();
bd.setSubject(subject);
bd.setBody(body);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.EMAIL_USER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetUserPreferencesReply> getUserPreferences(ByteString deviceId)
{
Sp.GetUserPreferencesCall.Builder bd = Sp.GetUserPreferencesCall.newBuilder();
if (deviceId != null) { bd.setDeviceId(deviceId); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_USER_PREFERENCES, bd.build().toByteString(), Sp.GetUserPreferencesReply.newBuilder(), Sp.GetUserPreferencesReply.class);
}
public ListenableFuture<Common.Void> setUserPreferences(String userId, String firstName, String lastName, ByteString deviceId, String deviceName)
{
Sp.SetUserPreferencesCall.Builder bd = Sp.SetUserPreferencesCall.newBuilder();
bd.setUserId(userId);
if (firstName != null) { bd.setFirstName(firstName); }
if (lastName != null) { bd.setLastName(lastName); }
if (deviceId != null) { bd.setDeviceId(deviceId); }
if (deviceName != null) { bd.setDeviceName(deviceName); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_USER_PREFERENCES, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListOrganizationMembersReply> listOrganizationMembers(Integer maxResults, Integer offset, String searchString)
{
Sp.ListOrganizationMembersCall.Builder bd = Sp.ListOrganizationMembersCall.newBuilder();
bd.setMaxResults(maxResults);
bd.setOffset(offset);
if (searchString != null) { bd.setSearchString(searchString); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_ORGANIZATION_MEMBERS, bd.build().toByteString(), Sp.ListOrganizationMembersReply.newBuilder(), Sp.ListOrganizationMembersReply.class);
}
public ListenableFuture<Common.Void> sendPasswordResetEmail(String userEmail)
{
Sp.SendPasswordResetEmailCall.Builder bd = Sp.SendPasswordResetEmailCall.newBuilder();
bd.setUserEmail(userEmail);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SEND_PASSWORD_RESET_EMAIL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> resetPassword(String passwordResetToken, ByteString newCredentials)
{
Sp.ResetPasswordCall.Builder bd = Sp.ResetPasswordCall.newBuilder();
bd.setPasswordResetToken(passwordResetToken);
bd.setNewCredentials(newCredentials);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.RESET_PASSWORD, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> changePassword(ByteString oldCredentials, ByteString newCredentials)
{
Sp.ChangePasswordCall.Builder bd = Sp.ChangePasswordCall.newBuilder();
bd.setOldCredentials(oldCredentials);
bd.setNewCredentials(newCredentials);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.CHANGE_PASSWORD, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> setAuthorizationLevel(String userEmail, Sp.PBAuthorizationLevel authLevel)
{
Sp.SetAuthorizationLevelCall.Builder bd = Sp.SetAuthorizationLevelCall.newBuilder();
bd.setUserEmail(userEmail);
bd.setAuthLevel(authLevel);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_AUTHORIZATION_LEVEL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> deactivateUser(String userId, Boolean eraseDevices)
{
Sp.DeactivateUserCall.Builder bd = Sp.DeactivateUserCall.newBuilder();
bd.setUserId(userId);
bd.setEraseDevices(eraseDevices);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DEACTIVATE_USER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> updateACL(ByteString storeId, String subject, Common.PBPermissions permissions, Boolean suppressSharingRulesWarnings)
{
Sp.UpdateACLCall.Builder bd = Sp.UpdateACLCall.newBuilder();
bd.setStoreId(storeId);
bd.setSubject(subject);
bd.setPermissions(permissions);
if (suppressSharingRulesWarnings != null) { bd.setSuppressSharingRulesWarnings(suppressSharingRulesWarnings); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.UPDATE_ACL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> deleteACL(ByteString storeId, String subject)
{
Sp.DeleteACLCall.Builder bd = Sp.DeleteACLCall.newBuilder();
bd.setStoreId(storeId);
bd.setSubject(subject);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DELETE_ACL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> noop2(Long crlEpoch)
{
Sp.GetUserCRLCall.Builder bd = Sp.GetUserCRLCall.newBuilder();
bd.setCrlEpoch(crlEpoch);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.NOOP2, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> noop3()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.NOOP3, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> unlinkDevice(ByteString deviceId, Boolean erase)
{
Sp.UnlinkDeviceCall.Builder bd = Sp.UnlinkDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setErase(erase);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.UNLINK_DEVICE, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetDeviceInfoReply> getDeviceInfo(Iterable<ByteString> deviceId)
{
Sp.GetDeviceInfoCall.Builder bd = Sp.GetDeviceInfoCall.newBuilder();
if (deviceId != null) { bd.addAllDeviceId(deviceId); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_DEVICE_INFO, bd.build().toByteString(), Sp.GetDeviceInfoReply.newBuilder(), Sp.GetDeviceInfoReply.class);
}
public ListenableFuture<Sp.ListUserDevicesReply> listUserDevices(String userId)
{
Sp.ListUserDevicesCall.Builder bd = Sp.ListUserDevicesCall.newBuilder();
bd.setUserId(userId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_USER_DEVICES, bd.build().toByteString(), Sp.ListUserDevicesReply.newBuilder(), Sp.ListUserDevicesReply.class);
}
public ListenableFuture<Sp.ListOrganizationSharedFoldersReply> listOrganizationSharedFolders(Integer maxResults, Integer offset, String searchString)
{
Sp.ListOrganizationSharedFoldersCall.Builder bd = Sp.ListOrganizationSharedFoldersCall.newBuilder();
bd.setMaxResults(maxResults);
bd.setOffset(offset);
if (searchString != null) { bd.setSearchString(searchString); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_ORGANIZATION_SHARED_FOLDERS, bd.build().toByteString(), Sp.ListOrganizationSharedFoldersReply.newBuilder(), Sp.ListOrganizationSharedFoldersReply.class);
}
public ListenableFuture<Sp.ListSharedFoldersReply> listUserJoinedSharedFolders(String userId, Integer maxResults, Integer offset, String searchString)
{
Sp.ListUserJoinedSharedFoldersCall.Builder bd = Sp.ListUserJoinedSharedFoldersCall.newBuilder();
bd.setUserId(userId);
bd.setMaxResults(maxResults);
bd.setOffset(offset);
if (searchString != null) { bd.setSearchString(searchString); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_USER_JOINED_SHARED_FOLDERS, bd.build().toByteString(), Sp.ListSharedFoldersReply.newBuilder(), Sp.ListSharedFoldersReply.class);
}
public ListenableFuture<Sp.ListSharedFoldersReply> listUserLeftSharedFolders(String userId)
{
Sp.ListUserLeftSharedFoldersCall.Builder bd = Sp.ListUserLeftSharedFoldersCall.newBuilder();
bd.setUserId(userId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_USER_LEFT_SHARED_FOLDERS, bd.build().toByteString(), Sp.ListSharedFoldersReply.newBuilder(), Sp.ListSharedFoldersReply.class);
}
public ListenableFuture<Sp.GetOrganizationInvitationsReply> getOrganizationInvitations()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ORGANIZATION_INVITATIONS, bd.build().toByteString(), Sp.GetOrganizationInvitationsReply.newBuilder(), Sp.GetOrganizationInvitationsReply.class);
}
public ListenableFuture<Sp.GetOrgPreferencesReply> getOrgPreferences()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ORG_PREFERENCES, bd.build().toByteString(), Sp.GetOrgPreferencesReply.newBuilder(), Sp.GetOrgPreferencesReply.class);
}
public ListenableFuture<Common.Void> setOrgPreferences(String orgName, String organizationContactPhone)
{
Sp.SetOrgPreferencesCall.Builder bd = Sp.SetOrgPreferencesCall.newBuilder();
if (orgName != null) { bd.setOrgName(orgName); }
if (organizationContactPhone != null) { bd.setOrganizationContactPhone(organizationContactPhone); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_ORG_PREFERENCES, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetUnsubscribeEmailReply> unsubscribeEmail(String unsubscribeToken)
{
Sp.SetUnsubscribeEmailCall.Builder bd = Sp.SetUnsubscribeEmailCall.newBuilder();
bd.setUnsubscribeToken(unsubscribeToken);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.UNSUBSCRIBE_EMAIL, bd.build().toByteString(), Sp.GetUnsubscribeEmailReply.newBuilder(), Sp.GetUnsubscribeEmailReply.class);
}
public ListenableFuture<Sp.GetAuthorizationLevelReply> getAuthorizationLevel()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_AUTHORIZATION_LEVEL, bd.build().toByteString(), Sp.GetAuthorizationLevelReply.newBuilder(), Sp.GetAuthorizationLevelReply.class);
}
public ListenableFuture<Sp.GetTeamServerUserIDReply> getTeamServerUserID()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_TEAM_SERVER_USER_ID, bd.build().toByteString(), Sp.GetTeamServerUserIDReply.newBuilder(), Sp.GetTeamServerUserIDReply.class);
}
public ListenableFuture<Sp.RegisterDeviceReply> registerTeamServerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token)
{
Sp.RegisterDeviceCall.Builder bd = Sp.RegisterDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setCsr(csr);
bd.setOsFamily(osFamily);
bd.setOsName(osName);
bd.setDeviceName(deviceName);
if (interfaces != null) { bd.addAllInterfaces(interfaces); }
if (token != null) { bd.setToken(token); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REGISTER_TEAM_SERVER_DEVICE, bd.build().toByteString(), Sp.RegisterDeviceReply.newBuilder(), Sp.RegisterDeviceReply.class);
}
public ListenableFuture<Common.Void> extendSession()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.EXTEND_SESSION, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListOrganizationInvitedUsersReply> listOrganizationInvitedUsers()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_ORGANIZATION_INVITED_USERS, bd.build().toByteString(), Sp.ListOrganizationInvitedUsersReply.newBuilder(), Sp.ListOrganizationInvitedUsersReply.class);
}
public ListenableFuture<Sp.GetCommandQueueHeadReply> getCommandQueueHead(ByteString deviceId)
{
Sp.GetCommandQueueHeadCall.Builder bd = Sp.GetCommandQueueHeadCall.newBuilder();
bd.setDeviceId(deviceId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_COMMAND_QUEUE_HEAD, bd.build().toByteString(), Sp.GetCommandQueueHeadReply.newBuilder(), Sp.GetCommandQueueHeadReply.class);
}
public ListenableFuture<Sp.AckCommandQueueHeadReply> ackCommandQueueHead(ByteString deviceId, Long epoch, Boolean error)
{
Sp.AckCommandQueueHeadCall.Builder bd = Sp.AckCommandQueueHeadCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setEpoch(epoch);
bd.setError(error);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.ACK_COMMAND_QUEUE_HEAD, bd.build().toByteString(), Sp.AckCommandQueueHeadReply.newBuilder(), Sp.AckCommandQueueHeadReply.class);
}
public ListenableFuture<Common.Void> deleteOrganizationInvitationForUser(String userId)
{
Sp.DeleteOrganizationInvitationForUserCall.Builder bd = Sp.DeleteOrganizationInvitationForUserCall.newBuilder();
bd.setUserId(userId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DELETE_ORGANIZATION_INVITATION_FOR_USER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> setDeviceOSFamilyAndName(ByteString deviceId, String osFamily, String osName)
{
Sp.SetDeviceOSFamilyAndNameCall.Builder bd = Sp.SetDeviceOSFamilyAndNameCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setOsFamily(osFamily);
bd.setOsName(osName);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_DEVICE_OSFAMILY_AND_NAME, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetACLReply> getACL(Long epoch)
{
Sp.GetACLCall.Builder bd = Sp.GetACLCall.newBuilder();
bd.setEpoch(epoch);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ACL, bd.build().toByteString(), Sp.GetACLReply.newBuilder(), Sp.GetACLReply.class);
}
public ListenableFuture<Sp.RecertifyDeviceReply> recertifyDevice(ByteString deviceId, ByteString csr)
{
Sp.RecertifyDeviceCall.Builder bd = Sp.RecertifyDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setCsr(csr);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.RECERTIFY_DEVICE, bd.build().toByteString(), Sp.RecertifyDeviceReply.newBuilder(), Sp.RecertifyDeviceReply.class);
}
public ListenableFuture<Sp.RecertifyDeviceReply> recertifyTeamServerDevice(ByteString deviceId, ByteString csr)
{
Sp.RecertifyDeviceCall.Builder bd = Sp.RecertifyDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setCsr(csr);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.RECERTIFY_TEAM_SERVER_DEVICE, bd.build().toByteString(), Sp.RecertifyDeviceReply.newBuilder(), Sp.RecertifyDeviceReply.class);
}
public ListenableFuture<Sp.GetOrganizationIDReply> getOrganizationID()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ORGANIZATION_ID, bd.build().toByteString(), Sp.GetOrganizationIDReply.newBuilder(), Sp.GetOrganizationIDReply.class);
}
public ListenableFuture<Sp.SignInUserReply> credentialSignIn(String userId, ByteString credential)
{
Sp.SignInUserCall.Builder bd = Sp.SignInUserCall.newBuilder();
bd.setUserId(userId);
bd.setCredential(credential);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.CREDENTIAL_SIGN_IN, bd.build().toByteString(), Sp.SignInUserReply.newBuilder(), Sp.SignInUserReply.class);
}
public ListenableFuture<Common.Void> validateCredential(String userId, ByteString credential)
{
Sp.SignInUserCall.Builder bd = Sp.SignInUserCall.newBuilder();
bd.setUserId(userId);
bd.setCredential(credential);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.VALIDATE_CREDENTIAL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.SignInUserReply> signInUser(String userId, ByteString credential)
{
Sp.SignInUserCall.Builder bd = Sp.SignInUserCall.newBuilder();
bd.setUserId(userId);
bd.setCredential(credential);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SIGN_IN_USER, bd.build().toByteString(), Sp.SignInUserReply.newBuilder(), Sp.SignInUserReply.class);
}
public ListenableFuture<Common.Void> signInDevice(String userId, ByteString did)
{
Sp.SignInDeviceCall.Builder bd = Sp.SignInDeviceCall.newBuilder();
bd.setUserId(userId);
bd.setDid(did);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SIGN_IN_DEVICE, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ExtAuthSessionNonces> extAuthBeginTransaction()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.EXT_AUTH_BEGIN_TRANSACTION, bd.build().toByteString(), Sp.ExtAuthSessionNonces.newBuilder(), Sp.ExtAuthSessionNonces.class);
}
public ListenableFuture<Sp.ExtAuthSessionAttributes> extAuthGetSessionAttributes(String sessionNonce)
{
Sp.ExtAuthSessionQuery.Builder bd = Sp.ExtAuthSessionQuery.newBuilder();
bd.setSessionNonce(sessionNonce);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.EXT_AUTH_GET_SESSION_ATTRIBUTES, bd.build().toByteString(), Sp.ExtAuthSessionAttributes.newBuilder(), Sp.ExtAuthSessionAttributes.class);
}
public ListenableFuture<Sp.MobileAccessCode> noop4()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.NOOP4, bd.build().toByteString(), Sp.MobileAccessCode.newBuilder(), Sp.MobileAccessCode.class);
}
public ListenableFuture<Sp.AuthorizeAPIClientReply> authorizeAPIClient(String accessCode, String deviceName)
{
Sp.AuthorizeAPIClientCall.Builder bd = Sp.AuthorizeAPIClientCall.newBuilder();
if (accessCode != null) { bd.setAccessCode(accessCode); }
if (deviceName != null) { bd.setDeviceName(deviceName); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.AUTHORIZE_APICLIENT, bd.build().toByteString(), Sp.AuthorizeAPIClientReply.newBuilder(), Sp.AuthorizeAPIClientReply.class);
}
public ListenableFuture<Sp.ListSharedFoldersReply> listSharedFolders(Iterable<ByteString> storeId)
{
Sp.ListSharedFoldersCall.Builder bd = Sp.ListSharedFoldersCall.newBuilder();
if (storeId != null) { bd.addAllStoreId(storeId); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_SHARED_FOLDERS, bd.build().toByteString(), Sp.ListSharedFoldersReply.newBuilder(), Sp.ListSharedFoldersReply.class);
}
public ListenableFuture<Common.Void> addUserToWhitelist(String userEmail)
{
Sp.AddUserToWhitelistCall.Builder bd = Sp.AddUserToWhitelistCall.newBuilder();
bd.setUserEmail(userEmail);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.ADD_USER_TO_WHITELIST, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeUserFromWhitelist(String userEmail)
{
Sp.RemoveUserFromWhitelistCall.Builder bd = Sp.RemoveUserFromWhitelistCall.newBuilder();
bd.setUserEmail(userEmail);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_USER_FROM_WHITELIST, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListWhitelistedUsersReply> listWhitelistedUsers()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_WHITELISTED_USERS, bd.build().toByteString(), Sp.ListWhitelistedUsersReply.newBuilder(), Sp.ListWhitelistedUsersReply.class);
}
public ListenableFuture<Common.Void> setSharedFolderName(ByteString shareId, String folderName)
{
Sp.SetSharedFolderNameCall.Builder bd = Sp.SetSharedFolderNameCall.newBuilder();
bd.setShareId(shareId);
bd.setFolderName(folderName);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_SHARED_FOLDER_NAME, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.CheckQuotaReply> checkQuota(Iterable<Sp.CheckQuotaCall.PBStoreUsage> store)
{
Sp.CheckQuotaCall.Builder bd = Sp.CheckQuotaCall.newBuilder();
if (store != null) { bd.addAllStore(store); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.CHECK_QUOTA, bd.build().toByteString(), Sp.CheckQuotaReply.newBuilder(), Sp.CheckQuotaReply.class);
}
public ListenableFuture<Common.Void> setQuota(Long quota)
{
Sp.SetQuotaCall.Builder bd = Sp.SetQuotaCall.newBuilder();
bd.setQuota(quota);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_QUOTA, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeQuota()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_QUOTA, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetQuotaReply> getQuota()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_QUOTA, bd.build().toByteString(), Sp.GetQuotaReply.newBuilder(), Sp.GetQuotaReply.class);
}
public ListenableFuture<Sp.CreateUrlReply> createUrl(String soid)
{
Sp.CreateUrlCall.Builder bd = Sp.CreateUrlCall.newBuilder();
bd.setSoid(soid);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.CREATE_URL, bd.build().toByteString(), Sp.CreateUrlReply.newBuilder(), Sp.CreateUrlReply.class);
}
public ListenableFuture<Sp.GetUrlInfoReply> getUrlInfo(String key, ByteString password)
{
Sp.GetUrlInfoCall.Builder bd = Sp.GetUrlInfoCall.newBuilder();
bd.setKey(key);
if (password != null) { bd.setPassword(password); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_URL_INFO, bd.build().toByteString(), Sp.GetUrlInfoReply.newBuilder(), Sp.GetUrlInfoReply.class);
}
public ListenableFuture<Common.Void> setUrlExpires(String key, Long expires)
{
Sp.SetUrlExpiresCall.Builder bd = Sp.SetUrlExpiresCall.newBuilder();
bd.setKey(key);
bd.setExpires(expires);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_URL_EXPIRES, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeUrlExpires(String key)
{
Sp.RemoveUrlExpiresCall.Builder bd = Sp.RemoveUrlExpiresCall.newBuilder();
bd.setKey(key);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_URL_EXPIRES, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeUrl(String key)
{
Sp.RemoveUrlCall.Builder bd = Sp.RemoveUrlCall.newBuilder();
bd.setKey(key);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_URL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> setUrlPassword(String key, ByteString password)
{
Sp.SetUrlPasswordCall.Builder bd = Sp.SetUrlPasswordCall.newBuilder();
bd.setKey(key);
bd.setPassword(password);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_URL_PASSWORD, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeUrlPassword(String key)
{
Sp.RemoveUrlPasswordCall.Builder bd = Sp.RemoveUrlPasswordCall.newBuilder();
bd.setKey(key);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_URL_PASSWORD, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> validateUrlPassword(String key, ByteString password)
{
Sp.ValidateUrlPasswordCall.Builder bd = Sp.ValidateUrlPasswordCall.newBuilder();
bd.setKey(key);
bd.setPassword(password);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.VALIDATE_URL_PASSWORD, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> destroySharedFolder(ByteString sharedId)
{
Sp.DestroySharedFolderCall.Builder bd = Sp.DestroySharedFolderCall.newBuilder();
bd.setSharedId(sharedId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DESTROY_SHARED_FOLDER, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> sendPriorityDefectEmail(String defectId, String contactEmail, String subject, String message)
{
Sp.SendPriorityDefectEmailCall.Builder bd = Sp.SendPriorityDefectEmailCall.newBuilder();
bd.setDefectId(defectId);
bd.setContactEmail(contactEmail);
bd.setSubject(subject);
bd.setMessage(message);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SEND_PRIORITY_DEFECT_EMAIL, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.SetupTwoFactorReply> setupTwoFactor()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SETUP_TWO_FACTOR, bd.build().toByteString(), Sp.SetupTwoFactorReply.newBuilder(), Sp.SetupTwoFactorReply.class);
}
public ListenableFuture<Common.Void> setTwoFactorEnforcement(Boolean enforce, Integer currentCode, String userId)
{
Sp.SetTwoFactorEnforcementCall.Builder bd = Sp.SetTwoFactorEnforcementCall.newBuilder();
bd.setEnforce(enforce);
if (currentCode != null) { bd.setCurrentCode(currentCode); }
if (userId != null) { bd.setUserId(userId); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_TWO_FACTOR_ENFORCEMENT, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListUrlsForStoreReply> listUrlsForStore(ByteString sharedId)
{
Sp.ListUrlsForStoreCall.Builder bd = Sp.ListUrlsForStoreCall.newBuilder();
bd.setSharedId(sharedId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_URLS_FOR_STORE, bd.build().toByteString(), Sp.ListUrlsForStoreReply.newBuilder(), Sp.ListUrlsForStoreReply.class);
}
public ListenableFuture<Common.Void> provideSecondFactor(Integer currentCode)
{
Sp.ProvideSecondFactorCall.Builder bd = Sp.ProvideSecondFactorCall.newBuilder();
bd.setCurrentCode(currentCode);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.PROVIDE_SECOND_FACTOR, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> provideBackupCode(String backupCode)
{
Sp.ProvideBackupCodeCall.Builder bd = Sp.ProvideBackupCodeCall.newBuilder();
bd.setBackupCode(backupCode);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.PROVIDE_BACKUP_CODE, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetBackupCodesReply> getBackupCodes()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_BACKUP_CODES, bd.build().toByteString(), Sp.GetBackupCodesReply.newBuilder(), Sp.GetBackupCodesReply.class);
}
public ListenableFuture<Sp.CreateGroupReply> createGroup(String commonName)
{
Sp.CreateGroupCall.Builder bd = Sp.CreateGroupCall.newBuilder();
bd.setCommonName(commonName);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.CREATE_GROUP, bd.build().toByteString(), Sp.CreateGroupReply.newBuilder(), Sp.CreateGroupReply.class);
}
public ListenableFuture<Common.Void> setGroupCommonName(Integer groupId, String commonName)
{
Sp.SetGroupCommonNameCall.Builder bd = Sp.SetGroupCommonNameCall.newBuilder();
bd.setGroupId(groupId);
bd.setCommonName(commonName);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_GROUP_COMMON_NAME, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> addGroupMembers(Integer groupId, Iterable<String> userEmails)
{
Sp.AddGroupMembersCall.Builder bd = Sp.AddGroupMembersCall.newBuilder();
bd.setGroupId(groupId);
if (userEmails != null) { bd.addAllUserEmails(userEmails); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.ADD_GROUP_MEMBERS, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> removeGroupMembers(Integer groupId, Iterable<String> userEmails)
{
Sp.RemoveGroupMembersCall.Builder bd = Sp.RemoveGroupMembersCall.newBuilder();
bd.setGroupId(groupId);
if (userEmails != null) { bd.addAllUserEmails(userEmails); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REMOVE_GROUP_MEMBERS, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> deleteGroup(Integer groupId)
{
Sp.DeleteGroupCall.Builder bd = Sp.DeleteGroupCall.newBuilder();
bd.setGroupId(groupId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DELETE_GROUP, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.ListGroupsReply> listGroups(Integer maxResults, Integer offset, String searchPrefix)
{
Sp.ListGroupsCall.Builder bd = Sp.ListGroupsCall.newBuilder();
bd.setMaxResults(maxResults);
bd.setOffset(offset);
if (searchPrefix != null) { bd.setSearchPrefix(searchPrefix); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_GROUPS, bd.build().toByteString(), Sp.ListGroupsReply.newBuilder(), Sp.ListGroupsReply.class);
}
public ListenableFuture<Sp.ListGroupMembersReply> listGroupMembers(Integer groupId)
{
Sp.ListGroupMembersCall.Builder bd = Sp.ListGroupMembersCall.newBuilder();
bd.setGroupId(groupId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_GROUP_MEMBERS, bd.build().toByteString(), Sp.ListGroupMembersReply.newBuilder(), Sp.ListGroupMembersReply.class);
}
public ListenableFuture<Common.Void> setTwoFactorSetupEnforcement(Sp.PBTwoFactorEnforcementLevel level)
{
Sp.SetTwoFactorSetupEnforcementCall.Builder bd = Sp.SetTwoFactorSetupEnforcementCall.newBuilder();
bd.setLevel(level);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_TWO_FACTOR_SETUP_ENFORCEMENT, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetTwoFactorSetupEnforcementReply> getTwoFactorSetupEnforcement()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_TWO_FACTOR_SETUP_ENFORCEMENT, bd.build().toByteString(), Sp.GetTwoFactorSetupEnforcementReply.newBuilder(), Sp.GetTwoFactorSetupEnforcementReply.class);
}
public ListenableFuture<Sp.ListGroupStatusInSharedFolderReply> listGroupStatusInSharedFolder(Integer groupId, ByteString shareId)
{
Sp.ListGroupStatusInSharedFolderCall.Builder bd = Sp.ListGroupStatusInSharedFolderCall.newBuilder();
bd.setGroupId(groupId);
bd.setShareId(shareId);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.LIST_GROUP_STATUS_IN_SHARED_FOLDER, bd.build().toByteString(), Sp.ListGroupStatusInSharedFolderReply.newBuilder(), Sp.ListGroupStatusInSharedFolderReply.class);
}
public ListenableFuture<Common.Void> syncGroupsWithLdapEndpoint()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SYNC_GROUPS_WITH_LDAP_ENDPOINT, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.GetUserSettingsTokenReply> getUserSettingsToken()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_USER_SETTINGS_TOKEN, bd.build().toByteString(), Sp.GetUserSettingsTokenReply.newBuilder(), Sp.GetUserSettingsTokenReply.class);
}
public ListenableFuture<Common.Void> setUserSettingsToken(String token)
{
Sp.SetUserSettingsTokenCall.Builder bd = Sp.SetUserSettingsTokenCall.newBuilder();
bd.setToken(token);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_USER_SETTINGS_TOKEN, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Common.Void> deleteUserSettingsToken()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.DELETE_USER_SETTINGS_TOKEN, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.SearchOrganizationUsersReply> searchOrganizationUsers(Integer maxResults, Integer offset, String searchPrefix)
{
Sp.SearchOrganizationUsersCall.Builder bd = Sp.SearchOrganizationUsersCall.newBuilder();
bd.setMaxResults(maxResults);
bd.setOffset(offset);
bd.setSearchPrefix(searchPrefix);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SEARCH_ORGANIZATION_USERS, bd.build().toByteString(), Sp.SearchOrganizationUsersReply.newBuilder(), Sp.SearchOrganizationUsersReply.class);
}
public ListenableFuture<Common.Void> setUrlRequireLogin(String key, Boolean requireLogin)
{
Sp.SetUrlRequireLoginCall.Builder bd = Sp.SetUrlRequireLoginCall.newBuilder();
bd.setKey(key);
bd.setRequireLogin(requireLogin);
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.SET_URL_REQUIRE_LOGIN, bd.build().toByteString(), Common.Void.newBuilder(), Common.Void.class);
}
public ListenableFuture<Sp.MobileAccessCode> getAccessCodeForMobile()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ACCESS_CODE_FOR_MOBILE, bd.build().toByteString(), Sp.MobileAccessCode.newBuilder(), Sp.MobileAccessCode.class);
}
public ListenableFuture<Sp.MobileAccessCode> getAccessCode()
{
Common.Void.Builder bd = Common.Void.newBuilder();
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.GET_ACCESS_CODE, bd.build().toByteString(), Sp.MobileAccessCode.newBuilder(), Sp.MobileAccessCode.class);
}
public ListenableFuture<Sp.RegisterDeviceReply> registerStorageAgent(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token)
{
Sp.RegisterDeviceCall.Builder bd = Sp.RegisterDeviceCall.newBuilder();
bd.setDeviceId(deviceId);
bd.setCsr(csr);
bd.setOsFamily(osFamily);
bd.setOsName(osName);
bd.setDeviceName(deviceName);
if (interfaces != null) { bd.addAllInterfaces(interfaces); }
if (token != null) { bd.setToken(token); }
return sendQuery(Sp.SPServiceReactor.ServiceRpcTypes.REGISTER_STORAGE_AGENT, bd.build().toByteString(), Sp.RegisterDeviceReply.newBuilder(), Sp.RegisterDeviceReply.class);
}
}
public static class SPServiceBlockingStub
{
private final SPServiceStub _stub;
public SPServiceBlockingStub(SPServiceStub.SPServiceStubCallbacks callbacks)
{
_stub = new SPServiceStub(callbacks);
}
public Common.Void requestToSignUp(String emailAddress) throws Exception
{
try {
return get(_stub.requestToSignUp(emailAddress), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void requestToSignUp(String emailAddress, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.requestToSignUp(emailAddress), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignUpWithCodeReply signUpWithCode(String signupCode, ByteString password, String firstName, String lastName) throws Exception
{
try {
return get(_stub.signUpWithCode(signupCode, password, firstName, lastName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignUpWithCodeReply signUpWithCode(String signupCode, ByteString password, String firstName, String lastName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.signUpWithCode(signupCode, password, firstName, lastName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ResolveSignUpCodeReply resolveSignUpCode(String code) throws Exception
{
try {
return get(_stub.resolveSignUpCode(code), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ResolveSignUpCodeReply resolveSignUpCode(String code, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.resolveSignUpCode(code), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendEmailVerification() throws Exception
{
try {
return get(_stub.sendEmailVerification(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendEmailVerification(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.sendEmailVerification(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void verifyEmail(String verificationCode) throws Exception
{
try {
return get(_stub.verifyEmail(verificationCode), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void verifyEmail(String verificationCode, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.verifyEmail(verificationCode), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void signOut() throws Exception
{
try {
return get(_stub.signOut(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void signOut(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.signOut(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception
{
try {
return get(_stub.registerDevice(deviceId, csr, osFamily, osName, deviceName, interfaces, token), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.registerDevice(deviceId, csr, osFamily, osName, deviceName, interfaces, token), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.InviteToOrganizationReply inviteToOrganization(String emailAddress) throws Exception
{
try {
return get(_stub.inviteToOrganization(emailAddress), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.InviteToOrganizationReply inviteToOrganization(String emailAddress, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.inviteToOrganization(emailAddress), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void acceptOrganizationInvitation(Integer organizationId) throws Exception
{
try {
return get(_stub.acceptOrganizationInvitation(organizationId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void acceptOrganizationInvitation(Integer organizationId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.acceptOrganizationInvitation(organizationId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteOrganizationInvitation(Integer organizationId) throws Exception
{
try {
return get(_stub.deleteOrganizationInvitation(organizationId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteOrganizationInvitation(Integer organizationId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deleteOrganizationInvitation(organizationId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop() throws Exception
{
try {
return get(_stub.noop(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.noop(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void shareFolder(String folderName, ByteString shareId, Iterable<Common.PBSubjectPermissions> subjectPermissions, String note, Boolean external, Boolean suppressSharingRulesWarnings) throws Exception
{
try {
return get(_stub.shareFolder(folderName, shareId, subjectPermissions, note, external, suppressSharingRulesWarnings), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void shareFolder(String folderName, ByteString shareId, Iterable<Common.PBSubjectPermissions> subjectPermissions, String note, Boolean external, Boolean suppressSharingRulesWarnings, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.shareFolder(folderName, shareId, subjectPermissions, note, external, suppressSharingRulesWarnings), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void joinSharedFolder(ByteString sharedId, Boolean external) throws Exception
{
try {
return get(_stub.joinSharedFolder(sharedId, external), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void joinSharedFolder(ByteString sharedId, Boolean external, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.joinSharedFolder(sharedId, external), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void ignoreSharedFolderInvitation(ByteString sharedId) throws Exception
{
try {
return get(_stub.ignoreSharedFolderInvitation(sharedId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void ignoreSharedFolderInvitation(ByteString sharedId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.ignoreSharedFolderInvitation(sharedId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void leaveSharedFolder(ByteString sharedId) throws Exception
{
try {
return get(_stub.leaveSharedFolder(sharedId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void leaveSharedFolder(ByteString sharedId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.leaveSharedFolder(sharedId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListPendingFolderInvitationsReply listPendingFolderInvitations() throws Exception
{
try {
return get(_stub.listPendingFolderInvitations(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListPendingFolderInvitationsReply listPendingFolderInvitations(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listPendingFolderInvitations(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void emailUser(String subject, String body) throws Exception
{
try {
return get(_stub.emailUser(subject, body), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void emailUser(String subject, String body, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.emailUser(subject, body), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUserPreferencesReply getUserPreferences(ByteString deviceId) throws Exception
{
try {
return get(_stub.getUserPreferences(deviceId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUserPreferencesReply getUserPreferences(ByteString deviceId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getUserPreferences(deviceId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUserPreferences(String userId, String firstName, String lastName, ByteString deviceId, String deviceName) throws Exception
{
try {
return get(_stub.setUserPreferences(userId, firstName, lastName, deviceId, deviceName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUserPreferences(String userId, String firstName, String lastName, ByteString deviceId, String deviceName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setUserPreferences(userId, firstName, lastName, deviceId, deviceName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationMembersReply listOrganizationMembers(Integer maxResults, Integer offset, String searchString) throws Exception
{
try {
return get(_stub.listOrganizationMembers(maxResults, offset, searchString), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationMembersReply listOrganizationMembers(Integer maxResults, Integer offset, String searchString, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listOrganizationMembers(maxResults, offset, searchString), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendPasswordResetEmail(String userEmail) throws Exception
{
try {
return get(_stub.sendPasswordResetEmail(userEmail), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendPasswordResetEmail(String userEmail, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.sendPasswordResetEmail(userEmail), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void resetPassword(String passwordResetToken, ByteString newCredentials) throws Exception
{
try {
return get(_stub.resetPassword(passwordResetToken, newCredentials), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void resetPassword(String passwordResetToken, ByteString newCredentials, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.resetPassword(passwordResetToken, newCredentials), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void changePassword(ByteString oldCredentials, ByteString newCredentials) throws Exception
{
try {
return get(_stub.changePassword(oldCredentials, newCredentials), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void changePassword(ByteString oldCredentials, ByteString newCredentials, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.changePassword(oldCredentials, newCredentials), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setAuthorizationLevel(String userEmail, Sp.PBAuthorizationLevel authLevel) throws Exception
{
try {
return get(_stub.setAuthorizationLevel(userEmail, authLevel), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setAuthorizationLevel(String userEmail, Sp.PBAuthorizationLevel authLevel, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setAuthorizationLevel(userEmail, authLevel), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deactivateUser(String userId, Boolean eraseDevices) throws Exception
{
try {
return get(_stub.deactivateUser(userId, eraseDevices), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deactivateUser(String userId, Boolean eraseDevices, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deactivateUser(userId, eraseDevices), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void updateACL(ByteString storeId, String subject, Common.PBPermissions permissions, Boolean suppressSharingRulesWarnings) throws Exception
{
try {
return get(_stub.updateACL(storeId, subject, permissions, suppressSharingRulesWarnings), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void updateACL(ByteString storeId, String subject, Common.PBPermissions permissions, Boolean suppressSharingRulesWarnings, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.updateACL(storeId, subject, permissions, suppressSharingRulesWarnings), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteACL(ByteString storeId, String subject) throws Exception
{
try {
return get(_stub.deleteACL(storeId, subject), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteACL(ByteString storeId, String subject, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deleteACL(storeId, subject), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop2(Long crlEpoch) throws Exception
{
try {
return get(_stub.noop2(crlEpoch), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop2(Long crlEpoch, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.noop2(crlEpoch), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop3() throws Exception
{
try {
return get(_stub.noop3(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void noop3(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.noop3(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void unlinkDevice(ByteString deviceId, Boolean erase) throws Exception
{
try {
return get(_stub.unlinkDevice(deviceId, erase), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void unlinkDevice(ByteString deviceId, Boolean erase, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.unlinkDevice(deviceId, erase), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetDeviceInfoReply getDeviceInfo(Iterable<ByteString> deviceId) throws Exception
{
try {
return get(_stub.getDeviceInfo(deviceId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetDeviceInfoReply getDeviceInfo(Iterable<ByteString> deviceId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getDeviceInfo(deviceId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListUserDevicesReply listUserDevices(String userId) throws Exception
{
try {
return get(_stub.listUserDevices(userId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListUserDevicesReply listUserDevices(String userId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listUserDevices(userId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationSharedFoldersReply listOrganizationSharedFolders(Integer maxResults, Integer offset, String searchString) throws Exception
{
try {
return get(_stub.listOrganizationSharedFolders(maxResults, offset, searchString), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationSharedFoldersReply listOrganizationSharedFolders(Integer maxResults, Integer offset, String searchString, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listOrganizationSharedFolders(maxResults, offset, searchString), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listUserJoinedSharedFolders(String userId, Integer maxResults, Integer offset, String searchString) throws Exception
{
try {
return get(_stub.listUserJoinedSharedFolders(userId, maxResults, offset, searchString), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listUserJoinedSharedFolders(String userId, Integer maxResults, Integer offset, String searchString, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listUserJoinedSharedFolders(userId, maxResults, offset, searchString), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listUserLeftSharedFolders(String userId) throws Exception
{
try {
return get(_stub.listUserLeftSharedFolders(userId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listUserLeftSharedFolders(String userId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listUserLeftSharedFolders(userId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrganizationInvitationsReply getOrganizationInvitations() throws Exception
{
try {
return get(_stub.getOrganizationInvitations(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrganizationInvitationsReply getOrganizationInvitations(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getOrganizationInvitations(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrgPreferencesReply getOrgPreferences() throws Exception
{
try {
return get(_stub.getOrgPreferences(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrgPreferencesReply getOrgPreferences(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getOrgPreferences(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setOrgPreferences(String orgName, String organizationContactPhone) throws Exception
{
try {
return get(_stub.setOrgPreferences(orgName, organizationContactPhone), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setOrgPreferences(String orgName, String organizationContactPhone, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setOrgPreferences(orgName, organizationContactPhone), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUnsubscribeEmailReply unsubscribeEmail(String unsubscribeToken) throws Exception
{
try {
return get(_stub.unsubscribeEmail(unsubscribeToken), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUnsubscribeEmailReply unsubscribeEmail(String unsubscribeToken, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.unsubscribeEmail(unsubscribeToken), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetAuthorizationLevelReply getAuthorizationLevel() throws Exception
{
try {
return get(_stub.getAuthorizationLevel(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetAuthorizationLevelReply getAuthorizationLevel(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getAuthorizationLevel(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetTeamServerUserIDReply getTeamServerUserID() throws Exception
{
try {
return get(_stub.getTeamServerUserID(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetTeamServerUserIDReply getTeamServerUserID(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getTeamServerUserID(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerTeamServerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception
{
try {
return get(_stub.registerTeamServerDevice(deviceId, csr, osFamily, osName, deviceName, interfaces, token), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerTeamServerDevice(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.registerTeamServerDevice(deviceId, csr, osFamily, osName, deviceName, interfaces, token), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void extendSession() throws Exception
{
try {
return get(_stub.extendSession(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void extendSession(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.extendSession(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationInvitedUsersReply listOrganizationInvitedUsers() throws Exception
{
try {
return get(_stub.listOrganizationInvitedUsers(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListOrganizationInvitedUsersReply listOrganizationInvitedUsers(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listOrganizationInvitedUsers(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetCommandQueueHeadReply getCommandQueueHead(ByteString deviceId) throws Exception
{
try {
return get(_stub.getCommandQueueHead(deviceId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetCommandQueueHeadReply getCommandQueueHead(ByteString deviceId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getCommandQueueHead(deviceId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.AckCommandQueueHeadReply ackCommandQueueHead(ByteString deviceId, Long epoch, Boolean error) throws Exception
{
try {
return get(_stub.ackCommandQueueHead(deviceId, epoch, error), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.AckCommandQueueHeadReply ackCommandQueueHead(ByteString deviceId, Long epoch, Boolean error, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.ackCommandQueueHead(deviceId, epoch, error), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteOrganizationInvitationForUser(String userId) throws Exception
{
try {
return get(_stub.deleteOrganizationInvitationForUser(userId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteOrganizationInvitationForUser(String userId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deleteOrganizationInvitationForUser(userId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setDeviceOSFamilyAndName(ByteString deviceId, String osFamily, String osName) throws Exception
{
try {
return get(_stub.setDeviceOSFamilyAndName(deviceId, osFamily, osName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setDeviceOSFamilyAndName(ByteString deviceId, String osFamily, String osName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setDeviceOSFamilyAndName(deviceId, osFamily, osName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetACLReply getACL(Long epoch) throws Exception
{
try {
return get(_stub.getACL(epoch), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetACLReply getACL(Long epoch, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getACL(epoch), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RecertifyDeviceReply recertifyDevice(ByteString deviceId, ByteString csr) throws Exception
{
try {
return get(_stub.recertifyDevice(deviceId, csr), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RecertifyDeviceReply recertifyDevice(ByteString deviceId, ByteString csr, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.recertifyDevice(deviceId, csr), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RecertifyDeviceReply recertifyTeamServerDevice(ByteString deviceId, ByteString csr) throws Exception
{
try {
return get(_stub.recertifyTeamServerDevice(deviceId, csr), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RecertifyDeviceReply recertifyTeamServerDevice(ByteString deviceId, ByteString csr, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.recertifyTeamServerDevice(deviceId, csr), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrganizationIDReply getOrganizationID() throws Exception
{
try {
return get(_stub.getOrganizationID(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetOrganizationIDReply getOrganizationID(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getOrganizationID(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignInUserReply credentialSignIn(String userId, ByteString credential) throws Exception
{
try {
return get(_stub.credentialSignIn(userId, credential), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignInUserReply credentialSignIn(String userId, ByteString credential, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.credentialSignIn(userId, credential), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void validateCredential(String userId, ByteString credential) throws Exception
{
try {
return get(_stub.validateCredential(userId, credential), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void validateCredential(String userId, ByteString credential, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.validateCredential(userId, credential), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignInUserReply signInUser(String userId, ByteString credential) throws Exception
{
try {
return get(_stub.signInUser(userId, credential), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SignInUserReply signInUser(String userId, ByteString credential, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.signInUser(userId, credential), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void signInDevice(String userId, ByteString did) throws Exception
{
try {
return get(_stub.signInDevice(userId, did), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void signInDevice(String userId, ByteString did, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.signInDevice(userId, did), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ExtAuthSessionNonces extAuthBeginTransaction() throws Exception
{
try {
return get(_stub.extAuthBeginTransaction(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ExtAuthSessionNonces extAuthBeginTransaction(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.extAuthBeginTransaction(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ExtAuthSessionAttributes extAuthGetSessionAttributes(String sessionNonce) throws Exception
{
try {
return get(_stub.extAuthGetSessionAttributes(sessionNonce), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ExtAuthSessionAttributes extAuthGetSessionAttributes(String sessionNonce, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.extAuthGetSessionAttributes(sessionNonce), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode noop4() throws Exception
{
try {
return get(_stub.noop4(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode noop4(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.noop4(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.AuthorizeAPIClientReply authorizeAPIClient(String accessCode, String deviceName) throws Exception
{
try {
return get(_stub.authorizeAPIClient(accessCode, deviceName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.AuthorizeAPIClientReply authorizeAPIClient(String accessCode, String deviceName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.authorizeAPIClient(accessCode, deviceName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listSharedFolders(Iterable<ByteString> storeId) throws Exception
{
try {
return get(_stub.listSharedFolders(storeId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListSharedFoldersReply listSharedFolders(Iterable<ByteString> storeId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listSharedFolders(storeId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void addUserToWhitelist(String userEmail) throws Exception
{
try {
return get(_stub.addUserToWhitelist(userEmail), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void addUserToWhitelist(String userEmail, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.addUserToWhitelist(userEmail), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUserFromWhitelist(String userEmail) throws Exception
{
try {
return get(_stub.removeUserFromWhitelist(userEmail), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUserFromWhitelist(String userEmail, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeUserFromWhitelist(userEmail), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListWhitelistedUsersReply listWhitelistedUsers() throws Exception
{
try {
return get(_stub.listWhitelistedUsers(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListWhitelistedUsersReply listWhitelistedUsers(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listWhitelistedUsers(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setSharedFolderName(ByteString shareId, String folderName) throws Exception
{
try {
return get(_stub.setSharedFolderName(shareId, folderName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setSharedFolderName(ByteString shareId, String folderName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setSharedFolderName(shareId, folderName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CheckQuotaReply checkQuota(Iterable<Sp.CheckQuotaCall.PBStoreUsage> store) throws Exception
{
try {
return get(_stub.checkQuota(store), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CheckQuotaReply checkQuota(Iterable<Sp.CheckQuotaCall.PBStoreUsage> store, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.checkQuota(store), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setQuota(Long quota) throws Exception
{
try {
return get(_stub.setQuota(quota), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setQuota(Long quota, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setQuota(quota), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeQuota() throws Exception
{
try {
return get(_stub.removeQuota(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeQuota(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeQuota(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetQuotaReply getQuota() throws Exception
{
try {
return get(_stub.getQuota(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetQuotaReply getQuota(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getQuota(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CreateUrlReply createUrl(String soid) throws Exception
{
try {
return get(_stub.createUrl(soid), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CreateUrlReply createUrl(String soid, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.createUrl(soid), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUrlInfoReply getUrlInfo(String key, ByteString password) throws Exception
{
try {
return get(_stub.getUrlInfo(key, password), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUrlInfoReply getUrlInfo(String key, ByteString password, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getUrlInfo(key, password), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlExpires(String key, Long expires) throws Exception
{
try {
return get(_stub.setUrlExpires(key, expires), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlExpires(String key, Long expires, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setUrlExpires(key, expires), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrlExpires(String key) throws Exception
{
try {
return get(_stub.removeUrlExpires(key), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrlExpires(String key, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeUrlExpires(key), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrl(String key) throws Exception
{
try {
return get(_stub.removeUrl(key), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrl(String key, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeUrl(key), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlPassword(String key, ByteString password) throws Exception
{
try {
return get(_stub.setUrlPassword(key, password), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlPassword(String key, ByteString password, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setUrlPassword(key, password), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrlPassword(String key) throws Exception
{
try {
return get(_stub.removeUrlPassword(key), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeUrlPassword(String key, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeUrlPassword(key), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void validateUrlPassword(String key, ByteString password) throws Exception
{
try {
return get(_stub.validateUrlPassword(key, password), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void validateUrlPassword(String key, ByteString password, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.validateUrlPassword(key, password), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void destroySharedFolder(ByteString sharedId) throws Exception
{
try {
return get(_stub.destroySharedFolder(sharedId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void destroySharedFolder(ByteString sharedId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.destroySharedFolder(sharedId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendPriorityDefectEmail(String defectId, String contactEmail, String subject, String message) throws Exception
{
try {
return get(_stub.sendPriorityDefectEmail(defectId, contactEmail, subject, message), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void sendPriorityDefectEmail(String defectId, String contactEmail, String subject, String message, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.sendPriorityDefectEmail(defectId, contactEmail, subject, message), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SetupTwoFactorReply setupTwoFactor() throws Exception
{
try {
return get(_stub.setupTwoFactor(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SetupTwoFactorReply setupTwoFactor(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setupTwoFactor(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setTwoFactorEnforcement(Boolean enforce, Integer currentCode, String userId) throws Exception
{
try {
return get(_stub.setTwoFactorEnforcement(enforce, currentCode, userId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setTwoFactorEnforcement(Boolean enforce, Integer currentCode, String userId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setTwoFactorEnforcement(enforce, currentCode, userId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListUrlsForStoreReply listUrlsForStore(ByteString sharedId) throws Exception
{
try {
return get(_stub.listUrlsForStore(sharedId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListUrlsForStoreReply listUrlsForStore(ByteString sharedId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listUrlsForStore(sharedId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void provideSecondFactor(Integer currentCode) throws Exception
{
try {
return get(_stub.provideSecondFactor(currentCode), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void provideSecondFactor(Integer currentCode, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.provideSecondFactor(currentCode), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void provideBackupCode(String backupCode) throws Exception
{
try {
return get(_stub.provideBackupCode(backupCode), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void provideBackupCode(String backupCode, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.provideBackupCode(backupCode), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetBackupCodesReply getBackupCodes() throws Exception
{
try {
return get(_stub.getBackupCodes(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetBackupCodesReply getBackupCodes(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getBackupCodes(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CreateGroupReply createGroup(String commonName) throws Exception
{
try {
return get(_stub.createGroup(commonName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.CreateGroupReply createGroup(String commonName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.createGroup(commonName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setGroupCommonName(Integer groupId, String commonName) throws Exception
{
try {
return get(_stub.setGroupCommonName(groupId, commonName), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setGroupCommonName(Integer groupId, String commonName, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setGroupCommonName(groupId, commonName), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void addGroupMembers(Integer groupId, Iterable<String> userEmails) throws Exception
{
try {
return get(_stub.addGroupMembers(groupId, userEmails), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void addGroupMembers(Integer groupId, Iterable<String> userEmails, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.addGroupMembers(groupId, userEmails), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeGroupMembers(Integer groupId, Iterable<String> userEmails) throws Exception
{
try {
return get(_stub.removeGroupMembers(groupId, userEmails), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void removeGroupMembers(Integer groupId, Iterable<String> userEmails, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.removeGroupMembers(groupId, userEmails), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteGroup(Integer groupId) throws Exception
{
try {
return get(_stub.deleteGroup(groupId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteGroup(Integer groupId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deleteGroup(groupId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupsReply listGroups(Integer maxResults, Integer offset, String searchPrefix) throws Exception
{
try {
return get(_stub.listGroups(maxResults, offset, searchPrefix), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupsReply listGroups(Integer maxResults, Integer offset, String searchPrefix, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listGroups(maxResults, offset, searchPrefix), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupMembersReply listGroupMembers(Integer groupId) throws Exception
{
try {
return get(_stub.listGroupMembers(groupId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupMembersReply listGroupMembers(Integer groupId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listGroupMembers(groupId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setTwoFactorSetupEnforcement(Sp.PBTwoFactorEnforcementLevel level) throws Exception
{
try {
return get(_stub.setTwoFactorSetupEnforcement(level), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setTwoFactorSetupEnforcement(Sp.PBTwoFactorEnforcementLevel level, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setTwoFactorSetupEnforcement(level), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetTwoFactorSetupEnforcementReply getTwoFactorSetupEnforcement() throws Exception
{
try {
return get(_stub.getTwoFactorSetupEnforcement(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetTwoFactorSetupEnforcementReply getTwoFactorSetupEnforcement(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getTwoFactorSetupEnforcement(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupStatusInSharedFolderReply listGroupStatusInSharedFolder(Integer groupId, ByteString shareId) throws Exception
{
try {
return get(_stub.listGroupStatusInSharedFolder(groupId, shareId), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.ListGroupStatusInSharedFolderReply listGroupStatusInSharedFolder(Integer groupId, ByteString shareId, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.listGroupStatusInSharedFolder(groupId, shareId), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void syncGroupsWithLdapEndpoint() throws Exception
{
try {
return get(_stub.syncGroupsWithLdapEndpoint(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void syncGroupsWithLdapEndpoint(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.syncGroupsWithLdapEndpoint(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUserSettingsTokenReply getUserSettingsToken() throws Exception
{
try {
return get(_stub.getUserSettingsToken(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.GetUserSettingsTokenReply getUserSettingsToken(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getUserSettingsToken(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUserSettingsToken(String token) throws Exception
{
try {
return get(_stub.setUserSettingsToken(token), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUserSettingsToken(String token, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setUserSettingsToken(token), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteUserSettingsToken() throws Exception
{
try {
return get(_stub.deleteUserSettingsToken(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void deleteUserSettingsToken(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.deleteUserSettingsToken(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SearchOrganizationUsersReply searchOrganizationUsers(Integer maxResults, Integer offset, String searchPrefix) throws Exception
{
try {
return get(_stub.searchOrganizationUsers(maxResults, offset, searchPrefix), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.SearchOrganizationUsersReply searchOrganizationUsers(Integer maxResults, Integer offset, String searchPrefix, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.searchOrganizationUsers(maxResults, offset, searchPrefix), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlRequireLogin(String key, Boolean requireLogin) throws Exception
{
try {
return get(_stub.setUrlRequireLogin(key, requireLogin), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Common.Void setUrlRequireLogin(String key, Boolean requireLogin, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.setUrlRequireLogin(key, requireLogin), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode getAccessCodeForMobile() throws Exception
{
try {
return get(_stub.getAccessCodeForMobile(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode getAccessCodeForMobile(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getAccessCodeForMobile(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode getAccessCode() throws Exception
{
try {
return get(_stub.getAccessCode(), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.MobileAccessCode getAccessCode(long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.getAccessCode(), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerStorageAgent(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token) throws Exception
{
try {
return get(_stub.registerStorageAgent(deviceId, csr, osFamily, osName, deviceName, interfaces, token), Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
public Sp.RegisterDeviceReply registerStorageAgent(ByteString deviceId, ByteString csr, String osFamily, String osName, String deviceName, Iterable<Sp.RegisterDeviceCall.Interface> interfaces, String token, long timeout, TimeUnit unit) throws Exception
{
try {
return get(_stub.registerStorageAgent(deviceId, csr, osFamily, osName, deviceName, interfaces, token), timeout, unit, Exception.class);
} catch (Exception e) {
if (e.getCause() instanceof Exception) {throw (Exception)e.getCause();}
else {throw e;}
}
}
}
}
