//-----------------------------------------------------------------------------
// Copyright (c) Air Computing Inc., 2013.
//-----------------------------------------------------------------------------

// generated jar has the name 'aero-base'-<version>.jar
base {
    archivesName = 'aero-base'
}

// NOTE:
//
// the java plugin defines two sourceSets:
// main
// test
//
// you should think of a sourceSet as a group of files that are
// compiled and executed together

// define source sets
sourceSets {
    // main code (aka. everything that makes up aerofs-base)
    main {
        java {
            srcDirs 'gen', 'src/main/java'
        }
    }

    // we define a small test lib that contains
    // some helper classes and utilities that we'll
    // use in other projects. it *depends* on
    // the main sourceSet
    testutil {
        java {
            srcDir 'src/test/java'
            exclude 'com/aerofs/base/**'
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            include 'logback-test.xml'
        }
    }

    // finally, we define a source set for the unittests
    // it *depends* on the testutil sourceSet
    test {
        java {
            srcDir 'src/test/java'
            exclude 'com/aerofs/base/testlib/**'
            compileClasspath += testutil.output
            runtimeClasspath += testutil.output
        }
    }
}

// NOTE:
//
// the java plugin defines two 4 configurations:
// compile
// runtime
// archives
// default (set to runtime)
//
// the best way to think about it, is that configurations are simply
// groups of dependencies. configurations can extend other configurations
// and this *include* their dependencies (in other words, dependencies
// are transitive)
//
// moreover, for each new sourceSet defined above, the java plugin automatically
// adds the following configurations:
// <sourceSet>Compile
// <sourceSet>Runtime

configurations {
    // define a testutil configuration
    // contains common test code that is shared among aerofs projects
    testutilImplementation.extendsFrom implementation
    testutilRuntimeOnly.extendsFrom testutilImplementation

    // it's kinda annoying to refer to this configuration
    // from other projects as testutilCompile, so I'll create a
    // proxy configuration called 'testutil' for that purpose
    testutil.extendsFrom testutilImplementation

    // state that the test configuration depends on testutil
    // contains only the unit tests
    testImplementation.extendsFrom testutilImplementation
    testRuntimeOnly.extendsFrom(testImplementation, testutilRuntimeOnly)
}

// specify dependencies for our configurations
dependencies {
    api 'com.google.code.findbugs:jsr305:3.0.0'
    api 'com.google.code.gson:gson:2.2.4'
    api 'com.google.guava:guava:17.0'
    api 'com.google.protobuf:protobuf-java:2.6.1'
    api 'io.netty:netty:3.10.6.Final'
    api 'javax.inject:javax.inject:1'
    api 'org.ocpsoft.prettytime:prettytime:2.1.3.Final'
    api 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.25'
    implementation 'org.slf4j:jul-to-slf4j:1.7.25'
    api project(':src:aero-ids')
    api project(':src:ssmp')
    testutilImplementation 'junit:junit:4.11'
    testutilImplementation 'org.hamcrest:hamcrest-all:1.3'
    testutilImplementation 'org.bouncycastle:bcprov-jdk15on:1.50+'
    testutilImplementation 'org.bouncycastle:bcpkix-jdk15on:1.50+'
    testutilImplementation 'org.mockito:mockito-core:1.10.19'
    testRuntimeOnly 'ch.qos.logback:logback-core:1.1.10'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.1.10'
}

// NOTE:
//
// a jar is *not* built automatically for us when
// we define a sourceSet. we have to manually build
// one and include it in the list of outputs
// this project builds and exports

// we build a jar that includes the testutil code
task testutilJar(type: Jar) {
    archiveBaseName = 'aerofs-base-testutil'
    from sourceSets.testutil.output
}

// export this jar whenever "build" is called
// also, whenever a sibling project depends on the testutil
// configuration we'll give them the jar built by the testutilJar task
artifacts {
    testutil testutilJar
    archives testutilJar
}
