package com.aerofs.proto;

import "common.proto";

// Removed reflection -- not needed
option optimize_for = LITE_RUNTIME;

// TODO (AG): this is broken - re: the following N.B.
// If the transport cannot chunk for you we will change the transport
// The upper layer should not worry about chunking
// N.B. the entire PBCore message must fit in a single packet. split into multiple messages if it
// can't. see PBGetVersionsResponse.
//
// TODO for maxcast messages, pass the destination store to core and filter out
// non-member-store request in HdMessage instead of individual msg handlers
message PBCore {

    enum Type {
        // TODO (AG): Add an ERROR response type
        // TODO (AG): This type is deprecated
        // Add a GET_COMPONENT_RESPONSE and a COMPUTE_HASH_RESPONSE and remove this
        REPLY = 0;

        NEW_UPDATES = 1;
        UPDATE_SENDER_FILTER = 2;
        GET_CONTENT_REQUEST = 3;
        GET_FILTER_REQUEST = 4;
        RESOLVE_USER_ID_REQUEST = 5;
        RESOLVE_USER_ID_RESPONSE = 6;
    }

    required Type type = 1;
    optional int32 rpcid = 2 [default = 0]; // TODO (AG): change this to message_id

    optional PBNewUpdates new_updates = 3;
    optional PBUpdateSenderFilter update_sender_filter = 4;
    optional PBException exception_response = 5;
    optional PBGetContentRequest get_content_request = 6;
    optional PBGetContentResponse get_content_response = 7;
    optional PBGetFilterRequest get_filter_request = 8;
    optional PBGetFilterResponse get_filter_response = 9;
}

message PBUpdateSenderFilter {
    required bytes store_id = 1;
    required uint64 sender_filter_index = 2;
    required uint64 sender_filter_update_seq = 3;
}

message PBNewUpdates {
    required bytes store_id = 1;
    optional uint64 change_epoch = 2;
}

message PBGetFilterRequest {
    message Store {
        required bytes store_id = 1;

        // the requester would like all filters from BASE
        optional bool from_base = 2 [default = false];
    }

    required int32 count = 1;

    // followed by <count> Store
}

message PBGetFilterResponse {
    message Store {
        required bytes store_id = 1;

        // all fields absent if the filter is empty
        optional bytes sender_filter = 2;
        optional uint64 sender_filter_index = 3;
        optional uint64 sender_filter_update_seq = 4;
        optional uint64 sender_filter_epoch = 5;
        optional bool from_base = 6;

        optional PBException ex = 7;
    }

    required int32 count = 1;

    // followed by <count> Store
}

// trimmed-down p2p transfer for Phoenix
message PBGetContentRequest {
    required bytes store_id = 1;
    required bytes object_id = 2;
    required uint64 local_version = 3;
    optional Prefix prefix = 4;

    message Prefix {
        required uint64 version = 1;
        required uint64 length = 2;
        required bytes hash_state = 3;
    }
}

// trimmed-down p2p transfer for Phoenix
message PBGetContentResponse {
    required uint64 version = 1;
    required uint64 length = 2;
    required uint64 mtime = 3;
    required bytes hash = 4;
    optional uint64 prefix_length = 5 [default = 0];
    required uint64 lts = 6;
}
