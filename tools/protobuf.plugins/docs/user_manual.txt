Protobuf RPC plugin documentation
=================================

This documents presents the code generated by our Protobuf RPC Service plugins.

Assume the following proto file:

---- file: math.proto ----
    import "rpc_error.proto"
    service MathService {
        rpc __error__(VoidCall) returns(ErrorReply);  // Required for all services
        rpc Divide(DivideCall) returns(Result);
    }

    message VoidCall {
    }

    message ErrorReply {
        required string message = 1;
    }

    message DivideCall {
        required int32 a = 1;
        required int32 b = 2;
    }

    message Result {
        required int32 result = 1;
    }
------------------------

Compiled with:
    $ protoc --java_out=. --rpc-java_out=. math.proto

The protobuf compiler will process math.proto and generate Java classes for VoidCall, ErrorReply, DivideCall, and Result.

It will then look for an executable called 'protoc-gen-rpc-java' in $PATH (or at the location specified by the --plugin switch), and let it post-process the file. The plugin will look for all services defined in the proto file, and generate code for them.

The following classes will be generated:

MathServiceInterface (*)      - also known as "Service Interface"
MathServiceReactor            - also known as "Service Reactor"
MathServiceStub               - also known as "Service Stub"
MathServiceStubCallbacks (*)  - also known as "Stub Callbacks"

The asterisk denotes interfaces that you must implement. All other classes should not need to be inherited from / re-implemented.

Overview
--------

Server side:
    1. Create a class that implements your Service Interface
    2. Create a new Service Reactor and pass it your interface implementation
    3. Upon reception of data from the client, call 'react()' on the reactor. This returns a future<byte[]>
    4. Listen to the future and send the data back to the client when it's available.

Client side:
    1. Create a class that implements the stub callbacks
    2. Create a new Service Stub, and pass it your Stub Callbacks
    3. Call the desired rpc methods on the stub. This will return a future with the return type.


Generated code
---------------

///////////////////////
// Server-side classes
///////////////////////

public interface MathService
{
    // Override
    // Called by the reactor if one of the methods in this interface set an exception in the returned future.
    // Should convert the exception into a PB object that will be sent to the client.
    // The return type is defined by the __error__ rpc method in the protobuf service definition
    ErrorReply encodeError(Throwable error);

    // Override
    // Called by the reactor
    // Should return a future that will be set with the reply, or with an exception in case of error
    public ListenableFuture<Result> divide(Integer a, Integer b);
}

public static class MathServiceReactor
{
    // Generated
    // Constructs a new service reactor with your service implementation
    public MathServiceReactor(MathService service) { ... }

    // Generated
    // Deserializes the request from the client, and call the appropriate method in the Service interface
    // Returns a future that will be set with the data that should be sent back to the client.
    public ListenableFuture<byte[]> react(byte[] data) { ...}
}

//////////////////////
// Client-side classes
//////////////////////

public static class MathServiceStub
{
    public interface MathServiceStubCallbacks
    {
        // Override
        // Called by the Service Stub with the data to send to the server
        // Should send the data and return a future with the reply bytes from the server
        public ListenableFuture<byte[]> doRPC(byte[] data);

        // Override
        // Called by the Service Stub when the server has replied with an error
        // Should convert the error into an exception
        // The input type is defined by the __error__ rpc method in the protobuf service definition
        Throwable decodeError(ErrorReply error);
    }

    // Generated
    // Constructs a new Service Stub with your callbacks
    public MathServiceStub(MathServiceStubCallbacks callbacks) { ... }

    // Generated
    // Serializes the request and hand it to the doRPC() callback
    public ListenableFuture<Result> divide(java.lang.Integer a, java.lang.Integer b) { ... }
}