#!/bin/bash -ue

###############################################################################
#
# This script copies the appropriate properties files for a MODE and PRODUCT
# to a named output location
#
###############################################################################

readonly ERRBADARGS=1
readonly ERRBADMODE=2
readonly ERRBADPRODUCT=3

function print_usage() {
    echo "usage: $0 [mode] [product] [resource_root_dir] [output_dir]" >&2
    echo "    [mode]              Specifies which mode the properties are for" >&2
    echo "                        Can be PROD, CI, or STAGING." >&2
    echo "    [product]           Specifies which product the properties are for" >&2
    echo "                        Can be TEAM_SERVER or CLIENT." >&2
    echo "    [resource_root_dir] Directory where all non-server-specific resources are stored" >&2
    echo "    [output_dir]        Directory to which all the resources should be copied" >&2
}

function add_staging_flag() {
    # FIXME (AG)! Hack! (this belongs in the configuration-staging.properties, not here)
    echo "labeling.isStaging=true" >> "$PROPERTIES_OUTPUT_DIR"/labeling.properties
}

# Copy resource to final destination, determined by extension.
#
# N.B.:
#   Resources, roughtly those loaded by the classloader in a getResource call, are identified by
#   extension: *.properties *.xml
#   These resources will be copied to PROPERTIES_OUTPUT_DIR, which must correspond with the root of
#   a classpath element.
#
#   Any other files found in resource/common (notably certs) are loaded _explicitly_ from
#   approot. (This is a good thing, we shouldn't use getResource for a certificate.)
#   These artifacts will be copied to ROOT_OUTPUT_DIR, which should correspond with the
#   application root.
#
# PARAMS
#   $1 : source filename
#   $2 : destination filename if it differs from $1. Basename only, no path info.
#
function copy_resource() {
    local srcfile=$1
    local destfile=${2:-1##*/}

    case "$srcfile" in
        *properties)
            cp "$srcfile" "$PROPERTIES_OUTPUT_DIR"/"$destfile"
            ;;
        *xml)
            cp "$srcfile" "$PROPERTIES_OUTPUT_DIR"/"$destfile"
            ;;
        *)
            cp "$srcfile" "$ROOT_OUTPUT_DIR"/"$destfile"
            ;;
    esac
}

# Copy resources from resource/common/* to the final destinations.
function copy_resources() {
    mkdir -p "$PROPERTIES_OUTPUT_DIR"

    # handle product-specific resources
    cp "$LABELING_RESOURCES_DIR"/"labeling-$LOWERCASE_LABELING.properties" "$PROPERTIES_OUTPUT_DIR"/labeling.properties
    if [ $MODE == 'STAGING' ]
    then
        add_staging_flag
    fi

    # copy all the mode-specific resources over and rename them
    local mode_specific_resources=$( ls $MODE_RESOURCES_DIR/*-$LOWERCASE_MODE* )
    for mode_resource in $mode_specific_resources
    do
        local mode_file=$( basename "$mode_resource" ) # don't use mode_resource directly to get filename/extension
        local mode_file_basename=$( echo "$mode_file" | cut -d'-' -f1 )
        local mode_file_extension=$( echo "$mode_file" | cut -d'.' -f2 )

        copy_resource "$mode_resource" "$mode_file_basename"."$mode_file_extension"
    done

    for srcfile in $( ls "$OTHER_RESOURCES_DIR"/* )
    do
        copy_resource "$srcfile" "${srcfile##*/}"
    done
}

###############################################################################
#
# main script
#
###############################################################################

# all arguments specified
if [[ $# -ne 4 || x"$1" == x || x"$2" == x || x"$3" == x || x"$4" == x ]]
then
    print_usage
    exit $ERRBADARGS
fi

# mode
readonly MODE="$1"
readonly LOWERCASE_MODE=$( echo $MODE | tr [A-Z] [a-z] )
if [[ "$MODE" != 'PROD' && "$MODE" != 'CI' && "$MODE" != 'STAGING' ]]
then
    print_usage
    exit $ERRBADMODE
fi

# product
readonly LABELING="$2"
readonly LOWERCASE_LABELING=$( echo $LABELING | tr [A-Z] [a-z] )
if [[ "$LABELING" != 'CLIENT' && "$LABELING" != 'TEAM_SERVER' ]]
then
    print_usage
    exit $ERRBADPRODUCT
fi

# directories
readonly RESOURCES_DIR="$3"
readonly MODE_RESOURCES_DIR="$3/common/mode"
readonly LABELING_RESOURCES_DIR="$3/common/labeling"
readonly OTHER_RESOURCES_DIR="$3/common/other"
readonly ROOT_OUTPUT_DIR="$4"
readonly PROPERTIES_OUTPUT_DIR="$4/bin"

copy_resources
