#!/bin/bash

set -ue

readonly ERRBADARGS=1
readonly ERRBADMODE=2
readonly ERRBADPRODUCT=3

function print_usage() {
    echo "usage: $0 [mode] [product] [os] [resource_root_dir] [output_dir]" >&2
    echo "    [mode]              Specifies which mode the properties are for" >&2
    echo "                        Can be PUBLIC|PRIVATE|CI." >&2
    echo "    [product]           Specifies which product the properties are for" >&2
    echo "                        Can be TEAM_SERVER|CLIENT|STORAGE_AGENT." >&2
    echo "    [os]                OS to populate for. Can be osx, win, linux/i386 or" >&2
    echo "                        linux/amd64. If not set, we will use the output from the ./os script." >&2
    echo "    [resource_root_dir] Directory where all non-server-specific resources are stored" >&2
    echo "    [output_dir]        Directory to which all the resources should be copied" >&2
}

function setup_clean_approot() {
    if [[ -d "$APPROOT" ]]
    then
        local approot_contents=$( ls "$APPROOT" )
        approot_contents=${approot_contents/bin/} # remove bin from the list of approot contents
        for content in $approot_contents # hopefully our filenames don't have spaces
        do
            rm -rf "$APPROOT/$content"
        done
    else
        mkdir -p "$APPROOT"
    fi
}

function copy_labeling_resources() {
    LABELING_LOWER=$(echo $LABELING | tr '[:upper:]' '[:lower:]')
    cp "$LABELING_RESOURCES_DIR/$LABELING_LOWER/labeling.properties" "$APPROOT/bin/"
}

function copy_os_specific_resources() {
    for resource in $( ls "$CLIENT_RESOURCES_DIR/all/" ) # non-lib directories
    do
        if [[ $resource != lib* ]]
        then
            cp -R "$CLIENT_RESOURCES_DIR/all/$resource" "$APPROOT"/
        fi
    done

    # copy JRE and native libs
    case "$OS" in
        win)         OS_RESOURCES_DIR="win"           ;;
        osx)         OS_RESOURCES_DIR="osx"           ;;
        linux/i386)  OS_RESOURCES_DIR="linux/i386"    ;;
        linux/amd64) OS_RESOURCES_DIR="linux/amd64"   ;;
        *)       echo "unsupported OS: $OS" && exit 1 ;;
    esac
    cp -R "$CLIENT_RESOURCES_DIR/$OS_RESOURCES_DIR/"* "$APPROOT"/

    # symlink lib/ dir to gradle dist output
    rm -rf "$APPROOT/lib"
    compile_dir="desktop"
    if [[ "$LABELING" == "STORAGE_AGENT" ]]
    then
        compile_dir="storage-agent"
    fi
    ln -s ../out.gradle/$compile_dir/dist $APPROOT/lib

    if [[ "$LABELING" == "CLIENT" ]] && [[ "$OS" == "win" || "$OS" == "osx" ]]
    then
        cp -R "${CLIENT_RESOURCES_DIR}/shellext/${OS_RESOURCES_DIR}/"* "${APPROOT}/"
    fi
}

# Create a version file with the specical development version 100.0.0
# This keeps aerofs from being updated
# This version number must be kept in sync with src/launcher/launcher.lib/liblauncher.cpp
function create_max_version_file() {
    if [[ "$MODE" == 'CI' || "$MODE" == 'PRIVATE' ]]
    then
        echo "100.0.0" > "$APPROOT"/version
    fi
}

function create_site_properties_file() {
    if [[ "$MODE" == 'PRIVATE' ]]
    then
        set +e
        wget -qO- --no-check-certificate --timeout=5 --tries=1 https://share.syncfs.com:4433/config/client | grep "^config\.loader\." > "$APPROOT"/site-config.properties

        if [[ $? -ne 0 ]]
        then
            echo "ERROR: Configuration service not available."
            exit 1
        fi

        set -e
    fi
}

function copy_run_scripts() {
    # os script is copied because it is used by the run script
    cp "$PPWD/os" "$PPWD/run" "$PPWD/rundebug" "$APPROOT"/
}

###############################################################################
#
# main script
#
###############################################################################

# usage
if [[ $# -ne 5 || x"$1" == x || x"$2" == x || x"$3" == x || x"$4" == x || x"$5" == x ]]
then
    print_usage
    exit $ERRBADARGS
fi

# constants
readonly PPWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly MODE="$1"
readonly LABELING="$2"
readonly OS="$3"
readonly BASE_RESOURCES_DIR="$4"
readonly COMMON_RESOURCES_DIR="$BASE_RESOURCES_DIR/common"
readonly CLIENT_RESOURCES_DIR="$BASE_RESOURCES_DIR/client"
readonly LABELING_RESOURCES_DIR="$CLIENT_RESOURCES_DIR/all/labeling"
readonly APPROOT="$5"

# product
if [[ "$LABELING" != "CLIENT" && "$LABELING" != "TEAM_SERVER" && "$LABELING" != "STORAGE_AGENT" ]]
then
    print_usage
    exit $ERRBADPRODUCT
fi

# tasks
setup_clean_approot
"$PPWD/copy_common_resources" "$MODE" "$BASE_RESOURCES_DIR" "$APPROOT" "$APPROOT/bin"
copy_labeling_resources
copy_os_specific_resources
create_max_version_file
create_site_properties_file
copy_run_scripts
