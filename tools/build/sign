#!/bin/bash
set -eu

# This function is used to sign exe files and dll's
function sign_exe() {
    FILENAME="$1"

    # If we later want to let CI use a test cert and key for signing, use the following:
    # CERT_FILE="$BUILD_SCRIPT_DIR/signing/cert.spc"
    # KEY_FILE="$BUILD_SCRIPT_DIR/signing/privateKey.pvk"
    # CODESIGNING_PASSWORD_FILE="$BUILD_SCRIPT_DIR/signing/passphrase.txt"
    local CERT_FILE="/data/aerofskeys/windows/cert.spc"
    local KEY_FILE="/data/aerofskeys/windows/privateKey.pvk"
    local CODESIGNING_PASSWORD_FILE="/Volumes/aerofskeys/windows/passphrase.txt"

    if [ ! -r $CODESIGNING_PASSWORD_FILE ] ; then
        echo >&2 "Cannot signcode: unable to read Windows codesigning password from $CODESIGNING_PASSWORD_FILE"
        return 1
    fi

    CODESIGNING_PASSWORD=$(cat $CODESIGNING_PASSWORD_FILE)
    export PASSPHRASE="$CODESIGNING_PASSWORD"
    [[ -r "$CERT_FILE" && -r "$KEY_FILE" ]] || (echo >&2 "Can't find cert/key at $CERT_FILE and $KEY_FILE - do you need to mount a volume?" && exit 1)

    printenv PASSPHRASE | signcode -spc "$CERT_FILE" -v "$KEY_FILE" \
        -a sha1 -$ commercial -t http://timestamp.verisign.com/scripts/timestamp.dll \
        -tr 10 -n "AeroFS" -i "http://www.aerofs.com" "${FILENAME}"

    rm -f "${FILENAME}.bak"
}

function sign_osx() {
    # Unlock the keychain, to prevent AFK dev from failing a build.  All
    # the secrets are available already anyway.
    SECURE_VOLUME="/data/aerofskeys"
    OSX_KEYCHAIN_FILE="$SECURE_VOLUME/aerofs.keychain"
    OSX_KEYCHAIN_PASSPHRASE_FILE="$SECURE_VOLUME/keychain_passphrase.txt"

    security unlock-keychain -p "$(cat $OSX_KEYCHAIN_PASSPHRASE_FILE)" "$OSX_KEYCHAIN_FILE"
    # see http://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-SUBSECTION9
    # for information on signing frameworks
    codesign --force --deep --sign "Air Computing, Inc." "$@"
}

