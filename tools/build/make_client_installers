#!/bin/bash
set -eu
set -x

###############################################################################
#
# This script builds AeroFS installation and update packages for Linux, OSX and
# Windows
#
###############################################################################

function DieUsage {
    echo "usage: $0 <build_mode> <build_product> <release_version> <sign_mode>" >&2
    echo " " >&2
    echo "<build_mode>: PROD|ENTERPRISE" >&2
    echo "<build_product>: CLIENT|TEAM_SERVER" >&2
    echo "<release_version>: release version (for example: 0.1.0)" >&2
    echo "<sign_mode>: SIGNED|UNSIGNED" >&2
    echo " " >&2
    echo "example: $0 ENTERPRISE CLIENT 0.1.0 UNSIGNED" >&2
    echo "example: $0 PROD TEAM_SERVER 0.1.0 UNSIGNED" >&2
    exit $ERRBADARGS
}

[[ $# -eq 4 ]] || DieUsage

case ${1:-} in
    PROD|ENTERPRISE) BUILD_MODE=$1;;
    *) DieUsage;;
esac
case ${2:-} in
    CLIENT|TEAM_SERVER) BUILD_PRODUCT=$2;;
    *) DieUsage;;
esac
case ${3:-} in
    '') DieUsage;;
    *) readonly RELEASE_VERSION=$3;;
esac
case ${4:-} in
    SIGNED) SIGNED=true;;
    UNSIGNED) SIGNED=false;;
    *) DieUsage;;
esac

include include/common $BUILD_MODE $BUILD_PRODUCT

readonly RELEASE_FILE_NAME="aerofs-${RELEASE_VERSION}-${LOWERCASE_MODE}"

###############################################################################
#
# Functions to make packages on all operating systems
#
###############################################################################

function make_linux_installer_deb() {
    local DEBSCRIPT="${BUILD_SCRIPT_DIR}/make_deb"
    mkdir -p "$PACKAGE_DIR"
    "$DEBSCRIPT" $MODE \
                 $RELEASE_VERSION \
                 $AEROFS_PRODUCT_UNIX \
                 "$LOCAL_RELEASE_DIR" \
                 "${PACKAGE_DIR}/${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.deb"
}

function make_linux_installer_tgz() {
    local TGZ_EXPANDED_DIR=$PACKAGE_BUILD_DIR/linux-installer-tgz
    local local_LINUX_INSTALLER_TGZ_FILENAME=${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.tgz
    rm -rf $TGZ_EXPANDED_DIR
    mkdir -p $TGZ_EXPANDED_DIR/aerofs
    cp -av "${LOCAL_RELEASE_DIR}/aerofs.linux"/* "${TGZ_EXPANDED_DIR}/aerofs/"
    cp -av "${LOCAL_RELEASE_DIR}/aerofs"/* "${TGZ_EXPANDED_DIR}/aerofs/shared/"
    pushd "${TGZ_EXPANDED_DIR}/aerofs/"
        ln -s shared/copier ${AEROFS_PRODUCT_UNIX}
        for suffix in cli gui sh ; do
            ln -s ${AEROFS_PRODUCT_UNIX} ${AEROFS_PRODUCT_UNIX}-$suffix
        done
    popd
    mkdir -p ${PACKAGE_DIR}
    tar -C "$TGZ_EXPANDED_DIR" -zcf "${PACKAGE_DIR}/${local_LINUX_INSTALLER_TGZ_FILENAME}" aerofs
}

function make_linux_update_tgz() {
    if [[ "x$1" != "xi386" && "x$1" != "xamd64" ]]; then
        echo "error: unsupported bits:$1" >&2
        echo "usage: make_linux_update_tgz [i386|amd64]" >&2
        exit $ERRBADARGS
    fi

    local local_ARCH="$1"
    local local_TGZ_SUFFIX=""
    case "$local_ARCH" in
    "i386")
        local_TGZ_SUFFIX="x86"
        ;;
    "amd64")
        local_TGZ_SUFFIX="x86_64"
        ;;
    *)
        echo "error: unsupported arch:$local_ARCH" >&2
        exit $ERRBADARGS
        ;;
    esac

    echo ">> make arch dependent tgz (${local_ARCH})"
    local VERSIONED_ARCH_TGZ_FILENAME=${AEROFS_PRODUCT_UNIX}-${RELEASE_VERSION}-${local_TGZ_SUFFIX}.tgz
    ARCH_TGZ_TEMP_DIR="$PACKAGE_BUILD_DIR/linux-$local_TGZ_SUFFIX"
    rm -rf "$ARCH_TGZ_TEMP_DIR"
    mkdir -p "${ARCH_TGZ_TEMP_DIR}/aerofs"
    cp -a "${LOCAL_RELEASE_DIR}/aerofs"/* "${ARCH_TGZ_TEMP_DIR}/aerofs"
    cp -a "${LOCAL_RELEASE_DIR}/aerofs.linux/shared"/* "${ARCH_TGZ_TEMP_DIR}/aerofs"
    cp -a "${LOCAL_RELEASE_DIR}/aerofs.linux/${local_ARCH}"/* "${ARCH_TGZ_TEMP_DIR}/aerofs"
    mkdir -p ${PACKAGE_DIR}
    tar -C "${ARCH_TGZ_TEMP_DIR}" -zcf "${PACKAGE_DIR}/${VERSIONED_ARCH_TGZ_FILENAME}" aerofs
}

function make_linux_installers() {
    make_linux_installer_deb
    make_linux_installer_tgz
    make_linux_update_tgz i386
    make_linux_update_tgz amd64
}

function make_windows_installers() {
    echo ">> make windows installer"
    mkdir -p ${PACKAGE_DIR}
    local OUT_FILE="${PACKAGE_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.exe"
    local OUT_FILE_VERSIONFREE="${PACKAGE_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install.exe"
    local EXECUTABLE="${AEROFS_PRODUCT_UNIX}.exe"

    # This function is used to sign exe files and dll's
    function sign_exe() {
        FILENAME="$1"

        local CERT_FILE=""
        local KEY_FILE=""
        case "$MODE" in
        "ENTERPRISE")
            CERT_FILE="/Volumes/aerofskeys/windows/cert.spc"
            KEY_FILE="/Volumes/aerofskeys/windows/privateKey.pvk"
            CODESIGNING_PASSWORD_FILE="/Volumes/aerofskeys/windows/passphrase.txt"
            ;;
        "PROD")
            CERT_FILE="/Volumes/aerofskeys/windows/cert.spc"
            KEY_FILE="/Volumes/aerofskeys/windows/privateKey.pvk"
            CODESIGNING_PASSWORD_FILE="/Volumes/aerofskeys/windows/passphrase.txt"
            ;;
        # If we later want to let CI use a test cert and key for signing, use the following:
        # CERT_FILE="$BUILD_SCRIPT_DIR/signing/cert.spc"
        # KEY_FILE="$BUILD_SCRIPT_DIR/signing/privateKey.pvk"
        # CODESIGNING_PASSWORD_FILE="$BUILD_SCRIPT_DIR/signing/passphrase.txt"
        *)
            echo "error: unsupported mode: $MODE" >&2
            return 1
            ;;
        esac
        if [ ! -r $CODESIGNING_PASSWORD_FILE ] ; then
            echo "Cannot signcode: unable to read Windows codesigning password from $CODESIGNING_PASSWORD_FILE" >&2
            return 1
        fi
        CODESIGNING_PASSWORD=$(cat $CODESIGNING_PASSWORD_FILE)
        export PASSPHRASE="$CODESIGNING_PASSWORD"
        [[ -r "$CERT_FILE" && -r "$KEY_FILE" ]] || (echo "Can't find cert/key at $CERT_FILE and $KEY_FILE - do you need to mount a volume?" && exit 1)
        printenv PASSPHRASE | signcode -spc "$CERT_FILE" -v "$KEY_FILE" \
            -a sha1 -$ commercial -t http://timestamp.verisign.com/scripts/timestamp.dll \
            -tr 10 -n "AeroFS" -i "http://www.aerofs.com" "${FILENAME}"

        rm -f "${FILENAME}.bak"
    }

    # Create a temporary directory to work in
    local NSIS_BUILD_DIR_NAME="windows-nsis"
    local NSIS_TEMP_DIR="$PACKAGE_BUILD_DIR/$NSIS_BUILD_DIR_NAME"
    rm -rf $NSIS_TEMP_DIR
    mkdir -p $NSIS_TEMP_DIR

    # Create a subfolder in that directory with the version number
    # Note: we prepend v_ to the version number to make it easy for the NSIS installer
    # to enumerate and delete all previous versions directories
    NSIS_TEMP_DIR_WITH_VERSION="${NSIS_TEMP_DIR}/v_${RELEASE_VERSION}"
    mkdir "${NSIS_TEMP_DIR_WITH_VERSION}"

    # Copy the aerofs release files in that directory
    cp -a "${LOCAL_RELEASE_DIR}/aerofs"/* "${NSIS_TEMP_DIR_WITH_VERSION}/"
    cp -a "${LOCAL_RELEASE_DIR}/aerofs.win"/* "${NSIS_TEMP_DIR_WITH_VERSION}/"

    # Move the things that need to stay at the top-level folder
    # Also rename aerofs.exe to the appropriate name
    mv "${NSIS_TEMP_DIR_WITH_VERSION}/aerofs.exe" "${NSIS_TEMP_DIR}/$EXECUTABLE"
    mv "${NSIS_TEMP_DIR_WITH_VERSION}/aerofsd.exe" "${NSIS_TEMP_DIR}/"
    echo -n "${RELEASE_VERSION}" > "${NSIS_TEMP_DIR}/version"
    mkdir "${NSIS_TEMP_DIR}/icons"
    mv "${NSIS_TEMP_DIR_WITH_VERSION}/icons"/*.ico "${NSIS_TEMP_DIR}/icons"

    chmod -R a+rx "${NSIS_TEMP_DIR}"

    if $SIGNED ; then
        sign_exe "${NSIS_TEMP_DIR}/$EXECUTABLE"
        sign_exe "${NSIS_TEMP_DIR}/aerofsd.exe"
    fi

    makensis -V1 -DAEROFS_IN_FOLDER="${NSIS_TEMP_DIR}" \
            -DAEROFS_OUT_FILE="$OUT_FILE" \
            -DAEROFS_VERSION="$RELEASE_VERSION" \
            -DAEROFS_PRODUCT="$AEROFS_PRODUCT" \
            -DAEROFS_APPROOT="${AEROFS_PRODUCT_SPACEFREE}Exec" \
            -DAEROFS_EXECUTABLE="$EXECUTABLE" \
            "${LOCAL_NSIS_DIR}/setup.nsi"

    if $SIGNED ; then
        sign_exe "$OUT_FILE"
    fi
}

function make_osx_packages() {
    echo ">> make mac osx dmg and zip"
    mkdir -p ${PACKAGE_DIR}

    local local_VERSIONED_MAC_ZIP_FILENAME="${AEROFS_PRODUCT_UNIX}-osx-${RELEASE_VERSION}.zip"
    local local_VERSIONED_MAC_DMG_FILENAME="${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.dmg"
    local local_UNVERSIONED_MAC_DMG_FILENAME="${AEROFS_PRODUCT_SPACEFREE}Install.dmg"
    local local_OSX_LOCAL_MAC_APP_DIR=Release/${AEROFS_PRODUCT_SPACEFREE}.app/Contents/Resources/Java
    local local_OSX_INSTALLER_VOLUME_DIR="/Volumes/${AEROFS_PRODUCT_SPACEFREE} Installer"
    local local_OSX_TEMPLATE_APP_FILENAME="osx/${AEROFS_PRODUCT_UNIX}.app.template"
    local local_OSX_TEMPLATE_DMG_FILENAME="osx/${AEROFS_PRODUCT_UNIX}.dmg.template"

    readonly local_VERSIONED_MAC_ZIP_FILENAME
    readonly local_VERSIONED_MAC_DMG_FILENAME
    readonly local_UNVERSIONED_MAC_DMG_FILENAME
    readonly local_OSX_LOCAL_MAC_APP_DIR
    readonly local_OSX_INSTALLER_VOLUME_DIR
    readonly local_OSX_TEMPLATE_APP_FILENAME
    readonly local_OSX_TEMPLATE_DMG_FILENAME

    # Create a temporary directory to work in
    local DMG_TEMP_DIR="$PACKAGE_BUILD_DIR/osx-dmg"

    # Create a release folder within the temp directory and copy the template dmg and app folder
    rm -rf "${DMG_TEMP_DIR}"
    mkdir -p "${DMG_TEMP_DIR}/Release"
    cp -a "${BUILD_SCRIPT_DIR}/${local_OSX_TEMPLATE_APP_FILENAME}" \
        "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app"
    cp "${BUILD_SCRIPT_DIR}/${local_OSX_TEMPLATE_DMG_FILENAME}" \
        "${DMG_TEMP_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-temp.dmg"

    # Copy the aerofs and aerofs.osx files into the Mac App directory within the temp directory created above
    cp -a "${AEROFS_RELEASE_DIR}"/* "${AEROFS_RELEASE_OSX_DIR}"/* "${DMG_TEMP_DIR}/${local_OSX_LOCAL_MAC_APP_DIR}/"

    if $SIGNED ; then
        echo ">> sign app for Mac App Store"
        # see http://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-SUBSECTION9
        # for information on signing frameworks
        # Note: We avoid re-codesigning AeroFSFinderExtension because every
        # time we do so, it changes the binary, which in turn changes the
        # checksum, so we kill finder on update.  Instead, we have pre-signed
        # the checked-in resource, and must update the signature whenever we
        # modify anything under the .osax folder.
        #codesign --force --sign "Air Computing, Inc." "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app/Contents/Resources/Java/AeroFSFinderExtension.osax"
        codesign --force --sign "Air Computing, Inc." "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app/Contents/Resources/Java/Growl.framework/Versions/A"
        codesign --resource-rules "$BUILD_SCRIPT_DIR/osx/rules.plist" \
                 --force \
                 --sign "Air Computing, Inc." \
                 "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app"
    fi

    # zip the osx client (must go to the directory so that the temp path isn't included in the zip)
    pushd "$DMG_TEMP_DIR" > /dev/null
    zip -9 --symlinks --quiet --recurse-paths "${PACKAGE_DIR}/$local_VERSIONED_MAC_ZIP_FILENAME" "Release/"
    popd > /dev/null

    case $(uname) in
        Darwin)
            hdiutil mount -quiet "${DMG_TEMP_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-temp.dmg"
            rm -rf "${local_OSX_INSTALLER_VOLUME_DIR}/${AEROFS_PRODUCT_SPACEFREE}.app"
            cp -a "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app" "${local_OSX_INSTALLER_VOLUME_DIR}"
            hdiutil eject -quiet "${local_OSX_INSTALLER_VOLUME_DIR}"
            hdiutil convert -quiet -format UDBZ -o "${PACKAGE_DIR}/${local_VERSIONED_MAC_DMG_FILENAME}" "${DMG_TEMP_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-temp.dmg"
            ;;
        Linux)
            # N.B. THIS DOES NOT PRODUCE A WORKING .dmg file!! That requires a little more work. This will produce
            # junk that will let the packaging continue, so long as you don't try to execute the .dmg
            HFS_IMAGE="${DMG_TEMP_DIR}/img.hfs"
            PATH_TO_MOUNT="${DMG_TEMP_DIR}/image_loop"
            mkdir -p "$PATH_TO_MOUNT"
            # python $DAMAGE_PY extract "${DMG_TEMP_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-temp.dmg" "$HFS_IMAGE"
            dd if=/dev/zero of=$HFS_IMAGE bs=1024 seek=102400 count=1
            mkfs.hfsplus "$HFS_IMAGE"
            sudo mount -t hfsplus -o loop,rw,force "$HFS_IMAGE" "$PATH_TO_MOUNT"
            # rm -rf "$PATH_TO_MOUNT/${AEROFS_PRODUCT_SPACEFREE}.app"
            sudo cp -a "${DMG_TEMP_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app" "$PATH_TO_MOUNT"/
            sudo umount "$PATH_TO_MOUNT"
            python $DAMAGE_PY compress "$HFS_IMAGE" "${PACKAGE_DIR}/${local_VERSIONED_MAC_DMG_FILENAME}"
            rm "$HFS_IMAGE"
            ;;
        *)
            echo "unsupported platform $(uname)"
            exit 1
            ;;
    esac
}

function make_unversioned_symlinks() {
    pushd ${PACKAGE_DIR}
    # Windows installer
    ln -s ${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.exe ${AEROFS_PRODUCT_SPACEFREE}Install.exe
    # OSX dmg, update package
    ln -s ${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.dmg ${AEROFS_PRODUCT_SPACEFREE}Install.dmg
    ln -s ${AEROFS_PRODUCT_UNIX}-osx-${RELEASE_VERSION}.zip         ${AEROFS_PRODUCT_UNIX}-osx.zip
    # Linux installers
    ln -s ${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.deb   ${AEROFS_PRODUCT_UNIX}-installer.deb
    ln -s ${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.tgz   ${AEROFS_PRODUCT_UNIX}-installer.tgz
    # Linux update packages
    ln -s ${AEROFS_PRODUCT_UNIX}-${RELEASE_VERSION}-x86.tgz         ${AEROFS_PRODUCT_UNIX}-x86.tgz
    ln -s ${AEROFS_PRODUCT_UNIX}-${RELEASE_VERSION}-x86_64.tgz      ${AEROFS_PRODUCT_UNIX}-x86_64.tgz
    popd
}

function create_release_version_file() {
    declare VERSION_FILE="${PACKAGE_DIR}/${RELEASE_SERVER_VERSION_FILE}"
    echo Version=$RELEASE_VERSION > "$VERSION_FILE"
    chmod a+r "$VERSION_FILE"
}

echo ">> make client installers and packages in $PACKAGE_DIR"

compute_product_names
make_linux_installers
make_windows_installers
make_osx_packages
make_unversioned_symlinks
create_release_version_file

exit 0
