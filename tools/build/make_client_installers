#!/bin/bash
set -eu

###############################################################################
#
# This script builds AeroFS installation and update packages for Linux, OSX and
# Windows
#
###############################################################################

function DieUsage {
    echo >&2 "usage: $0 <build_product> <release_version> <sign_mode>"
    echo >&2 "       [--build-linux-tgz] [--build-linux-update-tgzs] [--build-linux-deb]"
    echo >&2 "       [--build-windows-exe] [--build-windows-msi] [--build-osx-packages]"
    echo >&2 "       [--build-all]"
    echo >&2 " "
    echo >&2 "<build_product>: CLIENT|TEAM_SERVER"
    echo >&2 "<release_version>: release version (for example: 0.1.0)"
    echo >&2 "<sign_mode>: SIGNED|UNSIGNED"
    echo >&2 "[--build-linux-tgz]: build the Linux installer .tgz"
    echo >&2 "[--build-linux-update-tgzs]: build the Linux updater .tgzs"
    echo >&2 "[--build-linux-deb]: build the Linux installer .deb "
    echo >&2 "[--build-windows-exe]: build the Windows installer .exe "
    echo >&2 "[--build-windows-msi]: build the Windows installer .msi "
    echo >&2 "[--build-osx-packages]: build the OSX installer/updater packages"
    echo >&2 "[--build-all]: build all of the above (the others do not need to be specified)"
    echo >&2 " "
    echo >&2 "example: $0 CLIENT 0.1.0 UNSIGNED --build-all"
    echo >&2 "example: $0 TEAM_SERVER 0.1.0 UNSIGNED --build-linux-tgz --build-linux-update-tgzs"
    exit $ERRBADARGS
}

##
# Parse positional args
##
case ${1:-} in
    CLIENT|TEAM_SERVER) BUILD_PRODUCT=$1;;
    *) DieUsage;;
esac
case ${2:-} in
    '') DieUsage;;
    *) readonly RELEASE_VERSION=$2;;
esac
case ${3:-} in
    SIGNED) SIGNED=true;;
    UNSIGNED) SIGNED=false;;
    *) DieUsage;;
esac
shift 3

##
# Parse long opts
##
BUILD_LINUX_INSTALL_TGZ=false
BUILD_LINUX_UPDATE_TGZS=false
BUILD_LINUX_INSTALL_DEB=false
BUILD_WINDOWS_EXE=false
BUILD_WINDOWS_MSI=false
BUILD_OSX_PACKAGES=false
while [ "${1:-}" != "" ]; do
    case "$1" in
        "--build-linux-tgz") BUILD_LINUX_INSTALL_TGZ=true ;;
        "--build-linux-update-tgzs") BUILD_LINUX_UPDATE_TGZS=true ;;
        "--build-linux-deb") BUILD_LINUX_INSTALL_DEB=true ;;
        "--build-windows-exe") BUILD_WINDOWS_EXE=true ;;
        "--build-windows-msi") BUILD_WINDOWS_MSI=true ;;
        "--build-osx-packages") BUILD_OSX_PACKAGES=true ;;
        "--build-all")
            BUILD_LINUX_INSTALL_TGZ=true
            BUILD_LINUX_UPDATE_TGZS=true
            BUILD_LINUX_INSTALL_DEB=true
            BUILD_WINDOWS_EXE=true
            BUILD_WINDOWS_MSI=true
            BUILD_OSX_PACKAGES=true
            ;;
        *)
            echo "Unknown argument: $1" >&2
            DieUsage
            ;;
    esac
    shift
done

include common $BUILD_PRODUCT
include sign

###############################################################################
#
# Functions to make packages on all operating systems
#
###############################################################################

function make_linux_installer_deb() {
    local TARGET="${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.deb"

    # Only re-make on updates
    local CREATED=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "${PACKAGE_DIR}/${TARGET}" 2>/dev/null)
    if [[ -n "$CREATED" ]] ; then
        [[ -z "$(find "${LINUX_UPDATER_DIR}" -type f -newermt "$CREATED" | head -n 1)" ]] && \
        [[ -z "$(find "${CLIENT_LINUX_SHARED_TEMPLATES_DIR}" -type f -newermt "$CREATED" | head -n 1)" ]] && \
        [[ -z "$(find "${CLIENT_ALL_PLATFORMS_RESOURCES_DIR}/icons" -type f -newermt "$CREATED" | head -n 1)" ]]

        if [[ $? == 0 ]]; then
            echo '>> not rebuilding linux_installer_deb'
            return
        fi

        echo ">> rebuilding linux_installer_deb"
    fi
    rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_UNIX}-installer-"*.deb

    call make_deb "${RELEASE_VERSION}" \
                  "${BUILD_PRODUCT}" \
                  "${PACKAGE_DIR}/${TARGET}"
}

function make_linux_installer_tgz() {
    local ARCH=""
    local TARGET="${AEROFS_PRODUCT_UNIX}-installer-${RELEASE_VERSION}.tgz"

    # Only re-make on updates
    local CREATED=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "${PACKAGE_DIR}/${TARGET}" 2>/dev/null)
    if [[ -n "$CREATED" ]] ; then
        [[ -z "$(find "${LINUX_UPDATER_DIR}" -type f -newermt "$CREATED" | head -n 1)" ]]

        if [[ $? == 0 ]]; then
            echo '>> not rebuilding linux_installer_tgz'
            return
        fi

        echo ">> rebuilding linux_installer_tgz"
    fi
    rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_UNIX}-installer-"*.tgz

    local BUILD_DIR="${PACKAGE_BUILD_DIR}/linux-installer-tgz"

    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}/aerofs"

    cp -a "${LINUX_UPDATER_DIR}"/* "${BUILD_DIR}/aerofs/"
    for ARCH in i386 amd64 ; do
        mv "${BUILD_DIR}/aerofs/progressmonitor-${ARCH}" "${BUILD_DIR}/aerofs/${AEROFS_PRODUCT_UNIX}progressmonitor-${ARCH}"
    done

    pushd "${BUILD_DIR}/aerofs/" >>/dev/null
    ln -s updater "${AEROFS_PRODUCT_UNIX}"
    for SUFFIX in cli gui sh ; do
        ln -s "${AEROFS_PRODUCT_UNIX}" "${AEROFS_PRODUCT_UNIX}-${SUFFIX}"
    done
    popd >>/dev/null

    tar -C "${BUILD_DIR}" -zcf "${PACKAGE_DIR}/${TARGET}" aerofs
}

function make_linux_update_tgz() {
    local ARCH="$1"
    local TGZ_SUFFIX=""
    case "${ARCH}" in
        "i386") TGZ_SUFFIX="x86" ;;
        "amd64") TGZ_SUFFIX="x86_64" ;;
        *) echo >&2 "error: unsupported arch:${ARCH}" ; exit $ERRBADARGS ;;
    esac

    local TARGET="${AEROFS_PRODUCT_UNIX}-${RELEASE_VERSION}-${TGZ_SUFFIX}.tgz"

    # Only re-make on updates
    local CREATED=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "${PACKAGE_DIR}/${TARGET}" 2>/dev/null)
    if [[ -n "$CREATED" ]] ; then
        [[ -z "$(find "${LINUX_UPDATER_DIR}" -type f -newermt "$CREATED" | head -n 1)" ]]

        if [[ $? == 0 ]]; then
            echo '>> not rebuilding linux_update_tgz'
            return
        fi

        echo ">> rebuilding linux_update_tgz"
    fi
    rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_UNIX}-"*"-${TGZ_SUFFIX}.tgz"

    local BUILD_DIR="$PACKAGE_BUILD_DIR/linux-$TGZ_SUFFIX"

    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}/aerofs"

    cp -a "${LINUX_UPDATER_DIR}/updater-${ARCH}" "${BUILD_DIR}/aerofs/updater"
    cp -a "${LINUX_UPDATER_DIR}/progressmonitor-${ARCH}" "${BUILD_DIR}/aerofs/${AEROFS_PRODUCT_UNIX}progressmonitor-${ARCH}"

    pushd "${BUILD_DIR}/aerofs/" >>/dev/null
    ln -s updater "${AEROFS_PRODUCT_UNIX}"
    for SUFFIX in cli gui sh ; do
        ln -s "${AEROFS_PRODUCT_UNIX}" "${AEROFS_PRODUCT_UNIX}-${SUFFIX}"
    done
    popd >>/dev/null

    tar -C "${BUILD_DIR}" -zcf "${PACKAGE_DIR}/${TARGET}" aerofs
}

function make_windows_installers() {
    local EXECUTABLE="${AEROFS_PRODUCT_UNIX}.exe"
    local BUILD_DIR="${PACKAGE_BUILD_DIR}/windows-${PRODUCT}"

    # N.B. it would be great to only rebuild this on changes, but out windows
    # installer builders do some funky thinks with modifying/deleting source
    # files
    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}"

    cp -a "${BASE_RESOURCES_DIR}/updater/win/updater.exe" "${BUILD_DIR}/${EXECUTABLE}"
    echo -n "${RELEASE_VERSION}" > "${BUILD_DIR}/version"

    mkdir "${BUILD_DIR}/icons"
    cp -a "${CLIENT_WIN_RESOURCES_DIR}/icons/logo.ico" "${BUILD_DIR}/icons"

    chmod -R a+rx "${BUILD_DIR}"

    if $SIGNED ; then
        sign_exe "${BUILD_DIR}/${EXECUTABLE}"
    fi

    if [ "${BUILD_WINDOWS_EXE}" == "true" ] ; then
        local OUT_EXE="${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.exe"

        echo ">> rebuilding windows_installers exe"
        rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-"*.exe

        makensis -V1 -DAEROFS_IN_FOLDER="${BUILD_DIR}" \
                     -DAEROFS_OUT_FILE="${PACKAGE_DIR}/${OUT_EXE}" \
                     -DAEROFS_VERSION="${RELEASE_VERSION}" \
                     -DAEROFS_PRODUCT="${AEROFS_PRODUCT}" \
                     -DAEROFS_APPROOT="${AEROFS_PRODUCT_SPACEFREE}Exec" \
                     -DAEROFS_EXECUTABLE="${EXECUTABLE}" \
                     "${LOCAL_WINDOWS_DIR}/setup.nsi"

        if $SIGNED ; then
            sign_exe "${PACKAGE_DIR}/${OUT_EXE}"
        fi
    fi

    if [ "${BUILD_WINDOWS_MSI}" == "true" ] ; then
        local OUT_MSI="${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.msi"

        echo ">> rebuilding windows msi"
        rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-"*.msi

        # If you think the following line looks bizzare and makes no sense then
        # you are a reasonable person and much sensible than past-Alex.
        #
        # tl;dr: it's weird for historical reasons
        #
        # See comments in build.py for more info.
        find "${BUILD_DIR}" | "${LOCAL_MSI_DIR}/build.py" \
            --directory "${BUILD_DIR}" \
            --base-msi "${LOCAL_MSI_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install.msi" \
            --output-msi "${PACKAGE_DIR}/${OUT_MSI}" \
            --set-version "${RELEASE_VERSION}" \
            --workspace "${BUILD_DIR}/workspace" | bash
    fi
}

function make_osx_packages() {
    local TARGET="${AEROFS_PRODUCT_SPACEFREE}Install-${RELEASE_VERSION}.dmg"

    # Only re-make on updates
    local CREATED=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "${PACKAGE_DIR}/${TARGET}" 2>/dev/null)
    if [[ -n "$CREATED" ]] ; then
        [[ -z "$(find "${OSX_UPDATER_DIR}" -type f -newermt "$CREATED" | head -n 1)" ]] && \
        [[ -z "$(find "${CLIENT_OSX_RESOURCES_DIR}" -name "aerofs" -type f -newermt "$CREATED" | head -n 1)" ]] && \
        [[ -z "$(find "${BUILD_SCRIPT_DIR}/osx" -type f -newermt "$CREATED" | head -n 1)" ]]

        if [[ $? == 0 ]]; then
            echo '>> not rebuilding osx_packages'
            return
        fi

        echo ">> rebuilding osx_packages"
    fi
    rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_SPACEFREE}Install-"*.dmg
    rm -f "${PACKAGE_DIR}/${AEROFS_PRODUCT_UNIX}-osx-"*.zip

    local BUILD_DIR="${PACKAGE_BUILD_DIR}/osx-dmg"
    local LOCAL_APP_DIR="Release/${AEROFS_PRODUCT_SPACEFREE}.app/Contents/"
    local TEMPLATE_FILENAME="${AEROFS_PRODUCT_UNIX}.app.template"

    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}/Release"
    mkdir -p "${BUILD_DIR}/${LOCAL_APP_DIR}/MacOS/"

    cp -a "${BUILD_SCRIPT_DIR}/osx/${TEMPLATE_FILENAME}"/* \
        "${BUILD_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app"
    cp -a "${BASE_RESOURCES_DIR}/updater/osx/updater" \
        "${BUILD_DIR}/${LOCAL_APP_DIR}/MacOS/${AEROFS_PRODUCT_SPACEFREE}Client"
    cp -a "${BASE_RESOURCES_DIR}/updater/osx/progressmonitor" \
        "${BUILD_DIR}/${LOCAL_APP_DIR}/MacOS/${AEROFS_PRODUCT_SPACEFREE}ProgressMonitor"
    cp -a "${BASE_RESOURCES_DIR}/client/osx/aerofs" \
        "${BUILD_DIR}/${LOCAL_APP_DIR}/MacOS/${AEROFS_PRODUCT_UNIX}"

    if $SIGNED ; then
        echo ">> signing app for Mac App Store"
        sign_osx "${BUILD_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app"

        # Note: We avoid re-codesigning AeroFSFinderExtension because
        # every time we do so, it changes the binary, which in turn
        # changes the checksum, so we kill finder on update.  Instead,
        # we have pre-signed the checked-in resource, and must update
        # the signature whenever we modify anything under the .osax
        # folder.
        # sign_osx "${BUILD_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app/Contents/Resources/Java/AeroFSFinderExtension.osax"
    fi

    ln -s /Applications "${BUILD_DIR}/Release/Applications"
    cp -a "${BUILD_SCRIPT_DIR}/osx/dmg_contents/"{.background,.VolumeIcon.icns} "${BUILD_DIR}/Release/"
    cp -a "${BUILD_SCRIPT_DIR}/osx/dmg_contents/${AEROFS_PRODUCT_UNIX}/DS_Store" "${BUILD_DIR}/Release/.DS_Store"

    rm -rf "${PACKAGE_DIR:?}/${TARGET}"

    case $(uname) in
        Darwin)
            # TODO: make the volume name not spacefree (requires fixing
            # DS_Store for aerofsts)
            hdiutil create \
                    -fs HFS+ \
                    -volname "${AEROFS_PRODUCT} Installer" \
                    -srcfolder "${BUILD_DIR}/Release/" \
                    -format UDRW \
                    -o "${BUILD_DIR}/${AEROFS_PRODUCT_SPACEFREE}-temp.dmg"

            MOUNTPOINT="${BUILD_DIR}/mnt"
            hdiutil attach -readwrite -noautoopen \
                    "${BUILD_DIR}/${AEROFS_PRODUCT_SPACEFREE}-temp.dmg" \
                    -mountpoint "$MOUNTPOINT"

            # Set volume icon creator to 'icnC' (icon creator)
            SetFile -c icnC "${MOUNTPOINT}/.VolumeIcon.icns"
            # Set volume icon enabled
            SetFile -a C "${MOUNTPOINT}"

            hdiutil detach "$MOUNTPOINT"

            hdiutil convert \
                    "${BUILD_DIR}/${AEROFS_PRODUCT_SPACEFREE}-temp.dmg" \
                    -format UDBZ \
                    -o "${PACKAGE_DIR}/${TARGET}"
            ;;
        Linux)
            HFS_IMAGE="${BUILD_DIR}/img.hfs"
            dd if=/dev/zero of="${HFS_IMAGE}" bs=1024 seek=153600 count=1
            mkfs.hfsplus -v "${AEROFS_PRODUCT} Installer" "$HFS_IMAGE"

            hfsplus "$HFS_IMAGE" mkdir "/.background"
            hfsplus "$HFS_IMAGE" addall "${BUILD_DIR}/Release/.background" "/.background"
            hfsplus "$HFS_IMAGE" add "${BUILD_DIR}/Release/.VolumeIcon.icns" "/.VolumeIcon.icns"
            hfsplus "$HFS_IMAGE" add "${BUILD_DIR}/Release/.DS_Store" "/.DS_Store"
            hfsplus "$HFS_IMAGE" mkdir "/${AEROFS_PRODUCT_SPACEFREE}.app"
            hfsplus "$HFS_IMAGE" addall "${BUILD_DIR}/Release/${AEROFS_PRODUCT_SPACEFREE}.app" "/${AEROFS_PRODUCT_SPACEFREE}.app"
            hfsplus "$HFS_IMAGE" symlink "/Applications" "/Applications"

            # Enable custom icon on drive root
            hfsplus "$HFS_IMAGE" attr / C

            dmg build "$HFS_IMAGE" "${PACKAGE_DIR}/${TARGET}"
            rm "$HFS_IMAGE"
            ;;
        *) echo >&2 "unsupported platform $(uname)" ; exit 1 ;;
    esac
}

function create_release_version_file() {
    declare VERSION_FILE="${PACKAGE_DIR}/${CURRENT_VER}"
    echo Version=$RELEASE_VERSION > "$VERSION_FILE"
    chmod a+r "$VERSION_FILE"
}

function make_installers() {
    mkdir -p "${PACKAGE_DIR}"

    local JOBS=""

    if [ "$BUILD_LINUX_INSTALL_DEB" == "true" ] ; then
        make_linux_installer_deb &
        JOBS="$JOBS $!"
    fi

    if [ "$BUILD_LINUX_INSTALL_TGZ" == "true" ] ; then
        make_linux_installer_tgz &
        JOBS="$JOBS $!"
    fi

    if [ "$BUILD_LINUX_UPDATE_TGZS" == "true" ] ; then
        make_linux_update_tgz i386 &
        JOBS="$JOBS $!"
        make_linux_update_tgz amd64 &
        JOBS="$JOBS $!"
    fi

    if [ "$BUILD_WINDOWS_EXE" == "true" ] || [ "$BUILD_WINDOWS_MSI" == "true" ] ; then
        make_windows_installers &
        JOBS="$JOBS $!"
    fi

    if [ "$BUILD_OSX_PACKAGES" == "true" ] ; then
        make_osx_packages &
        JOBS="$JOBS $!"
    fi

    if [ "$JOBS" == "" ] ; then
        echo >&2 "The caller did not request to make any client installers!"
        echo >&2 "This is likely a bug. Abort!"
        exit 1
    fi

    # Check that all the background tasks completed successfully
    FAIL=0
    for JOB in $JOBS ; do
        wait $JOB || let "FAIL+=1"
    done

    if [ "$FAIL" != "0" ] ; then
        echo >&2 "$FAIL of the packaging tasks failed."
        exit $FAIL
    fi
}

echo ">> make client installers and packages in $PACKAGE_DIR"
compute_product_names
make_installers
create_release_version_file
exit 0
