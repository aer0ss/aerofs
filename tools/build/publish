#!/bin/sh

set -e

#################################
# arguments

if [[ x"$1" == x || x"$2" == x || x"$3" == x || x"$4" == x ]] ; then
  echo "usage: $0 [build mode] [aerofs git root] [aerofs build dir] [aerofs release dir]"
  echo "[build mode]: STAGING or PROD"
  echo "[aerofs git root]: root of the aerofs git tree (usually ~/repos/aerofs)"
  echo "[aerofs build dir]: path into which all ant (or non-ide) build artifacts are placed (usually ~/repos/aerofs/out.ant)"
  echo "[aerofs release dir]: path into which the final built jar and all platform-specific jars and libs are places (usually ~/repos/aerofs/out.ant/release)"
  echo
  echo "example: $0 STAGING /Users/aerofsbuild/repos/aerofs /Users/aerofsbuild/repos/aerofs/out.ant /Users/aerofsbuild/repos/aerofs/out.ant/release"
  exit 2
fi

set -u

#################################
# build mode

MODE=""
LOWERCASE_MODE=""
if [ "$1" == "PROD" ]; then
  MODE="PROD"
  LOWERCASE_MODE="prod"
elif [ "$1" == "STAGING" ]; then
  MODE="STAGING"
  LOWERCASE_MODE="staging"
else
  echo "Invalid build mode $1.  Expected STAGING or PROD."
  exit 2
fi

SVR_LOGIN="release-${LOWERCASE_MODE}@b.arrowfs.org"
MAP_LOGIN="maps@sv.aerofs.com"
MAP_ROOT="/maps"
SVR_ROOT="/home/release-${LOWERCASE_MODE}"
SVR_TEMP="/tmp/release-${LOWERCASE_MODE}" # FIXME: (AG) replace with mktemp

#################################
# set parameters

AEROFS_GIT_ROOT=$2
RELEASE_DIR=$3
PASSPHRASE=$4
PPWD="$( cd $PWD; pwd )"

#################################
# all local work happens in release directory from now on

cd $RELEASE_DIR

#################################
# create a properly-versioned aerofs zipfile

VERSION_FILE=version
VER=$( head -1 aerofs/$VERSION_FILE )

NAME=aerofs-$VER-${LOWERCASE_MODE} # e.g. aerofs-1.2.3-staging
ZIP=$NAME.zip          # e.g. aerofs-1.2.3-staging.zip

echo making $ZIP

rm -rf "$ZIP"
zip -9rqy $ZIP aerofs aerofs.osx aerofs.win \
aerofs.linux32 aerofs.linux64 aerofs.linux aerofs.linux.inst

#################################
# upload the zipfile as well as the proguard map files

echo uploading $ZIP and map files

kscp $ZIP $SVR_LOGIN:~/$ZIP
if [ $MODE == "PROD" ]; then
    kscp aerofs.map $MAP_LOGIN:$MAP_ROOT/aerofs-$VER-${LOWERCASE_MODE}.map
fi

#################################
# upload the zipfile with the java classes as well as the proguard map files

echo deploying on the server

DEFLATED=aerofs.release/${LOWERCASE_MODE} # directory on the server with the aerofs jars, libs, etc.

kssh $SVR_LOGIN \
    "set -e; \
    cd ~; \
    rm -rf $DEFLATED; \
    mkdir -p $DEFLATED; \
    cd $DEFLATED; \
    unzip -qo ~/$ZIP;
    rm -rf $SVR_TEMP;
    mkdir $SVR_TEMP; \
    "

DOWNLOADS="/data/${LOWERCASE_MODE}-downloads"

#################################
# build the debian package and publish it

echo deploying Linux installer .deb

kscp $PPWD/package_deb $SVR_LOGIN:$SVR_TEMP/

kssh $SVR_LOGIN \
    "set -e; \
    cd ~; \
    chmod a+x $SVR_TEMP/package_deb; \
    $SVR_TEMP/package_deb ${MODE} ~/$DEFLATED $DOWNLOADS/aerofs-installer.deb; \
"

#################################
# build the linux tgz installer (arch-independent)

echo deploying Linux installer .tgz

LINUX_TMP=$SVR_TEMP/aerofs.tmp
LINUX_INST_TGZ=aerofs-installer.tgz

kssh $SVR_LOGIN \
    "set -e; \
    cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux.inst/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX_INST_TGZ aerofs; \
    cp $LINUX_INST_TGZ $DOWNLOADS; \
    cd ~; \
"

#################################
# build the linux 32-bit tgz and publish it

echo deploying Linux 32bit .tgz

LINUX32_TGZ=aerofs-x86.tgz
LINUX32_VER_TGZ=aerofs-$VER-x86.tgz

kssh $SVR_LOGIN \
    "set -e; \
    cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux32/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX32_VER_TGZ aerofs; \
    cp $LINUX32_VER_TGZ $DOWNLOADS; \
    rm -f $DOWNLOADS/$LINUX32_TGZ; \
    mv $LINUX32_VER_TGZ $DOWNLOADS/$LINUX32_TGZ; \
    cp $DOWNLOADS/$LINUX32_TGZ $DOWNLOADS/aerofs-$VER-x86.tar.gz; \
    cd ~; \
"

#################################
# build the linux 64-bit tgz and publish it

echo deploying Linux 64bit .tgz

LINUX64_TGZ=aerofs-x86_64.tgz
LINUX64_VER_TGZ=aerofs-$VER-x86_64.tgz

kssh $SVR_LOGIN \
    "set -e; \
    cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux64/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX64_VER_TGZ aerofs; \
    cp $LINUX64_VER_TGZ $DOWNLOADS; \
    rm -f $DOWNLOADS/$LINUX64_TGZ; \
    mv $LINUX64_VER_TGZ $DOWNLOADS/$LINUX64_TGZ; \
    cp $DOWNLOADS/$LINUX64_TGZ $DOWNLOADS/aerofs-$VER-x86_64.tar.gz; \
    cd ~; \
"

#################################
# build the _full_ windows installer and publish it

echo deploying Windows package

NSIS_DIR=win_installer
PACKAGER=$SVR_ROOT/$NSIS_DIR/packager
PATCHER=$SVR_ROOT/$NSIS_DIR/patcher

# deploy NSIS scripts. knock ports first to allow rsync to go through
kssh $SVR_LOGIN 'echo > /dev/null'
rsync --archive --compress --relative --rsh ssh $AEROFS_GIT_ROOT/tools/./$NSIS_DIR $SVR_LOGIN:$SVR_ROOT

DATA="set -e; \
    rm -rf $PACKAGER/aerofs*; \
    cd $PACKAGER; \
    unzip -qo ~/$ZIP; \
    cp -r $PACKAGER/aerofs.win/* $PACKAGER/aerofs; \
    chmod -R a+rx $PACKAGER/aerofs*; \
    makensis -V1 -DAEROFS_SETUP_FOLDER=$DOWNLOADS -DAEROFS_VERSION=$VER $PACKAGER/setup.nsi; \
    export PASSPHRASE=\"$PASSPHRASE\"; \
    printenv PASSPHRASE | signcode -spc ~/.certs/cert.spc -v ~/.certs/privateKey.pvk \
        -a sha1 -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll \
        -tr 10 -n \"AeroFS\" -i \"http://www.aerofs.com\" $DOWNLOADS/AeroFSInstall-$VER.exe > /dev/null; \
    chmod a+r $DOWNLOADS/AeroFSInstall-$VER.exe; \
    rm -f $DOWNLOADS/AeroFSInstall.exe; \
    cp $DOWNLOADS/AeroFSInstall-$VER.exe $DOWNLOADS/AeroFSInstall.exe; \
    chmod a+r $DOWNLOADS/AeroFSInstall.exe; \
    "

#kaspersky requires us to upload the entire unpacked contents of aerofs into their servers
#we also upload the install file for whitelisting, as some versions of the antivirus flag the
#installer as a potential virus
if [ $MODE == "PROD" ]; then
  DATA="$DATA lftp -e 'mirror -R $PACKAGER/aerofs/ /aerofs/; bye' -u \`cat ~/.lftp/login.cfg\` whitelist1.kaspersky-labs.com;"
  DATA="$DATA lftp -e 'put $DOWNLOADS/AeroFSInstall.exe; bye' -u \`cat ~/.lftp/login.cfg\` whitelist1.kaspersky-labs.com;"
fi

kssh $SVR_LOGIN $DATA;

#################################
# build windows patches and publish them

echo creating Windows patches

kssh $SVR_LOGIN \
    "export PASSPHRASE=\"$PASSPHRASE\"; \
    bash $PATCHER/createPatches.sh \$HOME $PATCHER $VER ${LOWERCASE_MODE}; \
    rm $DOWNLOADS/patch-*; \
    mv $PATCHER/patch-* $DOWNLOADS; \
    chmod a+r $DOWNLOADS/patch-*; \
    " || true

#################################
# update current.ver (this version is not 'published' to the public until mac osx dmg is built and published)

echo updating current.ver
kssh $SVR_LOGIN \
    "set -e; \
    rm $DOWNLOADS/current.ver; \
    echo Version=$VER > $DOWNLOADS/current.ver; \
    chmod a+r $DOWNLOADS/current.ver; \
    echo ' ' | mail -s \"$NAME deployed by $USER\" team@aerofs.com \
    "
echo '+--------------------------+'
echo '| Remember to deploy MacOS |'
echo '+--------------------------+'

exit 0
