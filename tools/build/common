#!/bin/bash
set -eu

###############################################################################
#
# This include file contains all important constants for use with building
# and uploading release files to the release server.
#
# This file should be included with the following syntax:
#
# include common $PRODUCT
#
###############################################################################

# Similar to an ifndef in the C preprocessor. Only includes the contents of this
# file if they weren't imported before.
if [ x"${__COMMON_INCLUDE__:-}" == x ] ; then readonly __COMMON_INCLUDE__=true

###############################################################################
#
# Error codes
#
###############################################################################
readonly ERRNOINTERNET=16
readonly ERRBADARGS=17
readonly ERRBADMODE=18
readonly ERRBADPASS=19
readonly ERRS3=20
readonly ERRBADPRODUCT=21
readonly ERRBADVERSION=22
readonly ERRTESTFAIL=23

###############################################################################
#
# Local path constants
#
###############################################################################
GIT_ROOT="$(git rev-parse --show-cdup)"
if [ -z "$GIT_ROOT" ]; then
    GIT_ROOT="."
fi
readonly GIT_ROOT="$(cd "$GIT_ROOT" && pwd)"
readonly TOOLS_ROOT="${GIT_ROOT}/tools"
readonly BUILD_SCRIPT_DIR="${TOOLS_ROOT}/build"
readonly LOCAL_WINDOWS_DIR="${TOOLS_ROOT}/win_installer"
readonly LOCAL_MSI_DIR="${TOOLS_ROOT}/win_installer/msi"

# Local resources directories
readonly BASE_RESOURCES_DIR="${GIT_ROOT}/resource"
readonly COMMON_RESOURCES_DIR="${BASE_RESOURCES_DIR}/common"
readonly MODE_RESOURCES_DIR="${COMMON_RESOURCES_DIR}/mode"
readonly OTHER_RESOURCES_DIR="${COMMON_RESOURCES_DIR}/other"
readonly CLIENT_RESOURCES_DIR="${BASE_RESOURCES_DIR}/client"
readonly CLIENT_ALL_PLATFORMS_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/all"
readonly LABELING_RESOURCES_DIR="${CLIENT_ALL_PLATFORMS_RESOURCES_DIR}/labeling"
readonly CLIENT_LINUX_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/linux"
readonly CLIENT_LINUX_SHARED_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/linux/shared"
readonly CLIENT_LINUX32_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/linux/i386"
readonly CLIENT_LINUX64_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/linux/amd64"
readonly CLIENT_OSX_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/osx"
readonly CLIENT_WIN_RESOURCES_DIR="${CLIENT_RESOURCES_DIR}/win"
readonly CLIENT_BASE_SHELLEXT_DIR="${CLIENT_RESOURCES_DIR}/shellext"
readonly CLIENT_OSX_SHELLEXT_DIR="${CLIENT_BASE_SHELLEXT_DIR}/osx"
readonly CLIENT_WIN_SHELLEXT_DIR="${CLIENT_BASE_SHELLEXT_DIR}/win"

# Local resource template directories
readonly BASE_TEMPLATES_DIR="${BASE_RESOURCES_DIR}/templates"
readonly CLIENT_TEMPLATES_DIR="${BASE_TEMPLATES_DIR}/client"
readonly CLIENT_LINUX_TEMPLATES_DIR="${CLIENT_TEMPLATES_DIR}/linux"
readonly CLIENT_OSX_TEMPLATES_DIR="${CLIENT_TEMPLATES_DIR}/osx"
readonly CLIENT_LINUX_SHARED_TEMPLATES_DIR="${CLIENT_LINUX_TEMPLATES_DIR}/shared"

# Local updater executable directories
readonly BASE_UPDATER_DIR="${BASE_RESOURCES_DIR}/updater"
readonly LINUX_UPDATER_DIR="${BASE_UPDATER_DIR}/linux"
readonly OSX_UPDATER_DIR="${BASE_UPDATER_DIR}/osx"
readonly WIN_UPDATER_DIR="${BASE_UPDATER_DIR}/win"

# local build directory (where gradle will put stuff)
readonly BUILD_OUTPUT_DIR="${GIT_ROOT}/out.gradle"

# local root release directory and release dirs for each platform
# avoid putting scratch stuff in any of these directories because they are packaged into the installer
readonly LOCAL_RELEASE_DIR="${BUILD_OUTPUT_DIR}/release"
readonly AEROFS_RELEASE_DIR="${LOCAL_RELEASE_DIR}/aerofs"
readonly AEROFS_RELEASE_WIN_DIR="${LOCAL_RELEASE_DIR}/aerofs.win"
readonly AEROFS_RELEASE_OSX_DIR="${LOCAL_RELEASE_DIR}/aerofs.osx"
readonly AEROFS_RELEASE_LINUX_DIR="${LOCAL_RELEASE_DIR}/aerofs.linux"
readonly AEROFS_RELEASE_LINUX_SHARED_DIR="${AEROFS_RELEASE_LINUX_DIR}/shared"
readonly AEROFS_RELEASE_LINUX_I386_DIR="${AEROFS_RELEASE_LINUX_DIR}/i386"
readonly AEROFS_RELEASE_LINUX_AMD64_DIR="${AEROFS_RELEASE_LINUX_DIR}/amd64"

# Package temp folder
readonly PACKAGE_BUILD_DIR="$BUILD_OUTPUT_DIR/expandedpackages"
# Package output folder (final deployable artifacts go here)
readonly PACKAGE_DIR="$BUILD_OUTPUT_DIR/packages"
readonly UPDATES_DIR="$BUILD_OUTPUT_DIR/updates"

# Some OSX specific constants
readonly OSX_TEMPLATE_DMG_FILENAME="osx.dmg.template"
readonly OSX_TEMPLATE_APP_FILENAME="osx.app.template"

readonly SLACK_WEBHOOK="https://hooks.slack.com/services/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"

###############################################################################
#
# Constants relating to the product to be built (CLIENT/TEAM_SERVER)
#
###############################################################################

###############################################################################
#
# Returns 0 if the product is one that's recognized, or $ERRBADPRODUCT
# otherwise
#
# Args:
#    1: product to check
#
###############################################################################
function is_valid_product() {
    if [[ "$1" != "CLIENT" && "$1" != "TEAM_SERVER" && "$1" != "STORAGE_AGENT" ]]; then
        return $ERRBADPRODUCT
    fi
    return 0
}

# check that a valid product was specified
readonly PRODUCT="${1:-CLIENT}"
if ! is_valid_product "$PRODUCT" ; then
    echo >&2 "error: invalid build product $PRODUCT. Expected CLIENT|TEAM_SERVER."
    exit $ERRBADPRODUCT
fi
readonly LOWERCASE_PRODUCT="$(echo $PRODUCT | tr '[A-Z]' '[a-z]')"
readonly LABELING_FILE="$LABELING_RESOURCES_DIR/$LOWERCASE_PRODUCT/labeling.properties"
readonly MODE="PRIVATE"
readonly LOWERCASE_MODE="private"

###############################################################################
#
# Release server constants
#
###############################################################################

# We use the same user account when deploying to public/private.
readonly RELEASE_SERVER_USERNAME=release-prod
readonly RELEASE_SERVER="b.arrowfs.org"
readonly RELEASE_SERVER_LOGIN="${RELEASE_SERVER_USERNAME}@${RELEASE_SERVER}"
readonly RELEASE_SERVER_SHELL="bash -s -e -u"

###############################################################################
#
# Release server paths
#
###############################################################################
readonly INSTALLERS_DOWNLOAD_DIR="/data/${LOWERCASE_MODE}-downloads"
readonly CURRENT_VER="current.ver"

###############################################################################
#
# Returns 0 if the product is CLIENT, 1 otherwise
#
###############################################################################
function is_client() {
    if [ "$PRODUCT" == "CLIENT" ]; then
        return 0
    fi
    return 1
}

###############################################################################
#
# Returns 0 if the product is TEAM_SERVER, 1 otherwise
#
###############################################################################
function is_team_server() {
    if [ "$PRODUCT" == "TEAM_SERVER" ]; then
        return 0
    fi
    return 1
}

###############################################################################
#
# Returns 0 if the product is STORAGE_AGENT, 1 otherwise
#
###############################################################################
function is_storage_agent() {
    if [ "$PRODUCT" == "STORAGE_AGENT" ]; then
        return 0
    fi
    return 1
}

RELEASE_VERSION_REGEX="^[0-9]+\\.[0-9]+\\.[0-9]+$"

###############################################################################
#
# Exit if the given string is not a properly-formatted version string like "1.2.3"
#
###############################################################################
function check_version_format() {
    if [[ ! ${1:-} =~ $RELEASE_VERSION_REGEX ]]; then
        echo >&2 "You said ${1} ..."
        echo >&2 "That's a weird release version.  I was expecting something matching:"
        echo >&2 "$RELEASE_VERSION_REGEX"
        echo >&2 "like 0.8.33 or something."
        exit $ERRBADARGS
    fi
}

# Gets the product names from the labeling file.
function compute_product_names() {
    echo ">> computing product name"
    function get_property() {
        local local_PROPERTY="$1"
        # Note the equals.
        local local_KEY_VALUE_PAIR=$(grep ^"$local_PROPERTY"= $LABELING_FILE)
        if [[ $? -ne 0 ]] ; then
            echo >&2 "Couldn't retrieve property $local_PROPERTY from $LABELING_FILE"
            exit 1
        fi
        local local_VALUE=$(echo "$local_KEY_VALUE_PAIR" | cut -d = -f 2)
        if [[ -z "$local_VALUE" ]] ; then
            echo >&2 "Couldn't retrieve property $local_PROPERTY from $LABELING_FILE"
            exit 1
        fi
        echo "$local_VALUE"
    }

    readonly AEROFS_PRODUCT=$(get_property "labeling.product")
    readonly AEROFS_PRODUCT_SPACEFREE=$(get_property "labeling.productSpaceFreeName")
    readonly AEROFS_PRODUCT_UNIX=$(get_property "labeling.productUnixName")
    echo "PRODUCT = $AEROFS_PRODUCT"
    echo "PRODUCT_SPACEFREE = $AEROFS_PRODUCT_SPACEFREE"
    echo "PRODUCT_UNIX = $AEROFS_PRODUCT_UNIX"
}

# replaces the values AEROFS_PRODUCT_SPACEFREE, AEROFS_PRODUCT_UNIX, and
# AEROFS_PRODUCT in a file with the appropriate set from the environment, given
# the current labeling
function render_template() {
    if [ -z "$AEROFS_PRODUCT_SPACEFREE" -o -z "$AEROFS_PRODUCT_UNIX" -o -z "$AEROFS_PRODUCT" ] ; then
        echo >&2 "Can't render template: one of the following is empty or unset:"
        echo >&2 "\$AEROFS_PRODUCT           = $AEROFS_PRODUCT"
        echo >&2 "\$AEROFS_PRODUCT_UNIX      = $AEROFS_PRODUCT_UNIX"
        echo >&2 "\$AEROFS_PRODUCT_SPACEFREE = $AEROFS_PRODUCT_SPACEFREE"
        exit 1
    fi

    if [ $# -ne 2 ]; then
        echo >&2 "You invoked: $0 $@"
        echo >&2 "Usage: $0 <template_file> <output_file>"
        exit 1
    fi

    if [ ! -f "$1" ]; then
        echo >&2 "Template file does not exist: $1"
        exit 1
    fi

    if [ -f "$2" ]; then
        echo >&2 "Tried to render to existing file: $2"
        exit 1
    fi

    # render from template file to output file
    # we cp -a first to make sure the rendered file keeps the same permissions
    # as its source file, which is important for things like the Linux launcher
    # and copier scripts, as well as the Linux and OSX updaters.  > will
    # truncate the file before writing output without changing permissions.
    cp -a "$1" "$2"
    sed -e "s/\[AEROFS_PRODUCT_SPACEFREE\]/${AEROFS_PRODUCT_SPACEFREE}/g" \
        -e "s/\[AEROFS_PRODUCT_UNIX\]/${AEROFS_PRODUCT_UNIX}/g" \
        -e "s/\[AEROFS_PRODUCT\]/${AEROFS_PRODUCT}/g" \
        "$1" > "$2"
}

fi # endif
