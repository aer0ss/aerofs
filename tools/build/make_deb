#!/bin/bash -e

#################################
# arguments

if [[ x"$1" == x || x"$2" == x || x"$3" == x || x"$4" == x ]]; then
    echo usage "$0 [build mode] [version number] [remote release dir] [output deb filename]"
    echo "[build mode]: STAGING or PROD"
    echo "[version number]: major.minor.release (e.g. 0.4.65)"
    echo "[remote release dir]: directory in which the release files are on the build server"
    echo "[output deb filename]: name of the deb file this script creates"
    echo
    echo "IMPORTANT: this script is meant to be run on a remote server!!!!"
    echo
    echo "example: $0 STAGING 0.4.65 ~/aerofs.release /data/staging-downloads/[AEROFS_PRODUCT_UNIX]-installer.deb"
    exit
fi

set -u

#################################
# build mode

MODE=""
LOWERCASE_MODE=""
if [ "$1" == "PROD" ]; then
    MODE="PROD"
    LOWERCASE_MODE="prod"
elif [ "$1" == "STAGING" ]; then
    MODE="STAGING"
    LOWERCASE_MODE="staging"
else
    echo "Invalid build mode $1.  Expected STAGING or PROD."
fi

#################################
# set parameters
readonly SERVER_RELEASE_DIR=$3
readonly OUTPUT_DEB_NAME="$4"

# debian control-file parameters
readonly PACKAGE_NAME=$(echo $OUTPUT_DEB_NAME | awk -F'/' '{print $NF}' | awk -F '.' '{print $1}')
readonly VERSION=$2
readonly SECTION='utility'
readonly PRIORITY='optional'

#sharutils is used by uudecode
readonly DEPENDS='default-jre(>= 1.6), sharutils, procps, file, coreutils'
readonly MAINTAINER='AeroFS Team <support@aerofs.com>'
readonly DESCRIPTION='AeroFS: File syncing without servers.'

#################################
# create a working directory for package building

readonly DEB_BUILD_DIR="$( mktemp -d -t make_deb_${LOWERCASE_MODE}_XXXXXX )"
trap "rm -r $DEB_BUILD_DIR" EXIT

#################################
# start packaging
# all work done in $DEB_BUILD_DIR from now

echo ">> build ${PACKAGE_NAME} version = $VERSION"

pushd $DEB_BUILD_DIR > /dev/null
trap "popd > /dev/null || true" EXIT

HICOLOR_DIR=debian/usr/share/icons/hicolor
DEBIAN_CONTROL_DIR=debian/DEBIAN
mkdir -p $DEBIAN_CONTROL_DIR

#################################
# copy the files we need on the client system into the correct spots in the debian package

#used for linked aerofs executables
mkdir -p debian/usr/bin/

# Bump max inotify watches to something absurdly huge.
mkdir -p debian/etc/sysctl.d/
cat << EOF >> debian/etc/sysctl.d/30-[AEROFS_PRODUCT_UNIX]-increase-inotify-limit.conf
# Increase the maximum number of inotify watches allowed per user from the
# default value of 8192.
# AeroFS needs to create a watch for every folder under your AeroFS folder.
# For some users, this can be a bunch of folders.  We picked a big number that
# will hopefully be more than sufficient for virtually all users.
fs.inotify.max_user_watches = 1048576
EOF

#used for menu items in GNOME
mkdir -p debian/usr/share/applications

#################################
# generate the .deb file

mkdir -p $HICOLOR_DIR/16x16/apps
mkdir -p $HICOLOR_DIR/32x32/apps
mkdir -p $HICOLOR_DIR/64x64/apps

cp -R $SERVER_RELEASE_DIR/aerofs.linux.inst/[AEROFS_PRODUCT_UNIX]* debian/usr/bin/
chmod a+x debian/usr/bin/[AEROFS_PRODUCT_UNIX]

cp $SERVER_RELEASE_DIR/aerofs.linux/[AEROFS_PRODUCT_UNIX].desktop debian/usr/share/applications/[AEROFS_PRODUCT_UNIX].desktop

cp $SERVER_RELEASE_DIR/aerofs/icons/logo16.png $HICOLOR_DIR/16x16/apps/[AEROFS_PRODUCT_UNIX].png
cp $SERVER_RELEASE_DIR/aerofs/icons/logo32.png $HICOLOR_DIR/32x32/apps/[AEROFS_PRODUCT_UNIX].png
cp $SERVER_RELEASE_DIR/aerofs/icons/logo64.png $HICOLOR_DIR/64x64/apps/[AEROFS_PRODUCT_UNIX].png

#################################
# generate the control file

cat << EOF >> $DEBIAN_CONTROL_DIR/control
Package: $PACKAGE_NAME
Version: $VERSION
Section: $SECTION
Priority: $PRIORITY
Architecture: all
Depends: $DEPENDS
Maintainer: $MAINTAINER
Description: $DESCRIPTION
Installed-Size: $(du -sk | awk '{print $1}')
EOF

#################################
# generate preinst, postinst and postrm

# We used to install to /usr/local/bin ; it's more correct for packages
# installed via the package manager to go in /usr/bin/.

# NOTE: we call procps start so that the sysctl values that
# were modified are loaded.  However, on some systems (like OpenVZ containers)
# certain sysctl variables cannot be set, so we ignore such failures.

# We pre-remove the files and links from both locations.
cat << EOF >> $DEBIAN_CONTROL_DIR/preinst
#!/bin/bash
rm -rf /usr{,/local}/bin/[AEROFS_PRODUCT_UNIX]{,-sh,-cli,-gui}
EOF

cat << EOF >> $DEBIAN_CONTROL_DIR/postinst
#!/bin/bash
invoke-rc.d procps start || echo "Warning: couldn't set sysctl parameters; file changes may take some time to propagate"
EOF

# Remove symlinks on uninstallation.
cat << EOF >> $DEBIAN_CONTROL_DIR/postrm
#!/bin/bash
invoke-rc.d procps start || true
EOF

#################################
# finally build the .deb

find ./debian -type d | xargs chmod 755
chmod 755 $DEBIAN_CONTROL_DIR/{preinst,postinst,postrm}
fakeroot dpkg-deb --build debian #fakeroot allows deb to be built with root attributes for chown/chmod
mv debian.deb $OUTPUT_DEB_NAME
