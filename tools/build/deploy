#!/bin/sh

set -e

# usage $0 [staging|prod]
# exit non-zero if deployment failed

DEPLOY_SP_DAEMON=0

SP_SVR_LOGIN=aerofs@x1.aerofs.com

if [ x"$2" == x ]; then
  echo usage '$0 [staging|prod] [deployment passphrase]'
  exit 2
fi

if [ $1 == prod ]; then
  PROD=1
else
  PROD=0
fi

if [ $PROD == 1 ]; then
  SVR_LOGIN=release-prod@b.arrowfs.org
  SVR_ROOT=/home/release-prod
  SVR_TEMP=/tmp/release-prod
else
  SVR_LOGIN=release-staging@b.arrowfs.org
  SVR_ROOT=/home/release-staging
  SVR_TEMP=/tmp/release-staging
fi

BUILDTYPE=$1
PASSPHRASE=$2
PPWD=$PWD
VERSION_FILE=version

cd ../../release.out

VER=`head -1 aerofs/$VERSION_FILE`

NAME=aerofs-$VER-$1     # e.g. aerofs-1.2.3-staging
ZIP=$NAME.zip           # e.g. aerofs-1.2.3-staging.zip

echo making $ZIP
rm -rf $ZIP
zip -9rqy $ZIP aerofs aerofs.osx aerofs.win \
aerofs.linux32 aerofs.linux64 aerofs.linux aerofs.linux.inst

echo uploading $ZIP and map files
kscp $ZIP $SVR_LOGIN:~/$ZIP
if [ $PROD == 1 ]; then
    kscp aerofs.map $SVR_LOGIN:~/aerofs-$VER-$1.map
fi

echo deploying on the server

DEFLATED=aerofs.release/$1

kssh $SVR_LOGIN \
    "cd ~; \
    rm -rf $DEFLATED; \
    mkdir -p $DEFLATED; \
    cd $DEFLATED; \
    unzip -qo ~/$ZIP;
    rm -rf $SVR_TEMP;
    mkdir $SVR_TEMP; \
    "
if [ $PROD == 1 ]; then
  DOWNLOAD_BUCKET=s3://nocache.client.aerofs.com
  DOWNLOADS=/data/prod-downloads
else
  DOWNLOAD_BUCKET=s3://nocache.client.staging.aerofs.com
  DOWNLOADS=/data/staging-downloads
fi
###################
echo deploying Linux installer .deb

kscp $PPWD/build_deb $SVR_LOGIN:$SVR_TEMP/

kssh $SVR_LOGIN \
    "cd ~; \
    chmod a+x /$SVR_TEMP/build_deb; \
    /$SVR_TEMP/build_deb ~/$DEFLATED $DOWNLOADS/aerofs-installer.deb $BUILDTYPE; \
"

###################
echo deploying Linux installer .tgz

LINUX_TMP=$SVR_TEMP/aerofs.tmp
LINUX_INST_TGZ=aerofs-installer.tgz

kssh $SVR_LOGIN \
    "cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux.inst/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX_INST_TGZ aerofs; \
    cp $LINUX_INST_TGZ $DOWNLOADS; \
    cd ~; \
"

###################
echo deploying Linux 32bit .tgz

LINUX32_TGZ=aerofs-x86.tgz
LINUX32_VER_TGZ=aerofs-$VER-x86.tgz

kssh $SVR_LOGIN \
    "cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux32/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX32_VER_TGZ aerofs; \
    cp $LINUX32_VER_TGZ $DOWNLOADS; \
    rm -f $DOWNLOADS/$LINUX32_TGZ; \
    mv $LINUX32_VER_TGZ $DOWNLOADS/$LINUX32_TGZ; \
    cp $DOWNLOADS/$LINUX32_TGZ $DOWNLOADS/aerofs-$VER-x86.tar.gz; \
    cd ~; \
"

###################
echo deploying Linux 64bit .tgz

LINUX64_TGZ=aerofs-x86_64.tgz
LINUX64_VER_TGZ=aerofs-$VER-x86_64.tgz

kssh $SVR_LOGIN \
    "cd ~; \
    rm -rf $LINUX_TMP; \
    mkdir -p $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux/* $LINUX_TMP/aerofs; \
    cp -rf $DEFLATED/aerofs.linux64/* $LINUX_TMP/aerofs; \
    cd $LINUX_TMP; \
    tar zcf $LINUX64_VER_TGZ aerofs; \
    cp $LINUX64_VER_TGZ $DOWNLOADS; \
    rm -f $DOWNLOADS/$LINUX64_TGZ; \
    mv $LINUX64_VER_TGZ $DOWNLOADS/$LINUX64_TGZ; \
    cp $DOWNLOADS/$LINUX64_TGZ $DOWNLOADS/aerofs-$VER-x86_64.tar.gz; \
    cd ~; \
"

###################
echo deploying Windows package

NSIS_DIR=win_installer
PACKAGER=$SVR_ROOT/$NSIS_DIR/packager
PATCHER=$SVR_ROOT/$NSIS_DIR/patcher

# deploy NSIS scripts. knock ports first to allow rsync to go through
kssh $SVR_LOGIN 'echo > /dev/null'
rsync --archive --compress --relative --rsh ssh ../tools/./$NSIS_DIR $SVR_LOGIN:$SVR_ROOT

DATA="rm -rf $PACKAGER/aerofs*; \
    cd $PACKAGER; \
    unzip -qo ~/$ZIP; \
	cp -r $PACKAGER/aerofs.win/* $PACKAGER/aerofs; \
    chmod -R a+rx $PACKAGER/aerofs*; \
    makensis -V1 -DAEROFS_SETUP_FOLDER=$DOWNLOADS -DAEROFS_VERSION=$VER $PACKAGER/setup.nsi; \
    export PASSPHRASE=\"$PASSPHRASE\"; \
    printenv PASSPHRASE | signcode -spc ~/.certs/cert.spc -v ~/.certs/privateKey.pvk \
        -a sha1 -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll \
        -tr 10 -n \"AeroFS\" -i \"http://www.aerofs.com\" $DOWNLOADS/AeroFSInstall-$VER.exe > /dev/null; \
    chmod a+r $DOWNLOADS/AeroFSInstall-$VER.exe; \
    rm -f $DOWNLOADS/AeroFSInstall.exe; \
    cp $DOWNLOADS/AeroFSInstall-$VER.exe $DOWNLOADS/AeroFSInstall.exe; \
    chmod a+r $DOWNLOADS/AeroFSInstall.exe; \
    "

kssh $SVR_LOGIN $DATA;

###################
echo creating Windows patches

kssh $SVR_LOGIN \
    " export PASSPHRASE=\"$PASSPHRASE\"; \
    bash $PATCHER/createPatches.sh \$HOME $PATCHER $VER $1; \
    rm $DOWNLOADS/patch-*; \
    mv $PATCHER/patch-* $DOWNLOADS; \
    chmod a+r $DOWNLOADS/patch-*; \
    " || true

###################
if [ $DEPLOY_SP_DAEMON == 1 ]; then
    ###################
    echo deploying and restarting sp daemon

    kscp $SVR_LOGIN:$DOWNLOADS/aerofs-x86_64.tgz $SP_SVR_LOGIN:~/
    kssh $SP_SVR_LOGIN \
        "rm -rf tmp;
        mkdir tmp;
        cd tmp;
        mv ~/aerofs-x86_64.tgz .;
        tar zxf *.tgz;
        cp -rf aerofs/* /data/aerofs/$1;
        echo 1000.0.0 > /data/aerofs/$1/$VERSION_FILE;
        ps -ef | grep user.$1 | grep -v grep; \
        # the operator should kill cli and daemon manually
        # kill -9 \`ps -ef | grep user.$1\ cli | grep -v grep | awk '{print \$2}'\`; \
        # kill -9 \`ps -ef | grep user.$1\ daemon | grep -v grep | awk '{print \$2}'\`; \
        kill -9 \`ps -ef | grep user.$1\ s3uploader | grep -v grep | awk '{print \$2}'\`; \
        kill -9 \`ps -ef | grep user.$1\ s3cache | grep -v grep | awk '{print \$2}'\`; \
        "

    echo '[ ACTION REQUIRED ]'
    echo '>>> please log on to x1, kill cli and daemon process, restart them, and  make sure all FOUR daemon processes are running. press Enter to continue.'
    read # Will not work when run through ant, but I'll worry about this later
fi

###################
echo updating current.ver
kssh $SVR_LOGIN \
    "rm $DOWNLOADS/current.ver; \
    echo Version=$VER > $DOWNLOADS/current.ver; \
    chmod a+r $DOWNLOADS/current.ver; \
    echo ' ' | mail -s \"$NAME deployed by $USER\" team@aerofs.com \
    "
echo '+-------------------------------------------+'
echo '| Remember to deploy MacOS, as well as SPSV |'
echo '+-------------------------------------------+'

exit 0
