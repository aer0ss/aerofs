#!/bin/bash -e -u

###############################################################################
#
# General includes
#
###############################################################################
include include/common $1

###############################################################################
#
# usage and parameters
#
###############################################################################
if [[ $# -lt 1 || $# -gt 2 ]]; then
    echo "usage: $0 [build mode] [passphrase]" >&2
    echo " " >&2
    echo "[build mode]: STAGING or PROD" >&2
    echo "[passphrase]: release passphrase" >&2
    echo " " >&2
    echo "example: $0 STAGING" >&2
    echo "example: $0 PROD [passphrase]" >&2
    exit $ERRBADARGS
fi

# PROD requires a passphrase to deploy
if [[ x"${2:-}" == x && $MODE == "PROD" ]]; then
    echo "error: passphrase required for production release" >&2
    exit $ERRBADPASS
fi

readonly PASSPHRASE="${2:-$STAGING_PASSPHRASE}"

###############################################################################
#
# Checks the current active version on S3 and computes the next logical version.
#
###############################################################################
function compute_next_release_version() {
    local local_CURRENT_RELEASE_VERSION="$( current_release_version $RELEASE_VERSION_URL )"
    if [ "$local_CURRENT_RELEASE_VERSION" == "" ]; then
        echo "error: can't get current release version" >&2
        exit $ERRNOINTERNET
    fi

    local local_CURRENT_RELEASE_VERSION_MAJOR_MINOR="$( echo $local_CURRENT_RELEASE_VERSION | sed -e 's/\.[0-9]*$//' )"
    local local_CURRENT_RELEASE_VERSION_BUILD_NUMBR="$( echo $local_CURRENT_RELEASE_VERSION | sed -e 's/.*\.//' )"
    local local_LOCAL_VERSION_MAJOR_MINOR="$( head -1 ${BUILD_SCRIPT_DIR}/version )"

    readonly local_CURRENT_RELEASE_VERSION_STRING
    readonly local_CURRENT_RELEASE_VERSION
    readonly local_CURRENT_RELEASE_VERSION_MAJOR_MINOR
    readonly local_CURRENT_RELEASE_VERSION_BUILD_NUMBR
    readonly local_LOCAL_VERSION_MAJOR_MINOR

    local local_BUILD_NUMBER=""
    if [ $local_CURRENT_RELEASE_VERSION_MAJOR_MINOR == $local_LOCAL_VERSION_MAJOR_MINOR ]; then  #FIXME (AG): verify they've actually bumped the number
        local_BUILD_NUMBER="$( expr $local_CURRENT_RELEASE_VERSION_BUILD_NUMBR \+ 1 )"
    else
        local_BUILD_NUMBER=1 # reset build number to 1
    fi

    readonly RELEASE_VERSION="$local_LOCAL_VERSION_MAJOR_MINOR.$local_BUILD_NUMBER"
    echo "version: current => [major.minor.build:$local_CURRENT_RELEASE_VERSION] next => [major.minor.build:$RELEASE_VERSION]"
}

###############################################################################
#
# Emails team@aerofs.com about this deployment.
#
###############################################################################
function notify_successful_deployment() {
    echo ">> notifying team of successful deployment"
    kssh $RELEASE_SERVER_LOGIN $RELEASE_SERVER_SHELL << ENDCMDS
        echo ' ' | mail -s "[$MODE] $RELEASE_VERSION deployed by $USER" team@aerofs.com
ENDCMDS
}

###############################################################################
#
# Tags this release with an annotated tag so it is easy to checkout a deployed
# build for debugging.
#
###############################################################################
function tag_release() {
    if is_prod ; then
        echo ">> tagging git release"
        git tag -a "$RELEASE_VERSION" -m "$RELEASE_VERSION"
        git push --tags
    fi
}

#******************************************************************************
#******************************************************************************
#**
#** Run all of the deployment steps
#**
#******************************************************************************
#******************************************************************************
if is_prod ; then
    echo
    echo "!!!!!!!!!!!!!!!!!!!!!!!"
    echo "!! DEPLOY PRODUCTION !!"
    echo "!!!!!!!!!!!!!!!!!!!!!!!"
    echo
fi

compute_next_release_version
echo '+--------------------------'
echo '| ' $RELEASE_VERSION $MODE
echo '+--------------------------'

call make_release_resources $MODE $RELEASE_VERSION
call make_client_installers $MODE $RELEASE_VERSION "$PASSPHRASE"
call exec_prepublish_checks $MODE $RELEASE_VERSION $RELEASE_SERVER_LOGIN "$INSTALLERS_DOWNLOAD_DIR"
publish_to_s3 $RELEASE_VERSION $INSTALLER_DOWNLOAD_BUCKET
tag_release
notify_successful_deployment

echo ">> successfully deployed $MODE release version $RELEASE_VERSION"
exit 0
