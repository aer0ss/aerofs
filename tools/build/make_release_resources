#!/bin/bash -e

if [[ x"$1" == x || x"$2" == x || x"$3" == x || x"$4" == x || x"$5" == x ]]; then
    echo "usage: $0 [build mode] [release_version] [aerofs git root] [aerofs build dir] [aerofs release dir]"
    echo "[build mode]: STAGING or PROD"
    echo "[release_version]: release version"
    echo "[aerofs git root]: root of the aerofs git tree (usually ~/repos/aerofs)"
    echo "[aerofs build dir]: path into which all ant (or non-ide) build artifacts are placed (usually ~/repos/aerofs/out.ant)"
    echo "[aerofs release dir]: path into which the final built jar and all platform-specific jars and libs are places (usually ~/repos/aerofs/out.ant/release)"
    echo
    echo "example: $0 STAGING 0.1.0 /Users/aerofsbuild/repos/aerofs /Users/aerofsbuild/repos/aerofs/out.ant /Users/aerofsbuild/repos/aerofs/out.ant/release"
    exit 2
fi

set -u

#################################
# build mode

MODE=""
if [ "$1" == "PROD" ]; then
    MODE="PROD"
elif [ "$1" == "STAGING" ]; then
    MODE="STAGING"
else
    echo "Invalid build mode $1.  Expected STAGING or PROD."
    exit 2
fi

#################################
# set variables

VERSION=$2

# source dirs
AEROFS_GIT_ROOT=$3
BUILD_DIR=$4
CLIENT_RESOURCES_DIR=$AEROFS_GIT_ROOT/resource/client
#LAUNCHER=$AEROFS_GIT_ROOT/java/launcher
PROGUARD_HOME=$AEROFS_GIT_ROOT/tools/proguard

# dest dirs
RELEASE_DIR=$5
AEROFS_DIR=$RELEASE_DIR/aerofs
AEROFS_WIN_DIR=$RELEASE_DIR/aerofs.win
AEROFS_OSX_DIR=$RELEASE_DIR/aerofs.osx
AEROFS_LINUX_DIR=$RELEASE_DIR/aerofs.linux
AEROFS_LINUX32_DIR=$RELEASE_DIR/aerofs.linux32
AEROFS_LINUX64_DIR=$RELEASE_DIR/aerofs.linux64
AEROFS_INST_DIR=$RELEASE_DIR/aerofs.linux.inst

rm -rf "$RELEASE_DIR"

#################################
# ensure dest dirs exists

mkdir -p "$AEROFS_DIR"/
mkdir -p "$AEROFS_WIN_DIR"/
mkdir -p "$AEROFS_OSX_DIR"/
mkdir -p "$AEROFS_LINUX_DIR"/
mkdir -p "$AEROFS_LINUX_DIR"/lib/
mkdir -p "$AEROFS_LINUX32_DIR"/
mkdir -p "$AEROFS_LINUX64_DIR"/
mkdir -p "$AEROFS_INST_DIR"/

VERSION_FILE=version

##################################
# make ver and staging

echo $VERSION > $AEROFS_DIR/$VERSION_FILE

if [ $MODE == "STAGING" ]; then
  touch $AEROFS_DIR/stg
fi

##################################
# Copy "resource/client" files

cp -R "$CLIENT_RESOURCES_DIR"/common/* "$AEROFS_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/osx/* "$AEROFS_OSX_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/win/* "$AEROFS_WIN_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/linux/* "$AEROFS_LINUX_DIR"/
# N.B. We put the run scripts from the installer package in the actual aerofs
# package so we can restart the Linux client automatically, even if aerofs-cli
# (the launcher shell script) isn't on the user's PATH
cp -R "$CLIENT_RESOURCES_DIR"/linux.inst/aerofs* "$AEROFS_LINUX_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/s3/lib/* "$AEROFS_LINUX_DIR"/lib/
cp -R "$CLIENT_RESOURCES_DIR"/linux32/* "$AEROFS_LINUX32_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/linux64/* "$AEROFS_LINUX64_DIR"/
cp -R "$CLIENT_RESOURCES_DIR"/linux.inst/* "$AEROFS_INST_DIR"/
#cp "$LAUNCHER"/bin/$OS/* "$BUILD_DIR"/

rm -rf "$AEROFS_DIR"/lib.test

# Adjust files for prod or staging
if [ $MODE == "PROD" ]; then
    rm "$AEROFS_DIR"/cacert-staging.pem
    mv "$AEROFS_DIR"/cacert-prod.pem "$AEROFS_DIR"/cacert.pem
else
    rm "$AEROFS_DIR"/cacert-prod.pem
    mv "$AEROFS_DIR"/cacert-staging.pem "$AEROFS_DIR"/cacert.pem
fi

###################################
# Labelling stuff - TO BE REMOVED
#cp labeling/$LABELING/icons/* $AEROFS_DIR/icons
#for i in labeling/$LABELING/os/*; do cp -R $i/ $AEROFS_DIR.`basename $i`; done

cd $AEROFS_DIR

TEMP_MANIFEST=m.tmp
###################################
#echo generate manifest

echo "Main-Class: com.aerofs.Main" > "$TEMP_MANIFEST"
echo "Class-Path: " >> "$TEMP_MANIFEST"

for i in lib/*.jar; do
    echo " $i " >> "$TEMP_MANIFEST"
done

#echo N.B. platform-dependent jars must have identical names
for i in `ls $AEROFS_WIN_DIR/lib/`; do
    echo " lib/$i " >> "$TEMP_MANIFEST"
done

# mac-specific jars
echo " lib/growlbindings-1.3.1.jar " >> "$TEMP_MANIFEST"

# s3 jars
for i in "$CLIENT_RESOURCES_DIR/s3/lib"/*.jar; do
    echo " lib/$(basename "$i") " >> "$TEMP_MANIFEST"
done

###################################
#echo copy class files

mkdir -p bin
cp -Rf $BUILD_DIR/bin/* bin/

###################################
# remove unnecessary files (bin/com/aerofs/downloader will be moved away later)

find bin/ -name .DS_Store | xargs rm -f

if [ $MODE == "PROD" ]; then
    # TODO: (AG) move these as excludes into build.xml
    rm -rf bin/com/aerofs/sak
fi

# labeling - TO BE REMOVED
#if [ $LABELING != aerofs ]; then
#    rm -rf bin/com/aerofs/l/AA.class
#fi
#if [ $LABELING != comcast ]; then
    rm -rf bin/com/aerofs/l/CC.class
#fi

###################################
#echo generate aerofs-installer

if [ $MODE == "PROD" ]; then
    DOT_STAGING=''
else
    DOT_STAGING='.stg'
fi
sed -e "s=DOT_STAGING__TO_BE_REPLACED_BY_SED=$DOT_STAGING=" "$CLIENT_RESOURCES_DIR"/linux.inst/aerofs > "$AEROFS_INST_DIR"/aerofs
sed -e "s=DOT_STAGING__TO_BE_REPLACED_BY_SED=$DOT_STAGING=" "$CLIENT_RESOURCES_DIR"/linux.inst/aerofs > "$AEROFS_LINUX_DIR"/aerofs

DLR_TMP=/tmp/aerofs-dlr
AEROFS_DLR_PKG=com/aerofs/downloader
rm -rf "$DLR_TMP"
mkdir -p $DLR_TMP/$AEROFS_DLR_PKG
mv bin/$AEROFS_DLR_PKG/* $DLR_TMP/$AEROFS_DLR_PKG
cp $CLIENT_RESOURCES_DIR/linux32/lib/swt-*.jar $DLR_TMP/s32.jar
cp $CLIENT_RESOURCES_DIR/linux64/lib/swt-*.jar $DLR_TMP/s64.jar
tar zcf - -C $DLR_TMP . | uuencode bin >> $AEROFS_INST_DIR/aerofs

###################################
echo creating jars
jar cfm aerofs.unobf.jar "$TEMP_MANIFEST" -C bin com -C bin org

# echo remove unnecessary files
rm -rf bin "$TEMP_MANIFEST"

###################################

PG_AEROFS_DIR=`echo $AEROFS_DIR | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
PG_RELEASE_DIR=`echo $RELEASE_DIR | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
PG_HOME=`echo $PROGUARD_HOME | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`

echo obfuscating jar
cd $PROGUARD_HOME

./bin/proguard.sh -injars $PG_AEROFS_DIR/aerofs.unobf.jar -outjars $PG_AEROFS_DIR/aerofs.jar \
-printmapping $PG_RELEASE_DIR/aerofs.map \
-repackageclasses "com.aerofs" \
-dontwarn 'com.aerofs.sak.**' \
-dontnote 'com.aerofs.l.*' \
@$PG_HOME/aerofs.pro

rm -rf "$PG_AEROFS_DIR/aerofs.unobf.jar"

###################################
# echo write checksums

CHKSUM_LIST="\
    aerofs.jar:$AEROFS_DIR/aerofs.jar \
    aerofsd.dll:$AEROFS_WIN_DIR/aerofsd.dll \
    aerofsj.dll:$AEROFS_WIN_DIR/aerofsj.dll \
    libaerofsd.dylib:$AEROFS_OSX_DIR/libaerofsd.dylib \
    libaerofsj.dylib:$AEROFS_OSX_DIR/libaerofsj.dylib \
"

for i in $CHKSUM_LIST; do
    FILE_PATH=`echo $i | sed -e 's/.*://'`
    FILE_NAME=`echo $i | sed -e 's/:.*//'`
    CHKSUM=`shasum -a 256 $FILE_PATH | sed -e 's/ .*//'`
    echo "$FILE_NAME=$CHKSUM" >> $AEROFS_DIR/$VERSION_FILE
done
