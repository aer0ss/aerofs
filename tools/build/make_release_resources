#!/bin/bash -e -u

###############################################################################
#
# This script moves platform specific libraries to the proper locations,
# creates an obfuscated jar for AeroFS and prepares the code for packaging.
# Everything here is done on the local system.
#
###############################################################################

include include/common ${1:-} ${2:-}

###############################################################################
#
# arguments and usage
#
###############################################################################
if [[ $# -ne 3 ]]; then
    echo "usage: $0 [build mode] [build product] [release version]" >&2
    echo " " >&2
    echo "[build mode]: STAGING or PROD" >&2
    echo "[build product]: CLIENT or TEAM_SERVER" >&2
    echo "[release version]: major.minor.build" >&2
    echo " " >&2
    echo "example: $0 STAGING CLIENT 0.4.98" >&2
    echo "example: $0 PROD TEAM_SERVER 0.4.99" >&2
    exit $ERRBADARGS
fi

readonly RELEASE_VERSION="$3"

function render_template_in_place_on() {
    # Applies template substitution to any number of files.
    while [[ $# -gt 0 ]]; do
        # render the next file
        sed -i "" -e "s/\[AEROFS_PRODUCT_SPACEFREE\]/${AEROFS_PRODUCT_SPACEFREE}/g" $1
        sed -i "" -e "s/\[AEROFS_PRODUCT_UNIX\]/${AEROFS_PRODUCT_UNIX}/g" $1
        sed -i "" -e "s/\[AEROFS_PRODUCT\]/${AEROFS_PRODUCT}/g" $1
        shift 1
    done
}

######################################################################
#
# Copies and creates the necessary resources in a local resource folder
# for each platform. This includes moving platform specific libraries,
# copying the correct certificates, and creating a version file.
#
######################################################################
function copy_resources_to_local_release_directories() {
    echo ">> copying resources to release directory"

    # Remove the old release directory
    rm -rf "$LOCAL_RELEASE_DIR"

    # Create the required destination directories exists
    mkdir -p "${AEROFS_RELEASE_DIR}/"
    mkdir -p "${AEROFS_RELEASE_WIN_DIR}/"
    mkdir -p "${AEROFS_RELEASE_OSX_DIR}/"
    mkdir -p "${AEROFS_RELEASE_LINUX_DIR}/"
    mkdir -p "${AEROFS_RELEASE_LINUX_DIR}/lib/"
    mkdir -p "${AEROFS_RELEASE_LINUX32_DIR}/"
    mkdir -p "${AEROFS_RELEASE_LINUX64_DIR}/"
    mkdir -p "${AEROFS_RELEASE_INST_DIR}/"

    # Copy "resource/client" files
    cp "${CLIENT_RESOURCE_DIR}/common/*.properties" "${AEROFS_RELEASE_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/common"/* "${AEROFS_RELEASE_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/osx"/* "${AEROFS_RELEASE_OSX_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/win"/* "${AEROFS_RELEASE_WIN_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/linux"/* "${AEROFS_RELEASE_LINUX_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/linux32"/* "${AEROFS_RELEASE_LINUX32_DIR}/"
    cp -R "${CLIENT_RESOURCES_DIR}/linux64"/* "${AEROFS_RELEASE_LINUX64_DIR}/"
    cp "${CLIENT_RESOURCES_DIR}"/linux.inst/INSTALL "${AEROFS_RELEASE_INST_DIR}/"
    cp "${CLIENT_RESOURCES_DIR}"/linux.inst/aerofs "${AEROFS_RELEASE_LINUX_DIR}/${AEROFS_PRODUCT_UNIX}"
    cp "${CLIENT_RESOURCES_DIR}"/linux.inst/aerofs "${AEROFS_RELEASE_INST_DIR}/${AEROFS_PRODUCT_UNIX}"
    mv "${AEROFS_RELEASE_LINUX_DIR}/aerofs.desktop" "${AEROFS_RELEASE_LINUX_DIR}/${AEROFS_PRODUCT_UNIX}.desktop"

    rm "${AEROFS_RELEASE_DIR}/labeling-client.properties"
    rm "${AEROFS_RELEASE_DIR}/labeling-teamserver.properties"

    # Copy S3 libs if necessary
    cp -R "${CLIENT_RESOURCES_DIR}/s3/lib"/* "${AEROFS_RELEASE_LINUX_DIR}/lib/"
    if [ "${AEROFS_PRODUCT_UNIX}" == "aerofsts" ]; then
        cp -R "${CLIENT_RESOURCES_DIR}/s3/lib"/* "${AEROFS_RELEASE_WIN_DIR}/lib/"
        cp -R "${CLIENT_RESOURCES_DIR}/s3/lib"/* "${AEROFS_RELEASE_OSX_DIR}/lib/"
        cp "${CLIENT_RESOURCES_DIR}/common/labeling-teamserver.properties" "${AEROFS_RELEASE_DIR}/labeling.properties"
    elif [ "${AEROFS_PRODUCT_UNIX}" != "aerofs" ]; then
        echo "ERROR: Aerofs product unix is ${AEROFS_PRODUCT_UNIX}, not one of aerofsts, aerofs"
        echo "Exiting"
        exit 1
    fi


    # N.B. We put the run scripts from the installer package in the actual aerofs
    # package so we can restart the Linux client automatically, even if aerofs-cli
    # (the launcher shell script) isn't on the user's PATH

    for symlink in ${AEROFS_PRODUCT_UNIX}-{cli,gui,sh}; do
        ln -s ${AEROFS_PRODUCT_UNIX} "${AEROFS_RELEASE_LINUX_DIR}/$symlink"
        ln -s ${AEROFS_PRODUCT_UNIX} "${AEROFS_RELEASE_INST_DIR}/$symlink"
    done

    # **********!!!! IMPORTANT !!!!*********
    # sed on mac requires an empty string for in place operations.
    # **********!!!!           !!!!*********

    # Required product sed commands for osx and linux respectively.
    render_template_in_place_on ${AEROFS_RELEASE_OSX_DIR}/updater.sh
    render_template_in_place_on ${AEROFS_RELEASE_LINUX_DIR}/updater.sh

    # Required product sed commands for linux.
    render_template_in_place_on \
        "${AEROFS_RELEASE_INST_DIR}"/{${AEROFS_PRODUCT_UNIX},INSTALL} \
        "${AEROFS_RELEASE_LINUX_DIR}"/${AEROFS_PRODUCT_UNIX}          \
        "${AEROFS_RELEASE_LINUX_DIR}"/${AEROFS_PRODUCT_UNIX}.desktop

    # Update URL in installers for correct MODE
    if [ "$MODE" == "PROD" ]; then
        DOT_STAGING=''
    else
        DOT_STAGING='.stg'
    fi

    sed -i "" -e "s/\[DOT_STAGING\]/$DOT_STAGING/g" \
        "${AEROFS_RELEASE_INST_DIR}/${AEROFS_PRODUCT_UNIX}" \
        "${AEROFS_RELEASE_LINUX_DIR}/${AEROFS_PRODUCT_UNIX}"

    # Remove all unit test dependencies
    rm -rf "${AEROFS_RELEASE_DIR}/lib.test"

    # Remove the ci cacerts (they are not needed in a packaged client)
    rm "${AEROFS_RELEASE_DIR}/cacert-ci.pem"

    # Adjust files for prod or staging
    if [ "$MODE" == "PROD" ]; then
        rm "${AEROFS_RELEASE_DIR}/cacert-staging.pem"
        mv "${AEROFS_RELEASE_DIR}/cacert-prod.pem" "${AEROFS_RELEASE_DIR}/cacert.pem"
    elif [ "$MODE" == "STAGING" ]; then
        rm "${AEROFS_RELEASE_DIR}/cacert-prod.pem"
        mv "${AEROFS_RELEASE_DIR}/cacert-staging.pem" "${AEROFS_RELEASE_DIR}/cacert.pem"
        echo "labeling.isStaging=true" >> "${AEROFS_RELEASE_DIR}"/labeling.properties
    else
        echo "error: invalid mode: $MODE" >&2
        exit 1
    fi
}

######################################################################
#
# Copies the java class files to the release bin directory and removes
# some unneeded files.
#
######################################################################
function copy_java_class_files() {
    echo ">> copying java class files to release directory"

    local local_BIN="${LOCAL_RELEASE_DIR}/bin"

    mkdir -p $local_BIN
    trap "rm -r \"$local_BIN\" || true" EXIT

    cp -Rf "${BUILD_OUTPUT_DIR}/bin"/* "$local_BIN"

    # remove unnecessary files (bin/com/aerofs/downloader will be moved away later)
    # TODO (WW) make sure files to be removed are at correct locations. See the
    # labeling process code for an example.
    find "${local_BIN}/" -name .DS_Store | xargs rm -f

    if [ "$MODE" == "PROD" ]; then
        # TODO: (AG) move these as excludes into build.xml
        # TODO: (WW) Verify this package is valid before removing
        rm -rf "${local_BIN}/com/aerofs/tools"
    fi
}

######################################################################
#
# Creates the installer for linux
#
######################################################################
function create_linux_installer() {
    echo ">> creating linux installer"

    local local_DOWNLOADER_TEMP="$(mktemp -d -t aerofs-dlr_XXXXXX)"
    trap "rm -rf $local_DOWNLOADER_TEMP || true" EXIT

    local local_BIN="${LOCAL_RELEASE_DIR}/bin"
    local local_AEROFS_DLR_PKG=com/aerofs/downloader
    mkdir -p "${local_DOWNLOADER_TEMP}/${local_AEROFS_DLR_PKG}"
    mkdir -p "${local_DOWNLOADER_TEMP}/libswt32"
    mkdir -p "${local_DOWNLOADER_TEMP}/libswt64"
    # N.B. we use the downloader in both the main aerofs.jar (for recovery
    # purposes) and the installer .jar (for initial setup).
    cp "${LOCAL_RELEASE_DIR}/bin/${local_AEROFS_DLR_PKG}"/* "${local_DOWNLOADER_TEMP}/${local_AEROFS_DLR_PKG}"
    cp "${CLIENT_RESOURCES_DIR}/linux32/libswt-"*.so "${local_DOWNLOADER_TEMP}/libswt32"
    cp "${CLIENT_RESOURCES_DIR}/linux64/libswt-"*.so "${local_DOWNLOADER_TEMP}/libswt64"
    cp "${CLIENT_RESOURCES_DIR}/linux32/lib/swt-"*.jar "${local_DOWNLOADER_TEMP}/s32.jar"
    cp "${CLIENT_RESOURCES_DIR}/linux64/lib/swt-"*.jar "${local_DOWNLOADER_TEMP}/s64.jar"
    tar zcf - -C "$local_DOWNLOADER_TEMP" . | uuencode bin >> "${AEROFS_RELEASE_INST_DIR}/${AEROFS_PRODUCT_UNIX}"
}

######################################################################
#
# Creates the Java manifest file and creates the AeroFS jar
#
######################################################################
function create_java_jar() {
    echo ">> creating jar"

    # Make a temporary file which will be the manifest
    local local_TEMP_MANIFEST="$(mktemp -t manifest_XXXXXX.tmp)"
    trap "rm -f $local_TEMP_MANIFEST || true" EXIT

    echo "Main-Class: com.aerofs.Main" > "$local_TEMP_MANIFEST"
    echo "Class-Path: " >> "$local_TEMP_MANIFEST"

    for i in "$AEROFS_RELEASE_DIR"/lib/*.jar; do
        echo " lib/$(basename "$i") " >> "$local_TEMP_MANIFEST"
    done

    #echo N.B. platform-dependent jars must have identical names
    for i in "$AEROFS_RELEASE_WIN_DIR"/lib/*; do
        echo " lib/$(basename "$i") " >> "$local_TEMP_MANIFEST"
    done

    # mac-specific jars
    echo " lib/growlbindings-1.3.1.jar " >> "$local_TEMP_MANIFEST"

    # s3 jars
    for i in "$CLIENT_RESOURCES_DIR"/s3/lib/*.jar; do
        echo " lib/$(basename "$i") " >> "$local_TEMP_MANIFEST"
    done

    # properties files
    echo " labeling.properties " >> "$local_TEMP_MANIFEST"
    echo " configuration.properties " >> "$local_TEMP_MANIFEST"
    echo " configuration-stg.properties " >> "$local_TEMP_MANIFEST"
    echo " strings.properties " >> "$local_TEMP_MANIFEST"

    # Package a jar with the contents of com subdirectory of the local release directory (all the class files)
    jar cfm "${AEROFS_RELEASE_DIR}/aerofs.unobf.jar" "$local_TEMP_MANIFEST" -C "${LOCAL_RELEASE_DIR}/bin" com
}

######################################################################
#
# Runs ProGuard on the unobfuscated aerofs jar
#
# Note that for now we only keep on aerofs.map file for both team
# server and the regular client. This could potentially lead to a
# broken mapping in the labeling class, but this isn't a big deal
# because the fucntion can be identified with the line number.
#
# This can be fixed by using a different mapping file for each client
# mode.
#
######################################################################
function obfuscate_java() {
    echo ">> obfuscating jar"

    local local_PG_AEROFS_DIR=`echo $AEROFS_RELEASE_DIR | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
    local local_PG_RELEASE_DIR=`echo $LOCAL_RELEASE_DIR | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
    local local_PG_HOME=`echo $PROGUARD_HOME | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`

     # TODO: (WW) Verify these packages are valid before removing
    "${PROGUARD_HOME}/bin/proguard.sh" -injars "${local_PG_AEROFS_DIR}/aerofs.unobf.jar" -outjars "${local_PG_AEROFS_DIR}/aerofs.jar" \
        -printmapping "${local_PG_RELEASE_DIR}/aerofs.map" \
        -repackageclasses "com.aerofs" \
        -dontwarn 'com.aerofs.tools.**' \
        -dontnote 'com.aerofs.l.*' \
        @"${local_PG_HOME}/aerofs.pro"

    rm -rf "${local_PG_AEROFS_DIR}/aerofs.unobf.jar"
}

######################################################################
#
# Writes the release version and checksums of the binaries to the version file.
#
######################################################################
function write_version_and_checksums() {
    echo ">> writing version and checksums"

    local local_VERSION_FILE="${AEROFS_RELEASE_DIR}/version"

    # Create a version file in the AeroFS release directory
    echo $RELEASE_VERSION > "$local_VERSION_FILE"

    local local_CHKSUM_LIST="\
        aerofs.jar:${AEROFS_RELEASE_DIR}/aerofs.jar \
        aerofsd.dll:${AEROFS_RELEASE_WIN_DIR}/aerofsd.dll \
        aerofsj.dll:${AEROFS_RELEASE_WIN_DIR}/aerofsj.dll \
        libaerofsd.dylib:${AEROFS_RELEASE_OSX_DIR}/libaerofsd.dylib \
        libaerofsj.dylib:${AEROFS_RELEASE_OSX_DIR}/libaerofsj.dylib \
    "

    for i in $local_CHKSUM_LIST; do
        local local_FILE_PATH="$(echo $i | sed -e 's/.*://')"
        local local_FILE_NAME="$(echo $i | sed -e 's/:.*//')"
        local local_CHKSUM="$(shasum -a 256 $local_FILE_PATH | sed -e 's/ .*//')"
        echo "$local_FILE_NAME=$local_CHKSUM" >> "$local_VERSION_FILE"
    done
}

#*******************************************************
#*******************************************************
#**
#** Run the actual steps to create the release resources
#**
#*******************************************************
#*******************************************************
echo ">> make release resources"

compute_product_names
copy_resources_to_local_release_directories
copy_java_class_files
create_linux_installer
create_java_jar
obfuscate_java
write_version_and_checksums


exit 0
