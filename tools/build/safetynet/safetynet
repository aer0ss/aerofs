#!/bin/bash -e -u

include safetynet/constants PROD

###############################################################################
#
# arguments and usage
#
###############################################################################
if [[ $# -ne 1 ]]; then
    echo "usage: $0 [release version]" >&2
    echo " " >&2
    echo "[release version]: major.minor.build" >&2
    echo " " >&2
    echo "example: 0.4.98" >&2
    exit $ERRBADARGS
fi

SAFETYNET_CONFIG_PATH=''
create_updated_config_file SAFETYNET_CONFIG_PATH
readonly SAFETYNET_CONFIG_PATH

readonly RELEASE_VERSION="$1"
readonly SYNCDET_PARAMS="--config=$SAFETYNET_CONFIG_PATH $SAFETYNET_SYNCDET_DEPLOY_DIR ${GIT_ROOT}/syncdet_test"

######################################################################
#
# Checks that the SafetyNet clients all have a lower version number than
# what is being deployed now.
#
######################################################################
function check_clients_can_update() {
    set +e
    "$SYNCDET" $SYNCDET_PARAMS -c "safetynet.assert.client_can_update"
    __="$?"
    set -e

    if [ "$__" != "0" ]; then
        echo " " >&2
        echo "****************************************************************************************" >&2
        echo "* ERROR: Some SafetyNet clients' versions are equal to the current version, ${RELEASE_VERSION}." >&2
        echo "* Please run the safetynet/rollback_clients script to revert them to a previous version." >&2
        echo "****************************************************************************************" >&2
        echo " " >&2
        exit $ERRSAFETYNET
    fi
}

######################################################################
#
# Backs up the AeroFS client installation on the SafetyNet machines.
# This is so that if the deloyment fails, each machine can get back
# to a known state.
#
######################################################################
function backup_safetynet_clients() {
    echo ">> backing up the current SafetyNet installations"

    "$SYNCDET" $SYNCDET_PARAMS -c "safetynet.manage.backup_installation"
}

######################################################################
#
# Ensures the SafetyNet clients are running, starting them if they're
# not online.
#
######################################################################
function ensure_clients_running() {
    echo ">> start SafetyNet clients"

    "$SYNCDET" $SYNCDET_PARAMS -c "safetynet.manage.ensure_clients_running"
}

######################################################################
#
# Sends an update command via the command server to all
# SafetyNet clients.
#
######################################################################
function notify_safetynet_clients_of_update() {
    echo ">> notifying SafetyNet clients of update"

    # Extract the SafetyNet user emails
    local local_USERS=$("${BUILD_SCRIPT_DIR}/safetynet/extract_users.py" "$SAFETYNET_CONFIG_PATH")

    # Notify the SafetyNet user's clients that an update is available
    # NOTE: The command client only sends one email at a time, so we need
    # to loop over the users
    for email in $local_USERS; do
        ssh $COMMAND_SERVER "cmd -t CHECK_UPDATE -h $SAFETYNET_CMD_TTL -u $email"
    done
}

######################################################################
#
# Runs the required SyncDET tests to check if the daemon can launch,
# that the new version is applied, and that sharing and syncing works.
#
######################################################################
function assert_clients_updated_and_launched() {
    echo ">> verify clients updated and launched"

    "$SYNCDET" $SYNCDET_PARAMS -s "${SAFETYNET_SYNCDET_DEPLOY_DIR}/assert_updated.scn"
}

######################################################################
#
# Runs some basic SyncDET tests to ensure the core functionality of
# the client works. Tests include syncing, sharing folders and sending
# defect logs.
#
######################################################################
function run_basic_tests() {
    echo ">> running basic SyncDET tests"

    "$SYNCDET" $SYNCDET_PARAMS -s "${SAFETYNET_SYNCDET_DEPLOY_DIR}/basic_tests.scn"
}

######################################################################
#
# Decreases the version number so that the clients will update again.
# Used to ensure the new clients can update.
#
######################################################################
function decrease_clients_version_number() {
    echo ">> preparing to test updater"

    "$SYNCDET" $SYNCDET_PARAMS -s "${SAFETYNET_SYNCDET_DEPLOY_DIR}/decrease_version.scn"
}

#******************************************************************************
#******************************************************************************
#**
#** Run all of the SafetyNet deployment and test steps
#**
#******************************************************************************
#******************************************************************************
echo ">> verifying release $RELEASE_VERSION ($MODE) stability with SafetyNet"

publish_to_s3 $RELEASE_VERSION $SAFETYNET_INSTALLER_BUCKET
check_clients_can_update
backup_safetynet_clients
ensure_clients_running
notify_safetynet_clients_of_update
assert_clients_updated_and_launched
run_basic_tests

decrease_clients_version_number         # We do these next few steps to check if
ensure_clients_running                  # the updater for this release isn't broken.
notify_safetynet_clients_of_update      # decrease_clients_version_number stops
assert_clients_updated_and_launched     # the AeroFS clients, so we need to make sure
                                        # they are started again.

echo ">> SafetyNet deployment passed"
exit 0
