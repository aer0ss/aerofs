#!/bin/bash -ex

#
# arguments
#

if [ $# -ne 1 ]
then
    echo "usage: $0 [linux32|linux64|osx]"
    exit 1
fi

# Go to the AeroFS root directory.
cd $(dirname $0)/../../

set_parameters() {
    echo "platform entered:$1"

    #
    # not input dependent
    #

    readonly LIBJINGLE_DIR="src/libjingle"
    readonly LIBJINGLE_BINDING_DIR="src/libjingle.binding"
    readonly AEROFS_RESOURCE_DIR="resource/client"
    readonly PLATFORM="$1"
    readonly QMAKE_MODE=release

    #
    # input-dependent
    #

    MODE=
    JOBS=
    BASE_DIR=
    QMAKE_BUILD_DIR=
    QMAKE_OUTPUT_LIBRARY_DIR=
    AEROFS_OUTPUT_LIBRARY_DIR=
    AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME=

    case "$PLATFORM" in
    "linux32")
        MODE=opt
        JOBS=2
        BASE_DIR=/mnt/hgfs/aerofs
        QMAKE_BUILD_DIR="aerofsj-build-desktop-Qt_4_8_0_for_Desktop_-_gcc__Qt_SDK__$QMAKE_MODE"
        AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME="libaerofsj.so"
        ;;
    "linux64")
        MODE=opt
        JOBS=2
        BASE_DIR=/mnt/hgfs/aerofs
        QMAKE_BUILD_DIR="aerofsj-build-desktop-Qt_4_8_0_for_Desktop_-_gcc_linux_64__Qt_SDK__$QMAKE_MODE"
        AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME="libaerofsj.so"
        ;;
    "osx")
        MODE=opt64
        JOBS=8
        BASE_DIR=~/repos/aerofs
        QMAKE_BUILD_DIR="aerofsj-build-desktop-Qt_4_8_0_for_Desktop_-_gcc_mac__Qt_SDK__$QMAKE_MODE"
        AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME="libaerofsj.dylib"
        ;;
    "*")
        echo "unrecognized nix platform:$1"
        exit 1
        ;;
    esac

    #
    # by now we've enough information to set up all the parameters
    # set them and prevent modifications
    #

    QMAKE_BUILD_DIR="src/libjingle_build/$QMAKE_BUILD_DIR"
    QMAKE_OUTPUT_LIBRARY_DIR="$LIBJINGLE_BINDING_DIR/build/$PLATFORM/opt"
    AEROFS_OUTPUT_LIBRARY_DIR="$AEROFS_RESOURCE_DIR/$PLATFORM"

    readonly MODE
    readonly JOBS
    readonly BASE_DIR
    readonly QMAKE_BUILD_DIR
    readonly QMAKE_OUTPUT_LIBRARY_DIR
    readonly AEROFS_OUTPUT_LIBRARY_DIR
    readonly AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME
}

reconfigure() {
    for PROJECT in expat gtest srtp
    do
        pushd "$LIBJINGLE_DIR/talk/third_party/$PROJECT"
        make distclean || true # ignore distclean errors
        ./configure
        popd
    done
}

build_google_libjingle() {
    export OPENSSL_BUILD_PLATFORM="$BASE_DIR/src/swiglibs/3rd_party/include"

    pushd "$LIBJINGLE_DIR/talk"
    hammer.sh --mode=$MODE -j$JOBS -c all_libraries
    hammer.sh --mode=$MODE -j$JOBS all_libraries
    popd
}

build_aerofs_libjingle() {
    mkdir -p "$QMAKE_BUILD_DIR"
    pushd "$QMAKE_BUILD_DIR"
    rm * || true # if the dir is empty rm complains
    qmake CONFIG+=$QMAKE_MODE "$BASE_DIR/$LIBJINGLE_BINDING_DIR/aerofsj.pro"
    make
    popd

    # FIXME (AG): hack around this until I figure out how to add a post-build step in qmake
    if [ $PLATFORM != "osx" ]
    then
        strip --strip-unneeded "$QMAKE_OUTPUT_LIBRARY_DIR/$AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME"
    fi
}

copy_final_libjingle() {
    cp -L "$QMAKE_OUTPUT_LIBRARY_DIR/$AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME" "$AEROFS_OUTPUT_LIBRARY_DIR/$AEROFS_FINAL_LIBJINGLE_LIBRARY_NAME"
}

#
# build aerofs libjingle
#

set_parameters $1
reconfigure
build_google_libjingle
build_aerofs_libjingle
copy_final_libjingle
