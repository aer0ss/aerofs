#!/bin/bash

set -e

# TODO (GS) Remove labelling - also remove references to "com.aerofs.l."

VER_MAJOR_MINOR=0.2

if [ x"$1" == x ]; then
    echo usage '$0 <staging|prod> [labeling]'
    exit 2
fi

if [ "$1" == "prod" ]; then
    PROD=1
else
    PROD=0
fi

#if [ x"$2" == x ]; then
#    LABELING=aerofs
#else
#    LABELING="$2"
#fi

#################################
# set variables

# source dirs
AEROFS_ROOT=$PWD/../..
ASIS=$AEROFS_ROOT/as-is
APPROOT=$AEROFS_ROOT/approot
#LAUNCHER=$AEROFS_ROOT/java/launcher
PROGUARD_HOME=$AEROFS_ROOT/tools/proguard

# dest dirs
DROP_TO=$AEROFS_ROOT/release.out
AEROFS_DIR=$DROP_TO/aerofs
AEROFS_WIN_DIR=$DROP_TO/aerofs.win
AEROFS_OSX_DIR=$DROP_TO/aerofs.osx
AEROFS_LINUX_DIR=$DROP_TO/aerofs.linux
AEROFS_LINUX32_DIR=$DROP_TO/aerofs.linux32
AEROFS_LINUX64_DIR=$DROP_TO/aerofs.linux64
AEROFS_INST_DIR=$DROP_TO/aerofs.linux.inst

rm -rf $DROP_TO

# Ensure dest dirs exists
mkdir -p "$AEROFS_DIR"/
mkdir -p "$AEROFS_WIN_DIR"/
mkdir -p "$AEROFS_OSX_DIR"/
mkdir -p "$AEROFS_LINUX_DIR"/
mkdir -p "$AEROFS_LINUX32_DIR"/
mkdir -p "$AEROFS_LINUX64_DIR"/
mkdir -p "$AEROFS_INST_DIR"/

#################################
# find build number

if [ $PROD == 1 ]; then
  SERVER_VER=`wget --no-check-certificate --no-cache -q -O- https://nocache.client.aerofs.com/current.ver`
else
  SERVER_VER=`wget --no-check-certificate --no-cache -q -O- https://nocache.client.staging.aerofs.com/current.ver`
fi

SERVER_VER_MAJOR_MINOR=`echo $SERVER_VER | sed -e 's/.*=//' | sed -e 's/\.[0-9]*$//'`
SERVER_VER_BUILD=`echo $SERVER_VER | sed -e 's/.*\.//'`

if [ $SERVER_VER_MAJOR_MINOR == $VER_MAJOR_MINOR ]; then
    BUILD=`expr $SERVER_VER_BUILD \+ 1`
else
    BUILD=1
fi

VERSION=$VER_MAJOR_MINOR.$BUILD
VERSION_FILE=version

echo '+--------------'
echo '|' $VERSION $1
echo '+--------------'

##################################
# make ver and staging

echo $VERSION > $AEROFS_DIR/$VERSION_FILE

if [ $PROD == 0 ]; then
  touch $AEROFS_DIR/staging
  touch $AEROFS_DIR/lol
fi

##################################
# Copy "as-is" files

cp -R "$ASIS"/common/* "$AEROFS_DIR"/
cp -R "$ASIS"/osx/* "$AEROFS_OSX_DIR"/
cp -R "$ASIS"/win/* "$AEROFS_WIN_DIR"/
cp -R "$ASIS"/linux/* "$AEROFS_LINUX_DIR"/
cp -R "$ASIS"/linux32/* "$AEROFS_LINUX32_DIR"/
cp -R "$ASIS"/linux64/* "$AEROFS_LINUX64_DIR"/
cp -R "$ASIS"/linux.inst/* "$AEROFS_INST_DIR"/
#cp "$LAUNCHER"/bin/$OS/* "$APPROOT"/

rm -rf "$AEROFS_DIR"/lib.test

# Adjust files for prod or staging
if [ $PROD == 1 ]; then
    rm "$AEROFS_DIR"/cacert-staging.pem
    mv "$AEROFS_DIR"/cacert-prod.pem "$AEROFS_DIR"/cacert.pem
else
    rm "$AEROFS_DIR"/cacert-prod.pem
    mv "$AEROFS_DIR"/cacert-staging.pem "$AEROFS_DIR"/cacert.pem
fi

###################################
# Labelling stuff - TO BE REMOVED
#cp labeling/$LABELING/icons/* $AEROFS_DIR/icons
#for i in labeling/$LABELING/os/*; do cp -R $i/ $AEROFS_DIR.`basename $i`; done

###################################
PPWD=$PWD
cd $AEROFS_DIR

###################################
#echo generate manifest

echo "Main-Class: com.aerofs.Main" > m.tmp
echo "Class-Path: " >> m.tmp

for i in lib/*.jar; do
    echo " $i " >> m.tmp
done

#echo N.B. platform-dependent jars must have identical names
for i in `ls $AEROFS_WIN_DIR/lib/`; do
    echo " lib/$i " >> m.tmp
done

# mac-specific jars
echo " lib/growlbindings-1.3.1.jar " >> m.tmp

###################################
#echo copy class files

mkdir -p bin/com
cp -Rf $APPROOT/bin/com/* bin/com

###################################
# remove unnecessary files (bin/com/aerofs/downloader will be moved away later)

rm -rf bin/com/aerofs/sp
find bin/com/aerofs -name .DS_Store | xargs rm -f

if [ $PROD == 1 ]; then
    rm -rf bin/com/aerofs/testing
    rm -rf bin/com/aerofs/sak
fi

# labeling - TO BE REMOVED
#if [ $LABELING != aerofs ]; then
#    rm -rf bin/com/aerofs/l/AA.class
#fi
#if [ $LABELING != comcast ]; then
    rm -rf bin/com/aerofs/l/CC.class
#fi

###################################
#echo generate aerofs-installer

if [ $PROD == 1 ]; then
    sed -i '' -e 's=DOT_STAGING__TO_BE_REPLACED_BY_SED==' $AEROFS_INST_DIR/aerofs
else
    sed -i '' -e 's=DOT_STAGING__TO_BE_REPLACED_BY_SED=.staging=' $AEROFS_INST_DIR/aerofs
fi

DLR_TMP=/tmp/aerofs-dlr
AEROFS_DLR_PKG=com/aerofs/downloader
rm -rf $DLR_TMP
mkdir -p $DLR_TMP/$AEROFS_DLR_PKG
mv bin/$AEROFS_DLR_PKG/* $DLR_TMP/$AEROFS_DLR_PKG
cp $ASIS/linux32/lib/swt-*.jar $DLR_TMP/s32.jar
cp $ASIS/linux64/lib/swt-*.jar $DLR_TMP/s64.jar
tar zcf - -C $DLR_TMP . | uuencode bin >> $AEROFS_INST_DIR/aerofs

###################################
echo creating jars
jar cfm aerofs.unobf.jar m.tmp -C bin com

# echo remove unnecessary files
rm -rf bin m.tmp

###################################

PG_AEROFS_DIR=`echo $AEROFS_DIR | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
PG_DROP_TO=`echo $DROP_TO | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`
PG_HOME=`echo $PROGUARD_HOME | sed -e 's|/cygdrive/\([a-zA-Z]\)/|\1:/|'`

if [ $PROD == 1 ]; then
    echo obfuscating jar
    cd $PROGUARD_HOME

    ./bin/proguard.sh -injars $PG_AEROFS_DIR/aerofs.unobf.jar -outjars $PG_AEROFS_DIR/aerofs.jar \
    -printmapping $PG_DROP_TO/aerofs.map \
    -dontwarn 'com.aerofs.testing.**' \
    -dontwarn 'com.aerofs.sak.**' \
    -dontnote 'com.aerofs.l.*' \
    @$PG_HOME/aerofs.pro

else
    cp $PG_AEROFS_DIR/aerofs.unobf.jar $PG_AEROFS_DIR/aerofs.jar
    rm -rf $PG_AEROFS_DIR/aerofs.unobf.jar
fi

rm -rf $PG_AEROFS_DIR/aerofs.unobf.jar

###################################
# echo write checksums

CHKSUM_LIST="\
    aerofs.jar:$AEROFS_DIR/aerofs.jar \
    aerofsd.dll:$AEROFS_WIN_DIR/aerofsd.dll \
    aerofsj.dll:$AEROFS_WIN_DIR/aerofsj.dll \
    libaerofsd.dylib:$AEROFS_OSX_DIR/libaerofsd.dylib \
    libaerofsj.dylib:$AEROFS_OSX_DIR/libaerofsj.dylib \
"

for i in $CHKSUM_LIST; do
    FILE_PATH=`echo $i | sed -e 's/.*://'`
    FILE_NAME=`echo $i | sed -e 's/:.*//'`
    CHKSUM=`shasum -a 256 $FILE_PATH | sed -e 's/ .*//'`
    echo "$FILE_NAME=$CHKSUM" >> $AEROFS_DIR/$VERSION_FILE
done
