#!/bin/bash
set -eu

readonly AEROFS_ROOT=$(cd "${BASH_SOURCE[0]%/*}"/.. && pwd )

#
# Execute a command in a specified directory changes back to the original
# directory once the command completes and returns the exit code.
#
# Arguments:
#    $1   : directory to change to
#    $2..N: command and arguments to run in $1
#
function do_in
{
    typeset _wd=$PWD
    cd $1
    shift
    set +e

    "$@";

    typeset retval=$?
    cd $_wd

    #FIXME: set -e only if $- had an e in it
    set -e
    return $retval
}

#
# Gets the default repo (lowercase) for your packages
#
function _lowercase_repo()
{
    whoami | tr [A-Z] [a-z]
}

#
# Gets the default repo (uppercase) for your packages
#
function _uppercase_repo()
{
    whoami | tr [a-z] [A-Z]
}

#
# Runs a command in the development directory
#
function _local-prod-cmd()
{
    local command=$1
    shift

    do_in $AEROFS_ROOT/packaging/bakery/development ./$command "${@:-}"
}

# -----------------------------------------------------------
# Packaging
# -----------------------------------------------------------

function _check-aerofs-apt-reachable
{
    do_in $AEROFS_ROOT/packaging/bakery/development ./chk-apt
}

function _package()
{
    local repo=''
    repo=$(_uppercase_repo)

    local clean='clean'
    local target='servers'
    if [ $# -eq 1 ]
    then
        target="$1"
        clean=""
    fi

    _check-aerofs-apt-reachable

    do_in $AEROFS_ROOT ant ${clean} package_${target} upload_versions \
        -Dproduct=CLIENT \
        -Dmode=PRIVATE \
        -Drepo="$repo"
    do_in $AEROFS_ROOT/packaging make packagelist
}

function _package_clients()
{
    do_in $AEROFS_ROOT ant package_clients_for_test -Dmode=PRIVATE
}

# -----------------------------------------------------------
# Deploys
# -----------------------------------------------------------

function _vm-deploy()
{
    local package=$1
    _package $package

    _local-prod-cmd vm-ctrl deploy $package
}

# -----------------------------------------------------------
# Kicks
# -----------------------------------------------------------

function _vm-kick()
{
    if [ $# -eq 0 ]
    then
        _package
    elif [ "x$1" != "x--no-package" ] ; then
        _package $1
    fi
    _local-prod-cmd vm-ctrl kick
}

# -----------------------------------------------------------
# Virtual Machines
# -----------------------------------------------------------

function _vm-create()
{
    local repo=''
    repo=$(_lowercase_repo)

    _package
    _package_clients
    _local-prod-cmd vm-make "$repo" ${@:-}
}

function _vm-start()
{
    _local-prod-cmd vm-ctrl start "${@:-}"
}

function _vm-halt()
{
    _local-prod-cmd vm-ctrl halt
}

function _vm-kill()
{
    _local-prod-cmd vm-ctrl kill
}

# -----------------------------------------------------------
# Configuration
# -----------------------------------------------------------

function _vm-bootstrap()
{
    _local-prod-cmd vm-ctrl bootstrap
}

# -----------------------------------------------------------
# SSH
# -----------------------------------------------------------

function _vm-ssh()
{
    do_in $AEROFS_ROOT/packaging/bakery/development vagrant ssh
}

# -----------------------------------------------------------
# Main
# -----------------------------------------------------------

function usage()
{
    echo "Usage: $0 <command> [<command_argument>]" >&2
    echo >&2
    echo "Available commands:" >&2
    echo >&2
    echo "    create [<bridge_interface>]" >&2
    echo "    start  [<bridge_interface>]" >&2
    echo "    ssh" >&2
    echo "    halt" >&2
    echo "    kill" >&2
    echo "    kick [<package_name>|--no-package]" >&2
    echo "    deploy <package_name>" >&2

    exit 1
}

function check_no_args()
{
    if [ $# -ne 0 ]
    then
        echo "Error: command does not accept an argument." >&2
        echo >&2
        usage
    fi
}

function check_zero_or_one_args()
{
    if [ $# -ne 0 ] && [ $# -ne 1 ]
    then
        usage
    fi
}

function main()
{
    if [ $# -eq 0 ] || [ $# -gt 2 ]
    then
        echo "Error: invalid number of parameters provided." >&2
        echo >&2
        usage
    fi

    local command=$1
    shift

    case $command in
        "create")
            check_zero_or_one_args ${@:-}
            _vm-create ${1:-}
            ;;
        "start")
            check_zero_or_one_args ${@:-}
            _vm-start ${1:-}
            ;;
        "halt")
            check_no_args ${@:-}
            _vm-halt
            ;;
        "kill")
            check_no_args ${@:-}
            _vm-kill
            ;;
        "kick")
            check_zero_or_one_args ${@:-}
            _vm-kick ${1:-}
            ;;
        "deploy")
            if [ $# -ne 1 ]
            then
                echo "Error: deploy requires a package name argument." >&2
                echo >&2
                usage
            fi
            _vm-deploy $1
            ;;
        "ssh")
            check_no_args ${@:-}
            _vm-ssh
            ;;
        "bootstrap")
            check_no_args ${@:-}
            _vm-bootstrap
            ;;
        *)
            echo "Error: invalid command name \"$command\"." >&2
            echo >&2
            usage
            ;;
    esac
}

main "$@"
