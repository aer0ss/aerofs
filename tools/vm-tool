#!/bin/bash -ue

readonly AEROFS_ROOT=$(cd "${BASH_SOURCE[0]%/*}"/.. && pwd )

#
# Local Production Aliases.
#
# In this file, vm is short for virtual machine prodcution. Aliases that
# are meant to be used publicly are prefixed with "vm-".
#

#
# Execute a command in a specified directory changes back to the original
# directory once the command completes and returns the exit code.
#
# Arguments:
#    $1   : directory to change to
#    $2..N: command and arguments to run in $1
#
function do_in
{
    typeset _wd=$PWD
    cd $1
    shift
    set +e

    "$@";

    typeset retval=$?
    cd $_wd

    #FIXME: set -e only if $- had an e in it
    set -e
    return $retval
}

#
# Gets the default repo (lowercase) for your packages
#
function _lowercase_repo()
{
    whoami | tr [A-Z] [a-z]
}

#
# Gets the default repo (uppercase) for your packages
#
function _uppercase_repo()
{
    whoami | tr [a-z] [A-Z]
}

function _print-available-boxes()
{
    _check-mode

    case ${MODE} in
        unified)
            echo "available box: unified" >&2
            ;;
        modular)
            echo "available boxes: persistent, transient" >&2
            ;;
    esac

}

function _print-available-deployment-modes()
{
    echo "available deployment_modes: modular, unified" >&2
}

function _check-mode()
{
    bad_mode=false

    case ${MODE} in
        unified) ;;
        modular) ;;
        *) bad_mode=true ;;
    esac

    if [ "$bad_mode" = "true" ]
    then
        echo "unrecognized mode:$MODE}" >&2
        _print-available-deployment-modes
        exit 1
    fi
}

function _check-box()
{
    local box=''

    if [ "$MODE" = "modular" ]
    then
        case ${1:-} in
            persistent) box=persistent ;;
            transient ) box=transient ;;
        esac
    fi

    if [ "$MODE" = "unified" ]
    then
        case ${1:-} in
            unified ) box=unified ;;
        esac
    fi

    if [[ -z "$box" ]]; then
        echo "unrecognized box:${1:-}" >&2
        _print-available-boxes
        exit 1
    fi

    echo $box
}

#
# Runs a command in the local-prod directory
#
function _local-prod-cmd()
{
    if [ $# -eq 0 ]
    then
        echo "usage: _local-prod-cmd executable [args]"
        exit 1
    fi

    local command=$1
    shift

    do_in $AEROFS_ROOT/packaging/bakery/development/mode/"$MODE" ../../$command "$@"
}

# -----------------------------------------------------------
# Packaging
# -----------------------------------------------------------

function _check-aerofs-apt-reachable
{
    do_in $AEROFS_ROOT/packaging/bakery/development ./chk-apt
}

function _package()
{
    local repo=''
    repo=$(_uppercase_repo)

    _check-aerofs-apt-reachable

    local package=$(echo $1 | sed 's/-/_/g')
    do_in $AEROFS_ROOT ant package_${package} \
        -Dmode=ENTERPRISE \
        -Dproduct=CLIENT \
        -Drepo="$repo"
    do_in $AEROFS_ROOT/packaging make packagelist
}

function _package-and-upload-versions()
{
    local repo=''
    repo=$(_uppercase_repo)

    _check-aerofs-apt-reachable

    do_in $AEROFS_ROOT ant clean package_servers upload_versions \
        -Dproduct=CLIENT \
        -Dmode=ENTERPRISE \
        -Drepo="$repo"
    do_in $AEROFS_ROOT/packaging make packagelist
}

# -----------------------------------------------------------
# Deploys
# -----------------------------------------------------------

function _vm-deploy()
{
    if [[ $# -ne 2 ]]; then
        echo "usage: vm-tool deploy box_name package_name" >&2
        _print-available-boxes
        exit 1
    fi

    # IMPORTANT: you must do this in two parts because otherwise
    # the exit status of the subshell will not be preseved; i.e.
    # local box=$(...) will break, but the two-parter below wont
    local box=''
    box=$(_check-box $1)

    local package=$2

    _package $package
    _local-prod-cmd vm-ctrl "$MODE" deploy $box $package
}

function _vm-deploy-all()
{
    if [[ $# -ne 1 ]] || [[ -z "${1}" ]]; then
        echo "usage: vm-tool deploy-all box_name" >&2
        _print-available-boxes
        exit 1
    fi

    local box=''
    box=$(_check-box $1)

    #_package-and-upload-versions
    _vm-kick $box
}

# -----------------------------------------------------------
# Kicks
# -----------------------------------------------------------

function _print-kick-usage()
{
    echo "usage: vm-tool kick [box_name]" >&2
    echo "available boxes: persistent, transient" >&2
}

function _vm-kick()
{
    if [[ $# -ne 1 ]] || [[ -z "$1" ]]; then
        echo "usage: vm-tool kick [box_name]" >&2
        _print-available-boxes
        exit 1
    fi

    local box=''
    box=$(_check-box $1)

    _package-and-upload-versions
    _local-prod-cmd vm-ctrl "$MODE" kick ${box}
}

# -----------------------------------------------------------
# Virtual Machines
# -----------------------------------------------------------

function _print-create-usage()
{
    echo "usage: vm-tool create deployment_mode [bridge_interface]" >&2
    _print-available-deployment-modes
}

function _vm-create()
{
    local repo=''
    repo=$(_lowercase_repo)

    _package-and-upload-versions
    _local-prod-cmd vm-make "$repo" "$MODE" "${@}"
}

function _print-start-usage()
{
    echo "usage: vm-tool start deployment_mode [bridge_interface]" >&2
    _print-available-deployment-modes
}

function _vm-start()
{
    _local-prod-cmd vm-ctrl "$MODE" start "${@}"
}

function _vm-halt()
{
    _local-prod-cmd vm-ctrl "$MODE" halt "${@:-}"
}

function _vm-kill()
{
    _local-prod-cmd vm-ctrl "$MODE" kill "${@:-}"
}

# -----------------------------------------------------------
# SSH
# -----------------------------------------------------------

function _print-ssh-usage()
{
    echo "usage: vm-tool ssh box_name" >&2
    _print-available-boxes
    echo "simply sudo su to get root access (no password required)." >&2
}

function _vm-ssh()
{
    if [[ $# -ne 1 ]] || [[ -z "${1}" ]]; then
        _print-ssh-usage
        exit 1
    fi

    local box=''
    box=$(_check-box $1)

    do_in $AEROFS_ROOT/packaging/bakery/development/mode/"$MODE" vagrant ssh $box
}

# -----------------------------------------------------------
# main
# -----------------------------------------------------------

function main()
{
    if [[ $# -lt 2 ]]; then
        echo "usage: $0 deployment_mode ( create | start | halt | kill | deploy | ssh ) [command_arguments]" >&2
        echo >&2
        echo "special cases:" >&2
        echo "      create [bridge_interface]" >&2
        echo "      start  [bridge_interface]" >&2
        echo "      ssh    [box_name]" >&2
        echo >&2
        _print-available-deployment-modes
        exit 1
    fi

    readonly MODE=$1
    shift
    local command=$1
    shift

    case $command in
        "create"    ) _vm-create     "${@:-}" ;;
        "start"     ) _vm-start      "${@:-}" ;;
        "halt"      ) _vm-halt       "${@:-}" ;;
        "kill"      ) _vm-kill       "${@:-}" ;;
        "deploy"    ) _vm-deploy     "${@:-}" ;;
        "deploy-all") _vm-deploy-all "${@:-}" ;;
        "ssh"       ) _vm-ssh        "${@:-}" ;;
        "kick"      ) _vm-kick       "${@:-}" ;;
        *           )
            echo "unrecognized command $command" >&2
            exit 2
            ;;
    esac
}

main "$@"
