#!/bin/bash -ue

readonly AEROFS_ROOT=$(cd "${BASH_SOURCE[0]%/*}"/.. && pwd )

#
# Local Production Aliases.
#
# In this file, lp is short for local prodcution. Aliases that are meant to be
# used publicly are prefixed with "lp-" for easy bash completion.
#

#
# Execute a command in a specified directory
# Changes back to the original directory once the command
# completes and returns the exit code
#
# Arguments:
#    $1   : directory to change to
#    $2..N: command and arguments to run in $1
#
function do_in
{
    typeset _wd=$PWD
    cd $1
    shift
    set +e

    "$@";

    typeset retval=$?
    cd $_wd

    #FIXME: set -e only if $- had an e in it
    set -e
    return $retval
}

#
# Gets the default repo (lowercase) for your packages
#
function _lowercase_repo()
{
    whoami | tr [A-Z] [a-z]
}

#
# Gets the default repo (uppercase) for your packages
#
function _uppercase_repo()
{
    whoami | tr [a-z] [A-Z]
}

function _print-available-boxes()
{
    echo "available boxes: persistent, transient" >&2
}

function _check-box()
{
    local box=''
    case $1 in
    persistent) box=persistent ;;
    transient ) box=transient  ;;
    esac

    if [[ -z "$box" ]]; then
        echo "unrecognized box:$1" >&2
        _print-available-boxes
        exit 1
    fi

    echo $box
}

#
# Runs a command in the local-prod directory
#
function _local-prod-cmd()
{
    do_in $AEROFS_ROOT/packaging/bakery/local-prod "$@"
}

# -----------------------------------------------------------
# Packaging
# -----------------------------------------------------------

function _check-aerofs-apt-reachable
{
    do_in $AEROFS_ROOT/packaging/bakery/local-prod ./chkapt
}

function _package()
{
    repo=$(_uppercase_repo)
    local repo

    _check-aerofs-apt-reachable

    do_in $AEROFS_ROOT ant package_${1} \
        -Dmode=ENTERPRISE \
        -Dproduct=CLIENT \
        -Drepo="$repo"
}

function _package-and-upload-all()
{
    repo=$(_uppercase_repo)
    local repo

    _check-aerofs-apt-reachable

    do_in $AEROFS_ROOT ant clean package_servers upload_versions \
        -Dproduct=CLIENT \
        -Dmode=ENTERPRISE \
        -Drepo="$repo"
}

# -----------------------------------------------------------
# Deploys
# -----------------------------------------------------------

function _lp-deploy()
{
    if [[ $# -ne 2 ]]; then
        echo "usage: lptool deploy box_name package_name" >&2
        echo >&2
        _print-available-boxes
        exit 1
    fi

    # IMPORTANT: you must do this in two parts because otherwise
    # the exit status of the subshell will not be preseved; i.e.
    # local box=$(...) will break, but the two-parter below wont
    box=$(_check-box $1)
    local box

    local package=$2

    _package $package
    _local-prod-cmd ./lpctrl deploy $box $package
}

function _lp-deploy-all()
{
    _package-and-upload-all
    _lp-kick-transient
}

# -----------------------------------------------------------
# Kicks
# -----------------------------------------------------------

function _lp-kick-transient()
{
    _local-prod-cmd ./lpctrl kick transient
}

function _lp-kick-persistent()
{
    _local-prod-cmd ./lpctrl kick persistent
}

function _print-kick-usage()
{
    echo "usage: lptool kick [box_name]" >&2
    echo >&2
    echo "available boxes: persistent, transient" >&2
}

function _lp-kick()
{
    if [[ $# -ne 1 ]]; then
        echo "usage: lptool kick [box_name]" >&2
        echo >&2
        _print-available-boxes
        exit 1
    fi

    box=$(_check-box $1)
    local box

    _lp-kick-${box}
}

# -----------------------------------------------------------
# Virtual Machines
# -----------------------------------------------------------

function _lp-create()
{
    repo=$(_lowercase_repo)
    local repo

    _package-and-upload-all
    _local-prod-cmd ./makelp "$repo"  "${@}"
}

function _lp-start()
{
    _local-prod-cmd ./lpctrl start "${@}"
}

function _lp-halt()
{
    _local-prod-cmd ./lpctrl halt
}

function _lp-reboot()
{
    _local-prod-cmd ./lpctrl reboot "${@}"
}

function _lp-delete()
{
    _local-prod-cmd ./lpctrl kill
}

# -----------------------------------------------------------
# SSH
# -----------------------------------------------------------

function _print-ssh-usage()
{
    echo "usage: lptool ssh box_name" >&2
    echo >&2
    _print-available-boxes
    echo >&2
    echo "simply sudo su to get root access (no password required)." >&2
}

function _lp-ssh()
{
    if [[ $# -ne 1 ]]; then
        _print-ssh-usage
        exit 1
    fi

    box=$(_check-box $1)
    local box

    do_in $AEROFS_ROOT/packaging/bakery/local-prod vagrant ssh $box
}

# -----------------------------------------------------------
# main
# -----------------------------------------------------------

function main()
{
    if [[ $# -eq 0 ]]; then
        echo "usage: $0 ( create | start | halt | delete | deploy | ssh ) [command_arguments]" >&2
        echo >&2
        echo "special cases:" >&2
        echo "      create [bridge_interface]" >&2
        echo "      start  [bridge_interface]" >&2
        echo "      ssh    [box_name]" >&2
        echo >&2
        exit 1
    fi

    local command=$1
    shift
    case $command in
    "create"    ) _lp-create     "${@:-}" ;;
    "start"     ) _lp-start      "${@:-}" ;;
    "halt"      ) _lp-halt                ;;
    "reboot"    ) _lp-reboot     "${@:-}" ;;
    "delete"    ) _lp-delete              ;;
    "deploy"    ) _lp-deploy     "${@:-}" ;;
    "deploy-all") _lp-deploy-all          ;;
    "ssh"       ) _lp-ssh        "${@:-}" ;;
    "kick"      ) _lp-kick       "${@:-}" ;;
    "kick-all"  ) _lp-kick-all            ;;
    *           )
        echo "unrecognized command $command" >&2
        exit 2
        ;;
    esac
}

main "$@"
