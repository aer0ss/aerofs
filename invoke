#!/usr/bin/env python
#
# A tool for quickly invoking chains of various build, packaging, and test
# tasks.
#
# This tool is being phased out in favor of this directory's Makefile.
#
#
# Examples:
#
# * Populate approot:
#   ./invoke --product CLIENT setupenv
#
# * Build and release Docker images:
#   ./invoke --signed clean proto build_client package_clients build_docker_images push_docker_images tag_release
#
# * After the previous step, release the appliance VM using the same version as the Docker image release:
#   ./invoke build_vm push_vm
#
# * Install AeroFS via SyncDET on your default actors
#   ./invoke --syncdet-extra-args=--case-arg=--transport=default --syncdet-case=lib.cases.clean_install syncdet
#
# TODO: --dry-run - doesn't actually call the subprocess.check_call stuff, just says what would be done
# TODO: --verbose - prints the commands that will be called as they go
import argparse
import datetime
import os
import subprocess
import sys
import traceback


GIT_ROOT = os.path.abspath(os.path.dirname(__file__))


commands = [
    'build_client',
    'build_cloud_config',
    'build_docker_images',
    'build_docker_sa_images',
    'build_protoc_plugins',
    'build_sa',
    'build_sa_vm',
    'build_updater',
    'build_vm',
    'clean',
    'markdown',
    'markdown_watch',
    'package_clients',
    'package_sa',
    'package_updates',
    'prepare_syncdet',
    'proto',
    'push_docker_images',
    'push_docker_sa_images',
    'push_sa_vm',
    'push_vm',
    'setupenv',
    'syncdet',
    'tag_release',
    'tag_sa_release',
    'test_go',
    'test_js',
    'test_python',
    'test_system',
    'test_system_archive',
    'write_version',
]


def format_seconds(seconds):
    if seconds < 60:
        return '{} sec'.format(round(seconds, 2))

    return '{} min'.format(round(seconds / 60., 2))


def convert_flags(args):
    cmdline = ['APPROOT={}'.format(args.approot)]
    if args.product:
        cmdline.append('PRODUCT={}'.format(args.product))
    if args.release_version:
        cmdline.append('VERSION={}'.format(args.release_version))
    cmdline.append('SIGNED={}'.format('true' if args.signed else 'false'))
    if args.syncdet_case:
        cmdline.append('SYNCDET_CASES="{}"'.format(' '.join(args.syncdet_case)))
    if args.syncdet_case_timeout:
        cmdline.append('SYNCDET_CASE_TIMEOUT={}'.format(args.syncdet_case_timeout))
    if args.syncdet_config:
        cmdline.append('SYNCDET_CONFIG={}'.format(args.syncdet_config))
    if args.syncdet_executable:
        cmdline.append('SYNCDET_EXECUTABLE={}'.format(args.syncdet_executable))
    if args.syncdet_extra_args:
        cmdline.append('SYNCDET_ARGS="{}"'.format(' '.join(args.syncdet_extra_args)))
    if args.syncdet_scenario:
        cmdline.append('SYNCDET_SCENARIOS="{}"'.format(' '.join(args.syncdet_scenario)))
    if args.syncdet_sync_timeout:
        cmdline.append('SYNCDET_SYNC_TIMEOUT={}'.format(args.syncdet_sync_timeout))
    if args.syncdet_transport:
        cmdline.append('SYNCDET_TRANSPORT={}'.format(args.syncdet_transport))
    cmdline.append('TEAM_CITY={}'.format('true' if args.team_city else 'false'))

    return cmdline


def main():
    parser = argparse.ArgumentParser(prog='invoke')

    # Pass-through to makefile
    parser.add_argument('--approot', action='store', default=os.path.join(GIT_ROOT, 'approot'))
    parser.add_argument('--product', action='store', choices=['CLIENT', 'TEAM_SERVER', 'STORAGE_AGENT'])
    parser.add_argument('--release-version', action='store')
    parser.add_argument('--signed', action='store_const', dest='signed', const=True)
    parser.add_argument('--unsigned', action='store_const', dest='signed', const=False)
    parser.add_argument('--syncdet-case', action='append')
    parser.add_argument('--syncdet-case-timeout', action='store')
    parser.add_argument('--syncdet-config', action='store')
    parser.add_argument('--syncdet-executable', action='store')
    parser.add_argument('--syncdet-extra-args', action='append')
    parser.add_argument('--syncdet-scenario', action='append')
    parser.add_argument('--syncdet-sync-timeout', action='store')
    parser.add_argument('--syncdet-transport', action='store')
    parser.add_argument('--target-os', action='store', choices=['win', 'osx', 'linux/i386', 'linux/amd64'])
    parser.add_argument('--team-city', action='store_true')
    parser.add_argument('commands', nargs='+', choices=commands)

    # Local args
    parser.add_argument('--verbose', action='store_const', dest='verbose', const=True)
    parser.add_argument('--quiet', action='store_const', dest='verbose', const=False)

    args = parser.parse_args(sys.argv[1:])

    make_args = ['make']
    make_args.extend(convert_flags(args))
    make_args.extend(args.commands)

    start = datetime.datetime.today()

    output = None
    if not args.verbose:
        output = open(os.path.join(GIT_ROOT, 'build.log'), 'w')

    p = subprocess.Popen(make_args, stdout=output, cwd=GIT_ROOT)
    p.wait()
    if p.returncode != 0:
        print 'Task failed.'
        print make_args
        sys.exit(1)

    stop = datetime.datetime.today()
    print 'All tasks completed successfully.'
    print 'Total time: ', format_seconds((stop - start).total_seconds())


if __name__ == '__main__':
    main()
