-- tt_sign_up
drop table if exists tt_sign_up;
create table tt_sign_up(
    `ev_user` varchar(254) not null,
    `ev_ts` timestamp not null,
    PRIMARY KEY(`ev_user`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tt_sign_up(ev_user,ev_ts)
    select
    hdr_user as ev_user,
    FROM_UNIXTIME(MIN(hdr_ts)/1000) as ev_ts
    from
    aerofs_sv.sv_event
    where ev_type='1000'
    group by ev_user;

-- tt_file_saved
drop table if exists tt_file_saved;
create table tt_file_saved(
    `ev_user` varchar(254) not null,
    `ev_ts` timestamp not null,
    INDEX(`ev_user`),
    INDEX(`ev_ts`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tt_file_saved(ev_user,ev_ts)
    select
    hdr_user as ev_user,
    FROM_UNIXTIME(hdr_ts/1000) as ev_ts
    from
    aerofs_sv.sv_event
    where ev_type='0';

-- tt_clicked_taskbar
drop table if exists tt_clicked_taskbar;
create table tt_clicked_taskbar(
    `ev_user` varchar(254) not null,
    `ev_ts` timestamp not null,
    INDEX(`ev_user`),
    INDEX(`ev_ts`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tt_clicked_taskbar
    select hdr_user as ev_user,
    FROM_UNIXTIME(hdr_ts/1000) as ev_ts
    from aerofs_sv.sv_event
    where ev_type='100';

--
drop table if exists tt_invite_sent;
create table tt_invite_sent(
    `ev_user` varchar(254) not null,
    `ev_ts` timestamp not null,
    INDEX(`ev_user`),
    INDEX(`ev_ts`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tt_invite_sent
    select hdr_user as ev_user,
    FROM_UNIXTIME(hdr_ts/1000) as ev_ts
    from aerofs_sv.sv_event
    where ev_type='300';

drop table if exists tt_folderless_invite_sent;
create table tt_folderless_invite_sent(
    `ev_user` varchar(254) not null,
    `ev_ts` timestamp not null,
    INDEX(`ev_user`),
    INDEX(`ev_ts`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tt_folderless_invite_sent
    select hdr_user as ev_user,
    FROM_UNIXTIME(hdr_ts/1000) as ev_ts
    from aerofs_sv.sv_event
    where ev_type='301';

--
--
--
drop table if exists analytics;
create table analytics (
    `user` varchar(254) not null,
    `sign_up_ts` timestamp,
    `first_taskbar_click_ts` timestamp,
    `first_share_invite_sent_ts` timestamp,
    `first_aerofs_invite_sent_ts` timestamp,
    `first_file_saved_ts` timestamp,
    `last_file_saved_ts` timestamp,
    PRIMARY KEY(`user`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into analytics(user,first_taskbar_click_ts)
    (select
    tt_clicked_taskbar.ev_user as user,
    MIN(tt_clicked_taskbar.ev_ts) as first_taskbar_click_ts
    from
    tt_clicked_taskbar
    group by user)
    on duplicate key update
    first_taskbar_click_ts = (select MIN(tt_clicked_taskbar.ev_ts) from tt_clicked_taskbar where  user = tt_clicked_taskbar.ev_user group by user);

insert into analytics(user,first_share_invite_sent_ts)
    (select
    tt_invite_sent.ev_user as user,
    MIN(tt_invite_sent.ev_ts) as first_share_invite_sent_ts
    from tt_invite_sent
    group by user)
    on duplicate key update
    first_share_invite_sent_ts = (select MIN(tt_invite_sent.ev_ts) from tt_invite_sent  where user = tt_invite_sent.ev_user  group by user);

insert into analytics(user, first_aerofs_invite_sent_ts)
    (select
    tt_folderless_invite_sent.ev_user as user,
    MIN(tt_folderless_invite_sent.ev_ts) as first_aerofs_invite_sent_ts
    from tt_folderless_invite_sent
    group by user)
    on duplicate key update
    first_aerofs_invite_sent_ts = (select MIN(tt_folderless_invite_sent.ev_ts) from tt_folderless_invite_sent  where user = tt_folderless_invite_sent.ev_user group by user);

insert into analytics(user,first_file_saved_ts)
    (select
    tt_file_saved.ev_user as user,
    MIN(tt_file_saved.ev_ts) as first_file_saved_ts
    from tt_file_saved
    group by user)
    on duplicate key update
    first_file_saved_ts = (select MIN(tt_file_saved.ev_ts) from tt_file_saved where user = tt_file_saved.ev_user  group by user);

insert into analytics(user,last_file_saved_ts)
    (select
    tt_file_saved.ev_user as user,
    MAX(tt_file_saved.ev_ts) as last_file_saved_ts
    from tt_file_saved
    group by user)
    on duplicate key update
    last_file_saved_ts = (select MAX(tt_file_saved.ev_ts) from tt_file_saved  where user = tt_file_saved.ev_user group by user);

update analytics
    set sign_up_ts =
    (select tt_sign_up.ev_ts from tt_sign_up where tt_sign_up.ev_user = analytics.user);

insert ignore into analytics(user,sign_up_ts)
    select
    tt_sign_up.ev_user as user,
    tt_sign_up.ev_ts as sign_up_ts
    from tt_sign_up;

drop table if exists analytics_file_saved;
create table analytics_file_saved (
    `user` varchar(254) not null,
    `sign_up_ts` timestamp,
    `file_saved_ts` timestamp not null,
    INDEX user_idx (`user`),
    INDEX sign_up_ts_idx (`sign_up_ts`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into analytics_file_saved(user,file_saved_ts)
    select
    tt_file_saved.ev_user as user,
    DATE(tt_file_saved.ev_ts) as file_saved_ts
    from
    tt_file_saved
    group by user, DATE(tt_file_saved.ev_ts);
update analytics_file_saved
    set analytics_file_saved.sign_up_ts =
    (select tt_sign_up.ev_ts
    from tt_sign_up
    where tt_sign_up.ev_user = analytics_file_saved.user);
insert into analytics_file_saved(user,sign_up_ts)
    select
    tt_sign_up.ev_user as user,
    tt_sign_up.ev_ts as sign_up_ts
    from tt_sign_up;

drop table if exists analytics_file_save_count;
create table analytics_file_save_count as
select count(*) as count from aerofs_sv.sv_event where ev_type = 0;

drop table if exists analytics_total_events;
create table analytics_total_events as
select count(distinct hdr_user) as users
from aerofs_sv.sv_event
where FROM_UNIXTIME(hdr_ts/1000) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
and ev_type != 1002;

--
--
--
-- progressive sign up count for a cohort
--
--
--
drop table if exists cohort_signups;
create temporary table cohort_signups as
select
COUNT(sign_up_ts) as signup_count,
YEARWEEK(sign_up_ts) as cohort
from analytics
group by cohort;

-- drop table if exists cohort_cumulative_signups;
-- create temporary table cohort_cumulative_signups as
-- select cohort, sign_up_date, num_users, cumulative_users
-- FROM (
--     SELECT
--         cohort,
--         sign_up_date,
--         num_users,
--         @cs := IF(@prev_cohort = cohort, @cs+num_users, num_users) AS cumulative_users,
--         @prev_cohort := cohort AS prev_cohort
--     FROM cohort_signups_by_date, (SELECT @prev_cohort := 0, @cs := 0) AS vars
--     ORDER BY cohort,sign_up_date
-- ) AS tmp;


--
--
-- taskbar clicked
--
--
--

drop table if exists user_time_to_first_click;
create temporary table user_time_to_first_click as
select user,
first_taskbar_click_ts,
sign_up_ts,
DATEDIFF(first_taskbar_click_ts,DATE_SUB(sign_up_ts, INTERVAL DAYOFWEEK(sign_up_ts)-1 DAY)) as time,
YEARWEEK(sign_up_ts) as cohort
from analytics
where first_taskbar_click_ts > '0000-00-00 00:00:00' and YEARWEEK(sign_up_ts)
group by user
order by sign_up_ts desc;

drop table if exists cohort_time_to_first_click;
create table cohort_time_to_first_click as
select
count(user) as num_users,
time as time_to_first_click,
cohort
from user_time_to_first_click
group by cohort, time_to_first_click;

insert ignore into cohort_time_to_first_click(cohort,num_users,time_to_first_click)
    select
    distinct
    cohort,
    0,
    6
    from
    cohort_time_to_first_click;

drop table if exists cohort_cumulative_days_to_first_click;
create temporary table cohort_cumulative_days_to_first_click as
SELECT cohort, time_to_first_click, num_users, cumulative_users
FROM (
    SELECT
        cohort,
        time_to_first_click,
        num_users,
        @cs := IF(@prev_cohort = cohort, @cs+num_users, num_users) AS cumulative_users,
        @prev_cohort := cohort AS prev_cohort
    FROM cohort_time_to_first_click, (SELECT @prev_cohort := 0, @cs := 0) AS vars
    ORDER BY cohort,time_to_first_CLICK
) AS tmp;

drop table if exists cohort_percentage_clicked;
create table cohort_percentage_clicked
select
cohort_cumulative_days_to_first_click.cohort as cohort,
time_to_first_click as time_to_first_click,
MAX(cumulative_users/signup_count*100) as percent
from cohort_cumulative_days_to_first_click left join cohort_signups on cohort_cumulative_days_to_first_click.cohort = cohort_signups.cohort
group by cohort, time_to_first_click;

-- --
--
--
-- shared invite
--
--
--
drop table if exists user_time_to_first_share;
create temporary table user_time_to_first_share as
select user,
DATEDIFF(first_share_invite_sent_ts,DATE_SUB(sign_up_ts, INTERVAL DAYOFWEEK(sign_up_ts)-1 DAY)) as time,
YEARWEEK(sign_up_ts) as cohort
from analytics
where first_share_invite_sent_ts > '0000-00-00 00:00:00'
group by user
order by sign_up_ts desc;

drop table if exists user_time_to_invite_sent;
create temporary table user_time_to_invite_sent as
select user,
DATEDIFF(first_aerofs_invite_sent_ts,DATE_SUB(sign_up_ts, INTERVAL DAYOFWEEK(sign_up_ts)-1 DAY)) as time,
YEARWEEK(sign_up_ts) as cohort
from analytics
where first_aerofs_invite_sent_ts > '0000-00-00 00:00:00'
group by user
order by sign_up_ts desc;

drop table if exists user_time_to_first_share_or_invite;
create temporary table user_time_to_first_share_or_invite as
select user,
cohort,
MIN(time) as time
FROM (
SELECT user, cohort, time from user_time_to_first_share
UNION
SELECT user, cohort, time from user_time_to_invite_sent) as t
group by user;

drop table if exists cohort_time_to_first_share;
create  table cohort_time_to_first_share as
select
count(user) as num_users,
time as time_to_first_share,
cohort
from user_time_to_first_share_or_invite
group by cohort, time_to_first_share;

insert ignore into cohort_time_to_first_share(cohort,num_users,time_to_first_share)
    select
    distinct
    cohort,
    0,
    6
    from
    cohort_time_to_first_share;

drop table if exists cohort_cumulative_days_to_first_share;
create temporary table cohort_cumulative_days_to_first_share as
SELECT cohort, time_to_first_share, num_users, cumulative_users
FROM (
    SELECT
        cohort,
        time_to_first_share,
        num_users,
        @cs := IF(@prev_cohort = cohort, @cs+num_users, num_users) AS cumulative_users,
        @prev_cohort := cohort AS prev_cohort
    FROM cohort_time_to_first_share, (SELECT @prev_cohort := 0, @cs := 0) AS vars
    ORDER BY cohort,time_to_first_share
) AS tmp;

drop table if exists cohort_percentage_shared;
create table cohort_percentage_shared
select
cohort_cumulative_days_to_first_share.cohort as cohort,
time_to_first_share as time_to_first_share,
MAX(cumulative_users/signup_count*100) as percent
from cohort_cumulative_days_to_first_share left join cohort_signups on cohort_cumulative_days_to_first_share.cohort = cohort_signups.cohort
group by cohort, time_to_first_share;



--
--
--
-- first saved
--
--
--
drop table if exists user_time_to_first_save;
create temporary table user_time_to_first_save as
select user,
DATEDIFF(first_file_saved_ts,DATE_SUB(sign_up_ts, INTERVAL DAYOFWEEK(sign_up_ts)-1 DAY)) as time,
YEARWEEK(sign_up_ts) as cohort
from analytics
where first_file_saved_ts > '0000-00-00 00:00:00'
group by user
order by sign_up_ts desc;


drop table if exists cohort_time_to_first_save;
create table cohort_time_to_first_save as
select
count(user) as num_users,
time as time_to_first_save,
cohort
from user_time_to_first_save
group by cohort, time_to_first_save;

insert ignore into cohort_time_to_first_save(cohort,num_users,time_to_first_save)
    select
    distinct
    cohort,
    0,
    6
    from
    cohort_time_to_first_save;

drop table if exists cohort_cumulative_days_to_first_save;
create temporary table cohort_cumulative_days_to_first_save as
SELECT cohort, time_to_first_save, num_users, cumulative_users
FROM (
    SELECT
        cohort,
        time_to_first_save,
        num_users,
        @cs := IF(@prev_cohort = cohort, @cs+num_users, num_users) AS cumulative_users,
        @prev_cohort := cohort AS prev_cohort
    FROM cohort_time_to_first_save, (SELECT @prev_cohort := 0, @cs := 0) AS vars
    ORDER BY cohort,time_to_first_save
) AS tmp;

drop table if exists cohort_percentage_saved;
create table cohort_percentage_saved
select
cohort_cumulative_days_to_first_save.cohort as cohort,
time_to_first_save as time_to_first_save,
MAX(cumulative_users/signup_count*100) as percent
from cohort_cumulative_days_to_first_save left join cohort_signups on cohort_cumulative_days_to_first_save.cohort = cohort_signups.cohort
group by cohort, time_to_first_save;



--
--
--
-- first saved last 7 days
--
--
--


drop table if exists users_saved_last_seven_days;
create temporary table users_saved_last_seven_days as
select distinct user,
DATE(DATE_SUB(sign_up_ts, INTERVAL DAYOFWEEK(sign_up_ts)-1 DAY)) as cohort_date,
YEARWEEK(sign_up_ts) as cohort
from analytics_file_saved
where file_saved_ts >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) and file_saved_ts <= CURRENT_DATE()
group by user
order by sign_up_ts desc;


drop table if exists cohort_saved_last_seven_days;
create table cohort_saved_last_seven_days as
select
count(user) as num_users,
cohort_date,
cohort
from users_saved_last_seven_days
group by cohort;

drop table if exists cohort_percentage_saved_last_seven_days;
create temporary table cohort_percentage_saved_last_seven_days
select
cohort_saved_last_seven_days.cohort_date as cohort_date,
cohort_saved_last_seven_days.cohort as cohort,
num_users/signup_count*100 as percent
from cohort_saved_last_seven_days left join cohort_signups on cohort_saved_last_seven_days.cohort = cohort_signups.cohort;

-- drop table if exists cohort_percentage_saved_last_seven_days_trailing;
-- create table cohort_percentage_saved_last_seven_days_trailing(
-- `day` int not null,
-- `cohort` int(6) not null,
-- `percent` double not null,
-- PRIMARY KEY (`day`,`cohort`)
-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into cohort_percentage_saved_last_seven_days_trailing(day, cohort, percent)
    select
    DATEDIFF(CURRENT_DATE(),(DATE_ADD(cohort_date, INTERVAL 7 day))) as day,
    cohort,
    percent
    from
    cohort_percentage_saved_last_seven_days
    where DATEDIFF(CURRENT_DATE(),(DATE_ADD(cohort_date, INTERVAL 7 day))) >= 0;
