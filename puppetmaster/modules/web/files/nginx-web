server {
    listen 80;
    rewrite ^ https://www.aerofs.com$request_uri permanent;
}
server {
    listen *:443;
    server_name aerofs.com;

    access_log /var/log/nginx/redirect.log;
    error_log /var/log/nginx/redirect.err.log;

    server_tokens off;
    ssl on;
    ssl_session_timeout 5m;

    ssl_certificate /etc/nginx/certs/ssl.cert;
    ssl_certificate_key /etc/nginx/certs/ssl.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # Cipher list from https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    add_header X-Frame-Options SAMEORIGIN;

    # Canonicalize on www.aerofs.com to avoid IE sending cookies for aerofs.com
    # to support.aerofs.com (which is Zendesk, not us).  Other browsers won't
    # hoist the cookies to the subdomain that shouldn't have it.
    rewrite ^ https://www.aerofs.com$request_uri permanent;
}
server {
    listen *:443;
    server_name www.aerofs.com;

    access_log /var/log/nginx/web.access.log;
    error_log /var/log/nginx/web.error.log;

    server_tokens off;
    ssl on;
    ssl_session_timeout 5m;

    ssl_certificate /etc/nginx/certs/ssl.cert;
    ssl_certificate_key /etc/nginx/certs/ssl.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # Cipher list from https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    add_header X-Frame-Options SAMEORIGIN;

    location /static {
        root /opt/web/web;
    }
    location /docs {
        alias /opt/web/docs/;
    }
    location / {
    # This is where the marketing
        alias /opt/staticweb/_site/;

        gzip on;
        gzip_disable "msie6";

        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        try_files $uri $uri/ @uwsgi;
    }
    location @uwsgi {
        # redirect /developer to /developers
        rewrite /developer(/.*)?$ /developers$1 permanent;

        # proxies to Pyramid, the python server serving the AeroFS website.
        uwsgi_pass 127.0.0.1:8080;
        include uwsgi_params;
        proxy_set_header Host $host;
        proxy_set_header Verify $ssl_client_verify;
        proxy_set_header Serial $ssl_client_serial;
        proxy_set_header DName $ssl_client_s_dn;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param UWSGI_SCHEME https;
        uwsgi_param SCRIPT_NAME "";
    }
    # For security, Bifrost can only be hit directly from webadmin (this is
    # configured in the AWS security group settings). There is one case where
    # the browser must hit Bifrost directly--submitting authorization for an
    # app through the consent page. That call is made by the browser to webadmin
    # and this section routes it to Bifrost to bypass the security group settings.
    location /auth/authorize$ {
        proxy_pass http://api.aerofs.com:8700/auth/authorize;
        proxy_cache off;
        proxy_buffering off;
        proxy_cookie_path / /auth/;
        proxy_http_version 1.1;
        proxy_set_header Connection $http_connection;
        proxy_ignore_headers X-Accel-Charset X-Accel-Buffering X-Accel-Limit-Rate X-Accel-Redirect X-Accel-Expires Expires Cache-Control Set-Cookie;
        proxy_read_timeout 60;
        proxy_send_timeout 60;
        proxy_set_header Verify $ssl_client_verify;
        proxy_set_header Serial $ssl_client_serial;
        proxy_set_header DName $ssl_client_s_dn;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
