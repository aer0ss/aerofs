#!/usr/bin/ruby
require "yaml"
require "puppet"
require "net/https"
require "pry"
require 'thread'

NUMBER_OF_THREADS = 2

class Kick
  attr_reader :update_status, :useful_logs

  def initialize(host)
    @http = Net::HTTP.new(host,8139)
    @http.use_ssl = true
    @http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    @http.read_timeout = 500
  end

  def run
    begin
      response = @http.put("/production/run/deploy", '{}', {"Content-type" => "text/pson"})
    rescue Exception => e
      puts e
      @update_status = "failed"
      @useful_logs = []
      return
    end
    @report = YAML.load(response.body)
    if @report.ivars["status"] == "success" then
      @logs = @report.ivars["options"][:report].logs
      @update_status = @report.ivars["options"][:report].status
      @useful_logs = @logs.select { |v| v.level == :err}
    end
    @report.ivars["status"]
  end
end


# find all nodes that will be kicked
nodes = YAML::load(File.open("/etc/puppet/nodes.yaml"))
do_not_kick_nodes = YAML::load(File.open("/etc/puppet/do_not_kick.yaml"))

# take difference of two arrays, unless do_not_kick_nodes is not an Array
if do_not_kick_nodes.kind_of?(Array)
  hosts_to_kick = nodes - do_not_kick_nodes
else
  hosts_to_kick = nodes
end

# get rid of nils and sort
hosts_to_kick = hosts_to_kick.compact.sort

puts "Preparing to kick the following hostnames:"
hosts_to_kick.each{ |h| puts "\t#{h}" }


host_queue = Queue.new
# keep a list of failed nodes (A Queue is synchronized so we'll use that)
failed_nodes = Queue.new
hosts_to_kick.each { |h| host_queue << h }
threads = []

NUMBER_OF_THREADS.times do
  threads << Thread.new do
    while true do
      begin
        # Pop from queue with non_block => true (that rhymes)
        host = host_queue.pop(true)
      rescue ThreadError
        # ThreadError means our queue is empty
        break
      end
      k = Kick.new(host)
      puts "Running puppet on #{host}"
      $stdout.flush
      kick_result = k.run
      if kick_result == "running" then
        puts "#{host} is already running, will try again"
        $stdout.flush
        # try again later
        host_queue << host
      end
      if k.update_status == "failed" or k.useful_logs.length > 0 then
        failed_nodes << host
      end
      puts "#{host} finished with status: #{k.update_status}"
      puts k.useful_logs
      $stdout.flush
    end
  end
end

threads.each { |t| t.join }

if failed_nodes.size > 0 then
  puts "Failures: #{failed_nodes.size}"
end

exit failed_nodes.size
